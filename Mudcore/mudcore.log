@@
@@ Gwen Morse did not write any of this code. It's simply a log of
@@ the Mudcore softcode database objects collected for archival
@@ purposes.
@@ 
@@ Below is the attribution message written by the original programmers:

@@ This is the MudCore Softcode Package, intended for use with TinyMUSH
@@ 3.0 and beyond. It expects the player_name_spaces configuration
@@ directive to be turned off.  It is currently being maintained by
@@ Amberyl, who can be contacted at lwl@godlike.com; any problems/bug
@@ reports/improvements should be reported to her.


=================================+++++================================

@@DBC> Now working with object #0, name: Limbo
@dig/teleport Limbo
@parent here=#5


=================================+++++================================

@@DBC> Now working with object #1, name: Wizard
@Adisconnect me=&LASTLOGOUT me=secs()
&LASTLOGOUT me=1095183346
@Startup me=@dolist secure(get(#10/GFUN_LIST))=@function/privileged [first(##,:)]=[rest(##,:)]; @dolist secure(get(#10/ADDCMD_LIST))=@addcommand [first(##,:)]=[rest(##,:)]; @@ uncomment to add TrueName speech; @@ @trig me/SPEECH_TRIG
&SPEECH_TRIG me=@dolist secure(get(#10/SPEECHCMD_LIST))=@addcommand/preserve [first(##,:)]=[rest(##,:)]; @addcommand/preserve :=#55/DO_COLON
@Aconnect me=[setq(0,match(Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec,extract(time(),2,1)))]; @pemit me=START LOG NOW: [extract(time(),5,1)]-[switch(strlen(%q0),1,0%q0,%q0)]-[switch(strlen(extract(time(),3,1)),1,0[extract(time(),3,1)],extract(time(),3,1))]s_met.log; @wait 0=@pemit me=%r[center(=,79,=)]%r%r***Begin Log***%rTime: [time()]%r%r[center(=,79,=)]; @doing Code Staff ;+bbscan; @wait 0=+skim; @stats; @list alloc;
@set me=WIZARD


=================================+++++================================

@@DBC> Now working with object #2, name: Master_Room
@dig/teleport Master Room


=================================+++++================================

@@DBC> Now working with object #3, name: Tinker
@lock me=#0
&LASTLOGOUT me=1095183307
&ORGS me=#39 #48 #49
@Mailcurf me=50 47 49 -1
&FIRST_LOGIN me=862260903
@Desc me=A new character.
@lock/EnterLock me=#0
@lock/UseLock me==*Tinker
@Adesc me=@pemit me=GAME: %N just looked at you.
@Aconnect me=+skim u; +bblist/l
@Adisconnect me=home; +flush
@Sex me=Male
@set me=WIZARD
@set me=ANSI


=================================+++++================================

@@DBC> Now working with object #4, name: Four


=================================+++++================================

@@DBC> Now working with object #5, name: Parent_Room
@dig/teleport Parent Room
@Desc here=%r[ifelse(%0,%0,udefault(STD,There is nothing of interest here.))]%r[setq(0,words(lattr(me/VIEW_*)))][setq(1,sub(words(v(PLACENUMS),|),1))][ifelse(v(META_OBJ),\\[meta-rooms\\][switch(%q0:%q1,0:-1,%r,%b)],)][switch(%q0:%q1,0:-1,,1:-1,\\[1 view\\]%r,*:-1,\\[%q0 views\\]%r,0:1,\\[1 place\\]%r,0:*,\\[%q1 places\\]%r,1:1,\\[1 view and 1 place\\]%r,1:*,\\[1 view and %q1 places\\]%r,*:1,\\[%q0 views and 1 place\\]%r,\\[%q0 views and %q1 places\\]%r)]
@set here/Desc = no_inherit
&STD here=There is nothing of interest here.
&EXITS here=There are no special exits here.
@Enter here=[switch([hasflag(%#,Terse)]:[hasflag(%#,Trans)]:[hasattr(me,SHORT-DESC)],0:0:*,,0:1:*,u(DIRS),1:0:0,u(DLIST),1:0:1,[u(SHORT-DESC)]%r[u(DLIST)],1:1:0,u(DIRS),1:1:1,[u(SHORT-DESC)]%r%r[u(DIRS)])][ifelse(%0,%r%0)]
@set here/Enter = no_inherit
&SHORT-DESC here=There is nothing notable here.
&COMPASS here=Amberyl show_dark
&DIRS here=[setq(0,%l)][setq(4,locate(%l,out,c))][u(#10/CPS_FMT_MINI,u(#10/CPS_DEXIT_FN,North),u(#10/CPS_DEXIT_FN,Northeast),u(#10/CPS_DEXIT_FN,East),u(#10/CPS_DEXIT_FN,Southeast),u(#10/CPS_DEXIT_FN,South),u(#10/CPS_DEXIT_FN,Southwest),u(#10/CPS_DEXIT_FN,West),u(#10/CPS_DEXIT_FN,Northwest),u(#10/CPS_DEXIT_FN,Up),u(#10/CPS_DEXIT_FN,Down))]
&DLIST here=Exits: %b [edit(trim(filter(#10/FINDEXIT_FN,North South East West NorthEast NorthWest SouthEast SouthWest Up Down)),%b,%b%b)]
@set here=VISUAL
@set here=PARENT_OK


=================================+++++================================

@@DBC> Now working with object #6, name: Six


=================================+++++================================

@@DBC> Now working with object #7, name: WizTool
@create WizTool=10
@Listen WizTool=*: *
@Amhear WizTool=@swi %0=MOTD,{&MOTD #17=%1},Wizard MOTD,{&WIZMOTD #17=%1},Down MOTD,{&DOWNMOTD #17=%1},Full MOTD,{&FULLMOTD #17=%1}
@Desc WizTool=To set a MOTD, either use the @motd command to set 'em up as you like, or edit MOTD, WIZMOTD, and DOWNMOTD on here. If you set the attribs here, use 'setmotd' to put the changes into the @listmotd. If you use @motd to do the changes, use 'savemotd' to save them.
@Startup WizTool=setmotd
&IS_WIZ WizTool=[or(hasflag(%#,Wizard),and(hasflag(owner(%#),Wizard),hasflag(%#,Inherit)))]
&DO_LEXITS WizTool=$+lexits *: @pemit %#=[setq(0,locate(%#,%0,*))][setq(1,lexits(%q0))][switch(0,isdbref(%q0),I don't see that here.,words(%q1),There are no exits there.,isdbref(first(%q1)),That object cannot have exits.,-- Exit Name-- [space(11)] -- Destination --[iter(%q1,%r[ljust(u(NAME_FN,##),26)] [u(NAME_FN,loc(##))] \%\[[name(owner(loc(##)))]\%\])])]
&DO_SAVEMOTD WizTool=$+savemotd: @listmotd; @pemit %#=MOTDs recorded @ [time()].
&DO_SETMOTD WizTool=$+setmotd: @motd [u(MOTD)]; @motd/wizard [u(WIZMOTD)]; @motd/down [u(DOWNMOTD)]; @motd/full [u(FULLMOTD)]; @pemit %#=MOTDs set @ [time()].
&DO_LCON WizTool=$+lcon *: @pemit %#=[setq(0,num(*%0))][switch(%q0,#-1,setq(0,locate(%#,%0,*)))][switch(%q0,#-1,I don't see that here.,#-2,I'm not sure which one you mean.,[u(NAME_FN,%q0)] is carrying: [iter(lcon(%q0),%r %b[u(FNAME_FN,##)])])]
&DO_ADDCOMMENT WizTool=$+addcomment *=*: @switch [setq(0,locate(%#,%0,*))]%q0=#-1, {@pemit %#=I don't see that here.},#-2, {@pemit %#=I'm not sure which one you mean.}, {@comment %q0=[setq(1,get(%q0/COMMENT))][switch(%q1,,u(COMMENT_FN,%#,trim(%1)),%q1 |*| [u(COMMENT_FN,%#,trim(%1))])]; @pemit %#=Comment on [u(FNAME_FN,%q0)] is now: [get(%q0/COMMENT)]}
&DO_BRIEF WizTool=$+brief *: @pemit %#=[setq(0,locate(%#,%0,*))][switch(%q0,#-1,I don't see that here.,#-2,I'm not sure which one you mean.,[type(%q0)]: [u(LNAME_FN,%q0)][map(LOCK_DISP_FN,Default Enter Give Leave Link Page Parent Receive Telout Tport Use User)][switch(money(%q0),0,,%rMoney: [money(%q0)])][switch(type(%q0),ROOM,switch(loc(%q0),#-1,,%rDrop-To: [u(LNAME_FN,loc(%q0))]),EXIT,%rSource: [u(LNAME_FN,home(%q0))]%rDestination: [u(LNAME_FN,loc(%q0))],%rLocation: [u(LNAME_FN,loc(%q0))]%rHome: [u(LNAME_FN,home(%q0))])])]
@lock/UseLock WizTool=IS_WIZ/1
&DO_BOOT WizTool=$+boot *=*: @switch/first [setq(0,num(*%0))]%q0:[hasflag(%q0,Wizard)]:[isnum(trim(%1))]=#-1:*:*, {@pemit %#=That is not a valid player.},*:1:*, {@pemit %#=You cannot boot-lockout another wizard.},*:*:0, {@pemit %#=You must specify a number of minutes to lock for.}, {&BOOT_LIST #17=[setq(1,v(BOOT_LIST))][setq(2,match(%q1,%q0:*:*))][setq(3,add(secs(),mul(%1,60)))][switch(%q2,0,%q1 %q0:%#:[trim(%1)]:%q3,replace(%q1,%q2,%q0:%#:[trim(%1)]:%q3))]; @boot %q0; @pemit %#=[name(%q0)] booted and locked out until [convsecs(%q3)].}
&DO_BOOTS WizTool=$+boots: @pemit %#=Name[space(14)]Wizard[space(12)]Min[space(3)]Allowed[iter(v(BOOT_LIST),%r[ljust(name(first(##,:)),16)] %b[ljust(name(extract(##,2,1,:)),16)] %b[rjust(extract(##,3,1,:),3)] %b [convsecs(extract(##,4,1,:))])]
&DO_UNBOOT WizTool=$+unboot *: @switch [setq(0,v(BOOT_LIST))][setq(1,match(%q0,[num(*%0)]:*:*:*))]%q1=0, {@pemit %#=That person is not on the boot list.}, {&BOOT_LIST #17=ldelete(%q0,%q1); @pemit %#=[name(*%0)] removed from the boot list.}
@set WizTool=INHERIT
@set WizTool=SAFE
@set WizTool=STOP
@set WizTool=COMMANDS
@parent WizTool=#17


=================================+++++================================

@@DBC> Now working with object #8, name: Help_Object
@create Help Object=10
&HELP_CHECK Help Object=+check <what>%r%rThis will check for the 'necessary' messages that should be set on the object you specify. Attributes are inherited from the parent, if necessary. The type of the object determines what is recommended:%r%r[space(8)]ROOM %b -- @desc, @succ (optional)%r[space(8)]THING %b -- @desc, @succ, @osucc, @drop, @odrop%r[space(8)]EXIT %b -- @desc, @succ, @osucc, @odrop%r[space(8)]PLAYER -- @desc, @sex%r%rAlso, AUDIBLE rooms and exits should have a @filter and @prefix, ENTER_OK objects should have enter and leave messages, and locked objects should have @fail and @ofail messages.%r%rYou can +check anything you can examine. +checking a player or thing also checks its contents; +checking a room also checks its contents and exits. To +check a single object, use "+check/only <object>".%r%r+check/f <player> : This command checks all of <player>'s objects. It is meant to be used by wizards processing quota requests. You must control <player>.%r%r+check/t <player>=<type> : This command works like +check/f, but it only checks objects of the specified type.
&HELP_COMPASS Help Object=+compass%r+compass <format>%r%r[space(8)]Prints a graphical display of your location, in one of many possible formats. See '+help compass formats' for more details.%r%r[space(8)]This command is dependent on directional aliases on exits: north, northeast, east, southeast, south, southwest, west, northwest, up, down. Only the standard and mini formats shows Up and Down exits. Exits will only be shown if they are not Dark, or they are Haven, or the Show_Dark compass option is turned on (useful if all exits in the area are Dark.%r%rContinued in '+help Compass2'.
&HELP_GREP Help Object=+grep <object>\[/<attribute pattern>\]=<string>%r%rThis searches the attributes of <object> for <string>. If you don't specify <pattern>, all attributes on the object will be checked. You must control <object>.%r%rThis command is, for example, useful for finding all the times you used '@trigger' on an item. Percents, brackets, and other special characters will need to be escaped with '\\'.
&HELP_LAST Help Object=+last <player>%r+last <list of players>%r%rThe first form of this command shows if a player is connected or disconnected, their last connect time and how long ago that was, or when they connected if the player is currently online. Wizards will also be shown the player's last site, and the amount of time they stayed logged on.%r%rThe second form of this command lists, in table form, the times the players logged in, and how long ago they logged out; wizards will also be shown how long the player stayed connected.
&HELP_LATTR Help Object=+lattr\[/<type>\] <obj>\[/<attr pattern>\]%r%rThis lists attributes on an item, together with the first sixty characters of the attribute text. It groups attributes into one of four types: Commands, Monitors, Globals (game-defined attributes like @desc), and Misc. You must control the object in order to use this command on it.
&HELP_MARGINS Help Object=+margins/view <obj>/<attr>=<top>,<bottom>,<left>,<right>%r+margins <obj1>/<attr1> to <obj2>/<attr2>=<top>,<bottom>,<left>,<right>%rMargins(<string>,<top>,<bottom>,<left>,<right>)%r%rThis command formats the evaluated attribute text of <obj>/<attr> with a top and bottom margin of <top> and <bottom> lines, respectively, and left and right margins of <left> and <right> spaces, respectively. You must control all the objects involved.%r%rThe first form of the command gives you a preview of what the text would look like. The second form of the command sets the format into <attr2> on <obj2>, in a form appropriate for a get_eval() evaluation of the attribute (with %%r and space() calls controlling the format).%r%rThe function version returns the a formatted string.%r%rWarning: very long attributes, or very narrow formats, may overload this command.
&HELP_PAIRS Help Object=+pairs <object>\[/<attribute patern>\]%r+pairs/find <object>/<attribute>%r%rThe first form of this command checks attributes to make sure braces, brackets, and parentheses are balanced. It returns the count of each type of special character, for the listed attributes. In order to check an object, you must control it. <attribute pattern> can be any wildcard pattern.%r%rThe second form of this command attempts to find pairing errors in a specific attribute. You must be able to read the attribute. If an error occurs, you will be told the error character that was encountered, the characters which needed to be matched, and the string up until the point the error was encountered will be returned. If the string ends before all the appropriate pairs are matched, you will be notified of a 'premature' end of string, and told the special characters that remain to be matched, in the order in which they occured in the string. The first character in a string is considered character 0.
&HELP_SCAN Help Object=+scan <command>%r+scan/from <object>=<command>%r+scan/all <object>=<command>%r%rThese commands will tell you if anything in the location of an object, being carried by the object, or the location of the object itself, has a $command on it which would match <command>.%r%rThe first form of this command operates on you, personally. The second form of the command checks from the perspective of another object; you must control the object in order to check it.%r%rThe first two forms of the command obey both the HALT flag and Uselocks (including Uselocks on parent objects), although the no_command flag on user-defined attributes is not. The third form of the command ignores both HALT and Uselocks, and is useful for exhaustive checks.%r%rIf you control the object, you will be told the specific attributes and wildcard-patterns that were matched; otherwise, you will only be told how many matches there were, and on which objects.
&HELP_SIZE Help Object=+size <object>%r%rThis command counts the amount of memory used by attribute text on an object. It does not include the amount of memory used by the base object overhead (such as memory used by locks or attribute names). <object> can be any normally valid object specification ('knife', '#115', 'me', etc.) or a player name. You must control the object.
&HELP_WHERE Help Object=+where \[<number>\]%r%rThis command sorts and displays the locations of connected players. It displays locations on the left-hand side of the screen, and players in those locations in a three-column alphabetized format on the right-hand side of the screen. For mortals, this command only includes findable players.%r%rIf <number> is provided, this command only lists those locations which have <number> or more locatable connected players.
&HELP_WHO Help Object=+who \[<list>\]%r+who/here%r+who/find%r%rThe +who command shows the currently-connected players in a variety of formats (by default, it shows their name, race, idle time, and location). If <list> is provided, only players whose name matches a specified pattern will be shown; for example, if you use '+who a d k*t', it would get you players whose names start with 'A', players whose names start with 'D', and players whose names start with 'K' and have a 't' somewhere in them. If you use '+who/here', it will only show the information for players in your current room. If you use '+who/find', it will only show findable players. The names of staff members appear in green.%r%rIf you set the WHO_FORMAT attribute on yourself, you can format the +who list in any way you like. The list takes the format '<field type>:<field length>'; for example, '&WHO_FORMAT me = NAME:16 ALIAS:16' gets you the name in a field 16 characters wide, and the alias in a field 16 characters wide.%r%rThe default +who format is:%r[get(#10/DEFAULT_WHO_FMT)]%r%rSee '+help Fields' for a list of fields.
&HELP_WIZARDS Help Object=+wizards%r%rLists the connected wizards, their idle times, and their statuses.%r%rTo set a status, a wizard should set his WIZ_STATUS attribute. If it is not set, his status will default to 'Available'.
&HELP_3WHO Help Object=+3who\[/a\]%r+3who <list of patterns>%r+3who/l <list of names or dbrefs>%r+3who/t <name>%r%r[space(8)]Gives the WHO list in a three-column output. Normally, this will be listed in order of connect time. If you want the list alphabetized by player name, use the '/a' switch. This is useful for seeing who's logged on without a huge amount of spam, and for quickly checking for groups of friends.%r[space(8)]The second form of this command takes a list of people or partial names, and lists connected players matching that list. For example, '+3who a d m' would list all connected players whose names begin with A, D, or M. You can also use more complicated patterns, such as '+3who D*T' to list all connected players whose names start with 'D' and have a 'T' someplace in the middle. You can also specify full player names, such as 'Caladan'. This is useful if you want to quickly check if certain groups of people are logged on (in an @aconnect, for example).%r[space(8)]The third form of +3who takes a list of player names or dbrefs, and displays the three-column WHO for those players in the list who are connected. For example, '+3who/l Deirdre Caladan Fiona' would check to see if those three people are connected.%r[space(8)]The final form lists everyone who connected after the time <name> connected; if <name> is not connected, the full list is displayed.
&HELP_MP Help Object=mp <list of players>=<message>%rmp/h <message>%r%rThis command works identically to the normal 'page' command, save that you can page a list of players with it. It formats the output in a manner very similar to page, so that normal page-highlights in your favorite client should also catch multipages.%r%rPercent and function substitutions _are_ evaluated before any input is passed to the 'mp' command. So, if you want to page a list of players repeatedly, you might want to consider doing something like this:%r%r@va me=Deirdre Gerard Eric Llewella Sand%rmp %%va=Hi, guys!%r%rThis will save typing.%r%rThe second form of the command is a handy shortcut -- it multi-pages every connected player in your current location (except yourself, of course), with a message. Please use this instead of OOC @emits or poses.
&HELP_MUTTER Help Object=+mutter <target list>[/<silent target list>]=<string>%r+mutter/tt <target>=<string>%r%r[space(5)]The first form of this command behaves identically to "whisper", except that the other players in the room will see that you have said something. A regular message, or part of a pose enclosed in "quotes", will have some of its words or groups of words replaced by "..." If you enclose a phrase with <angle brackets>, it will not be replaced. Poses without "quotes" will simply show that you have muttered something. <target list> can be a list of either names or numbers; names must be of players in the same room as you, and numbers are place numbers (which means everyone at that place will hear the full message). If you specify a <silent target list>, the appropriate people/places will also be muttered to, but will not show up in the "public" list of targets. This is useful for allowing people to quietly "spy" on you, and cover other situations where the target is ambiguous.%r[space(5)]The second form of this command behaves like the first, except that instead of the entire room hearing the mutter, only people at a place will do so. If you are at a place, those at your place will hear the mutter; if you are not, and the target is, those at that place will hear the mutter. If neither of you are at a place, an error message will be generated.%r%rSee '+help mutter2' for examples.
&HELP_MUTTER2 Help Object=Examples:%r%r[space(5)]+mutter Finndo=Can you loan me thirty Pence? I'm broke!%r[space(5)]Meg mutters to Finndo, "Can... loan... thirty... broke!"%r%r[space(5)]+mutter Bleys=:frowns. "What a <cheapskate> he is!" She shrugs.%r[space(5)]Meg frowns. She mutters to Bleys, "What... cheapskate..." She shrugs.%r%r[space(5)]+mutter Bleys 1=:chuckles. "Thank you very much."%r[space(5)]Meg chuckles. She mutters to Bleys and the mahogany bar, "Thank you..."%r%r[space(5)]+mutter Corwin/Benedict=War is a possibility.%r[space(5)]Meg mutters to Corwin, "War..."%r%r[space(5)]+mutter/tt Deirdre=Where did you hide those Trumps?%r[space(5)]At the bar, Meg mutters to Deirdre, "Where... Trumps?"%r%rMore explanation in '+help mutter3'.
&HELP_PLACES Help Object=Places are virtual places to sit, stand or occupy. You remain in the same room, but join a group of people within that room who may or may not be%rhaving a quiet conversation only with others placed with them.%r%rSee '+help places commands' for a list of commands that can be used in rooms with places.%r%rSee '+help places config' for help with configuring places.%r%rSee '+help places options' for a list of configurable options.%r%rSee '+help places functions' for a list of functions that can be used to access place data.
&HELP_PLACES_CONFIG Help Object=configure <number> places%r[space(8)]Sets up your current location with <number> places. 'configure 0 places' removes all places from the room.%r%rplaces config <number>%r[space(8)]Displays configuration data for that individual place.%r%rupdate <place #>/<option>=<configuration text>%r[space(8)]Modifies the text associated with a given place option.%r%rplaces reset%r[space(8)]Silently resets places in a room, removing people from them.%r%rA null FIXED message means vacancies can be moved freely to and from the place. This does not make sense for couches and rugs; in the case of such objects, set the FIXED to something like "That makes no sense."%r%rOJoin and Odepart messages prepend the name of the player. All Join and Depart messages have the place name appended.
&HELP_PLACES_OPTIONS Help Object=%b%bOption Description%t<Option>%tDefault Configuration Text%r%b%b------------------%t--------%t--------------------------%r%b%bPlace Name%t%tNAME%t%tTable x%r%b%bMaximum # of places%tMAXPLACES%tRandom%r%b%bCurrent # of places%tCURPLACES%tRandom (1 >= # >= MAXPLACES)%r%b%bFixed fail message%tFIXED%t%t<NULL>%r%b%bFull fail message%tFULL%t%tThere's no room to add a place there.%r%b%bEmpty fail message%tEMPTY%t%tThere's no place to move there.%r%b%bJoin message%t%tJOIN%t%tYou sit down at <place>.%r%b%bOjoin message%t%tOJOIN%t%tsits down at <place>.%r%b%bDepart message%tDEPART%t%tYou stand and leave <place>.%r%b%bOdepart message%tODEPART%t%tstands and leaves <place>.%r%b%bSay prefix%t%tPREFIX%t%tAt your table%r
&HELP_INDEX Help Object=[repeat(-,75)]%r[center(Complete Index of Help Topics,75)]%r[repeat(-,75)]%r%r[setq(9,iter(lattr(me/HELP_*),lcstr(rest(##,_))))][u(#10/FMT_5COL_FN,sort(%q9))]%r%r[repeat(-,75)]
&HELP_HELP Help Object=[center(\[ %b [mudname()] Global Help %b \],75,-)]%r%rGlobal Systems:%r%r[edit(u(#10/FMT_5COL_FN,v(GLOBALS_LIST)),_,%b)]%r%rMiscellaneous Commands:%r%r[edit(u(#10/FMT_5COL_FN,v(CMDS_LIST)),_,%b)]%r%rType '+help index' for a full index of help topics.%rType '+help <topic name, with no '+'>' for help with a specific topic.%rType '+help/index <word>' to search for help topics containing that word.%r[repeat(-,75)]
&HELP_MAIL Help Object=+mail is a global mail system. It allows you to send and receive messages, and provides various useful utilities for writing, reading, and managing those messages. The help topics available are:%r%r[edit(u(#10/FMT_4COL_FN,Mail_Reading Mail_Ranges Mail_Sending Mail_Editing Mail_Replying Mail_Forwarding Mail_Marking Mail_Deleting Mail_Notes Mail_Reviewing Mail_Quotas Mail_Aliases Mail_Options Mail_Messages Mail_Maintenance Mail_Credits),_,%b)]
&HELP_3LOOK Help Object=+3look%r%rThis performs a 'look' in the room, with the contents list formatted in a three-column format. The contents list is alphabetized, and non-player item names are prefixed with a '*'. This makes this command rather handy for looking at rooms with large contents lists.%r%rThis command does not trigger @odesc, @osucc, @ofail, @adesc, @asucc, or @afail. It does obey the TERSE flag; if you are set TERSE, you will not see the room's @desc, @succ or @fail.
&HELP_WIZTOOLS Help Object=There are a number of tools available for wizards.%r%r+addcomment <object>=<comment>%r[space(8)]This updates the @comment attribute on a player, stamping an addition to the existing comment, signing it with the wizard's name (or alias, if shorter) and the date.%r%r+brief <object>%r[space(8)]This displays a brief summary of an object, listing location/home for objects, source/destination for exits, drop-tos for rooms, money, locks, and other vital information.%r%r+lcon <item>%r[space(8)]This pretty-prints the contents of an object.%r%r+lexits <item>%r[space(8)]This pretty-prints the exits from a room.
&HELP_MAIL_READING Help Object=Reading Your Mail (Page 1/3)%r------- ---- ---- ----------%r%r[ljust(+read,20)] This command reports the number of read and unread%r[space(21)]messages in your mailbox. It is a good command%r[space(21)]to put in an @aconnect.%r%r[ljust(+mailstatus <list>,20)] Give the mail status for each of the players in <list>.%r[space(21)]This is, "No unread mail." or "New mail since <time of%r[space(21)]first unread message>." Useful for players of multiple%r[space(21)]characters to quickly if they have mail in any character.%r%rContinued in '+help Mail Reading2'.
&HELP_MAIL_RANGES Help Object=Specifying Mail Ranges%r---------- ---- ------%r%rMost mail commands take a message range. This can be a number, a list of numbers, a range of numbers, or a keyword.%r%r[ljust(<number>,20)] Just that number, i.e., "5" for message #5.%r[ljust(<list of numbers>,20)] Several numbers, i.e., "3 8" for messages #3 and #8.%r[ljust(<range of numbers>,20)] A range of numbers, i.e., "2-5" for messages #2 to #5.%r[ljust(all,20)] All messages.%r[ljust(current,20)] The current message.%r[ljust(deleted,20)] Messages marked for deletion.%r[ljust(last\[:<num>\],20)] The last (or last <num>) message(s).%r[ljust(marked,20)] Marked messages.%r[ljust(next,20)] The message after the current message.%r[ljust(previous,20)] The message before the current message.%r[ljust(unread,20)] Messages that are unread.%r[ljust(author:<name>,20)] Messages from <name>.%r[ljust(subject:<string>,20)] Messages with <string> somewhere in the subject line.%r[ljust(tag:<string>,20)] Messages tagged with <string>.%r[ljust(text:<string>,20)] Messages with <string> somewhere in the message body.%r%rFor keywords, only the first letter needs to be specified.
&HELP_MAIL_SENDING Help Object=Sending Mail%r------- ----%r%rYou can begin a mail message with the command:%r%r+mail <list of people or aliases>=<subject>%r%ror with the +forward, +reply, or +replyall commands. These commands will place you in a mail editor.%r%rTo add text to your message, type the text, prefixing each line with a '-', i.e., "-Here's some nifty mail text!" A space or carriage return (depending on what your mail options are set to) will automatically be inserted between the last text you entered and the new text you enter.%r%rPlease read the help entry on "Mail Editing" for more information on editor commands and sending messages.%r%rSee also: Mail Aliases, Mail Forwarding, Mail Replying
&HELP_MAIL_EDITING Help Object=Mail Editor Commands%r---- ------ --------%r%r[ljust(+cc <list>,25)] Change the carbon-copy list. There is no difference%r[space(26)]in message content between addresses on the "To" line%r[space(26)]and addresses on the "Cc" line.%r%r[ljust(+bcc <list>,25)] Change the blind-carbon-copy list. People on this%r[space(26)]list will get the message but their names will not%r[space(26)]appear in the message header.%r%r[ljust(+edit <part>=<old>/<new>,25)] Edits <part>, replacing <old> text with <new> text.%r[space(26)]<part> can be "To", "Cc", "Bcc", "Subject", or%r[space(26)]"Text". The new message is printed after editing.%r%r[ljust(+proof,25)] Shows you the message draft.%r[ljust(+toss,25)] Exits the editor and discards the message, unsent.%r[ljust(+send,25)] Exits the editor and sends the message. '--' is%r[space(26)]equivalent to +send. Duplicate addresses are%r[space(26)]automatically removed (one message copy per person).%r%rSee also: Mail Sending
&HELP_MAIL_REPLYING Help Object=Replying to Mail Messages%r-------- -- ---- --------%r%r[ljust(+reply \[<range>\],25)] Reply to a mail message. This places you in the mail%r[space(26)]editor, with a message addressed to the person who%r[space(26)]sent the mail you are replying to, and a subject%r[space(26)]line of "Re: <subject>". With no range given, this%r[space(26)]replies to the current message; otherwise, it replies%r[space(26)]to the specified message. This command does NOT%r[space(26)]include the text of the old message.%r%r[ljust(+replyall \[<range>\],25)] Like +reply, except the "To" line is the person who%r[space(26)]sent the mail you are replying to, plus all other%r[space(26)]people on the "To" line of the previous message,%r[space(26)]and the "Cc" line is all people who received carbon%r[space(26)]copies of the previous message.%r%rSee also: Mail Sending, Mail Editing, Mail Ranges
&HELP_MAIL_FORWARDING Help Object=Forwarding Mail Messages%r---------- ---- --------%r%r[ljust(+forward <list>=<range>,27)] Forwards a message specified by <range> to a <list>%r[space(28)]of addresses. This places you in the mail editor,%r[space(28)]with a subject line of "Fwd: <subject>", and the%r[space(28)]text of the forwarded message in the editor buffer.%r[space(28)]You can append your own comments, and edit the%r[space(28)]message just like you would a normal mail message.%r%r[ljust(+bounce <list>=<range>,27)] Sends a message specified by <range> to a <list>%r[space(28)]of addresses. It simply bounces the message on,%r[space(28)]as if the original sender had blind-carbon-copied%r[space(28)]it; it does not invoke the editor. Please use this%r[space(28)]instead of +forward, if you do not need to make%r[space(28)]changes in the message; it saves db space.%r%rYou can also send additional copies of a letter you have written, via the '+resend letter' command; see Mail Reviewing for details.%r%rSee also: Mail Sending, Mail Editing, Mail Ranges, Mail Reviewing
&HELP_MAIL_MARKING Help Object=Marking Mail Messages%r------- ---- --------%r%r[ljust(+mark \[<range>\],30)] Marks a range of messages with the 'mark' flag.%r[space(31)]Marked messages can be referenced in range%r[space(31)]specifications via the keyword "marked".%r%r[ljust(+unmark \[<range>\],30)] Removes the 'mark' flag from the specified%r[space(31)]messages.%r%r[ljust(+tag \[<range>=\]<tag>,30)] Marks a range of messages as being in the list%r[space(31)]associated with <tag>. Such messages can be%r[space(31)]referenced in ranges by 'tag:<tag>'. This is%r[space(31)]useful for organizing mail.%r%r[ljust(+untag \[<range>=\]<tag>,30)] Removes the specified messages from the list%r[space(31)]associated with <tag>.%r%r[ljust(+list tags,30)] Lists all tag names.%r%rSee also: Mail Ranges
&HELP_MAIL_DELETING Help Object=Deleting Mail%r-------- ----%r%r[ljust(+delete \[<range>\],20)] If your mail option for delete is set to 'hard', this will%r[space(21)]delete messages from your mailbox. Otherwise, this command%r[space(21)]will perform a 'soft' delete, and simply mark the messages%r[space(21)]for later deletion. If you don't specify a range, the%r[space(21)]delete is performed on the current message.%r%r[ljust(+undelete \[<range>\],20)] This command will remove the to-be-deleted mark from a%r[space(21)]'soft'-deleted message. If you don't specify a range, the%r[space(21)]undelete is performed on the current message.%r%r[ljust(+flush,20)] This command deletes from your mailbox all messages that%r[space(21)]have been marked for deletion. This is a good command to%r[space(21)]put in your @adisconnect, if your mail option for delete%r[space(21)]is set to 'soft'.%r%r'+clear' is an alias for '+delete'.%r%rSee also: Mail Ranges, Mail Options
&HELP_MAIL_NOTES Help Object=Writing a Personal Note%r------- - -------- ----%r%rYou can write a short note to yourself via the command '+note \[<subject>=\]<text>'. This will save the note in your mailbox, where it can be read like a normal mail message. If you specify <subject>, it will be used as the subject of the message. If not, the subject will be, "Personal Note".
&HELP_MAIL_REVIEWING Help Object=Reviewing Mail (Page 1/2)%r--------- ---- ----------%r%r[ljust(+review letters \[<list>\],27)] Lists letters you have sent that have not yet%r[space(28)]been deleted by all their recipients, by subject,%r[space(28)]number still held, first recipient, and date.%r[space(28)]<list> can contain a list or range of numbers,%r[space(28)]the keywords 'all' (all letters), 'last' (last%r[space(28)]letter), 'last:<number>' (last <number> letters),%r[space(28)]'to:<name>' (searches To, Cc, Bcc fields for that%r[space(28)]recipient or alias), 'subject:<pattern>' (looks%r[space(28)]for <pattern> in subjects), or 'text:<pattern>'%r[space(28)](looks for <pattern> in letter text).%r%r[ljust(+review letter <list>,27)] Views the letters specified by <list> (criterion%r[space(28)]as '+review letters'), displaying the 'To', 'Cc',%r[space(28)]'Bcc', 'Subject', and 'Text' of the letter, in%r[space(28)]addition to a list of recipients who have not yet%r[space(28)]deleted the message from their mailboxes.%r%rSee the help entry for "Mail Reviewing2" for more.
&HELP_MAIL_ALIASES Help Object=Mail Aliases%r---- -------%r%r+add personal alias <alias>=<list>%r+remove personal alias <alias>%r+expand personal alias <alias>%r+list personal aliases%r%rThese commands allow you to create, delete, and view personal mail aliases. When writing a mail message, you can substitute mail aliases for names. For example, '+add personal alias mail-hacks=F'jon Brandy Amberyl' would allow you to later use 'mail-hacks' in the 'To', 'Cc', or 'Bcc' lines of mail messages, instead of having to type out all three names. Aliases can reference other aliases.%r%r+add global alias <alias>=<list>%r+remove global alias <alias>%r+expand global alias <alias>%r+list global aliases%r%rThese commands function identically, except that the aliases are defined for the entire MUSH. Only wizards may add or remove global mail aliases, although anyone can use them.
&HELP_MAIL_OPTIONS Help Object=Mail Options (Page 1/2)%r---- ------- ----------%r%rThe command '+set mail option <option>=<choice>' allows you to set a mail option, customizing the behavior of the mail system for yourself. Available mail options are as follows:%r%r[ljust(delete,15)] This option has two choices, 'hard' and 'soft'. If it is set%r[space(16)]to 'hard', the '+delete' command will immediately delete a%r[space(16)]message from the mailbox. If it is set to 'soft', the '+delete'%r[space(16)]command will only mark the message for later deletion (via the%r[space(16)]'+flush' command).%r%r[ljust(space,15)] This option has two choices, 'space' and 'return'. If it is%r[space(16)]set to 'space', a space will be inserted between each text%r[space(16)]addition via '-' into the mail editor. If it is set to%r[space(16)]'return', a carriage return will be inserted instead.%r%r[ljust(format,15)] This option has two choices, 'standard' and 'compact'. The%r[space(16)]'compact' format leaves out bordering whitespace on displays.%r%rSee the help entry for "Mail Options2" for more.
&HELP_MAIL_OPTIONS2 Help Object=Mail Options (Page 2/2)%r---- ------- ----------%r%r[ljust(autoforward,15)] This option must be given a list of one or more player names.%r[space(16)]All mail sent to you will automatically be forwarded to that %r[space(16)]list of people. This is useful for builder characters who%r[space(16)]aren't logged on very often, and for robots; it's a good idea%r[space(16)]to autoforward the mail for such characters to their primary%r[space(16)]players. If you include yourself on the autoforward list, you%r[space(16)]will still get a copy of the messages.%r%rThe command '+mail status \[for <player>\]' will display the status of your mailbox, mail quota, and mail options. Wizards can also display the status of other players' mailboxes. The command '+mail defaults' will display the global mail defaults.%r%rIf you set a 'MAIL_SIG' attribute on yourself, such as, '\%r\[space(8)\]-- Amberyl', it will automatically be evaluated and appended to the end of every message you send.%r%rSee also: Mail Deleting, Mail Sending, Mail Quotas
&HELP_MAIL_MESSAGES Help Object=Mail Messages%r---- --------%r%rYou can customize the messages you see when you send and receive mail, or that others see when they use mail in your area.%r%rThe MAIL-HAVEN attribute on a room controls whether mail pickup and delivery messages are public or not. If the MAIL-HAVEN attribute on a room is "Yes", or the global mail configuration is set to Mail-Haven, pickups and deliveries are only shown to senders and recipients; otherwise, they are seen by everyone in the same room as the senders and recipients.%r%rThe messages are checked in the order of Location, Player, and Default. The player's dbref is passed as '%%0' (and for delivery, the sender's dbref is passed as '%%1'), and message text is evaluated; therefore, it's possible to set a message to something like "A postman picks up a letter from \[name(%%0)\]." The configurable mail messages are:%r%r[ljust(MAIL-ENTER,15)] Message seen when entering the mail editor.%r[ljust(MAIL-SEND,15)] Message seen when a mail message is sent.%r[ljust(MAIL-DELIVER,15)] Message seen when a mail message is delivered.%r[ljust(MAIL-TOSS,15)] Message seen when a mail message is +toss'ed.%r[ljust(MAIL-NOTE,15)] Message seen when a +note is written.
&HELP_MAIL_MAINTENANCE Help Object=Mail Maintenance%r---- -----------%r%rSeveral commands are available to make mail management easier for the wizards.%r%r[ljust(+destroy mailbox for <player>,30)] This command destroys a player's mailbox. It%r[space(31)]removes their current mail, and deletes all mail%r[space(31)]sent by that player. This is the _only_ command%r[space(31)]that should ever be used to destroy a mailbox.%r[space(31)]Do NOT use @destroy on mailboxes.%r%r[ljust(+mail status report,30)] This prints out a report of all mailboxes on the%r[space(31)]game, with information on the players, messages%r[space(31)]sent, forwards, and aliases. This command is%r[space(31)]computationally expensive, and, on games with%r[space(31)]many mailboxes, will cause significant amounts%r[space(31)]of disk access. It does report "bad" mailboxes%r[space(31)]and players; it does not, however, consistency%r[space(31)]check message pointers.
&HELP_MAIL_CREDITS Help Object=Mail Credits%r---- -------%r%r[space(8)]This mail system, written by Fluff of TooMUSH, is based upon the "common" global +mail interface design originally pioneered by F'jon in his mailpouches (and later global +mail) for PernMUSH. The code is completely original, containing nothing from previous mailers; the design, however, owes much to others.%r[space(8)]The layout and look of the mailer, the syntax of many of the commands, and the concepts of message range keywords, address aliasing, and mail options come from the +mail written by Brandy of CrystalMUSH. I have made a conscious effort to be as compatible as possible, at the user-interface level, with her excellent design.%r[space(8)]The concepts of mail signatures and message marks, as well as some command syntax and look-and-feel, come from the +mail extensions written by Tanaquil of PernMUSH. The specific organization of customized mail messages comes from Jasra of AmberMUSH's extensions.%r[space(8)]This code was written with efficiency in computation and storage in mind. Its primary difference from prior mailers is that it stores but a single copy of any message, regardless of the number of recipients. This mailer is currently in beta-testing; it will be made publicly available in the future. Bug reports should be sent to lwl@netcom.com.
&HELP_MVATTR Help Object=+mvattr <old obj>/<old attr>=<new obj>/<new attr>%r+mvattr <old obj>/<wildcard>=<new obj>%r%rThe first form of this command moves the contents of an attribute on one object, to an attribute on another object. You must control both objects. The old attribute is deleted after the move.%r%rThe second form of this commands moves all attributes on <old obj>, whose name matches <wildcard>, to <new obj>. You must control both objects.
&HELP_AWAKE Help Object=+awake%r%rThis command checks your location for objects which might possibly be listening to you. This includes players (connected or not), puppets, MONITOR objects or objects with a @listen set, and the objects or contents of objects connected via AUDIBLE exits or a @forwardlist attribute (whether or not the location is AUDIBLE), or via an object with a @listen of *.%r%rOutput is split into the format of two objects per line of output. The output is dvided into five columns. The first, marked 'C' for 'Connected', will have a '*' in it if the object is connected, or the owner of the object is connected. The second column, marked 'H' for 'Hearer', will have a '*' in it if the object is a player or puppet. The third column, marked 'M' for 'Monitor', will have a '*' in it if the object is MONITOR or has a @listen set. The fourth column, marked 'A' for 'Audible', will have a '*' in it if the object is AUDIBLE. No distinction is drawn between objects in the room, and things which are reachable via @forwardlists and the like. The fifth column contains the name of the object; if the object does not own itself, its dbref, flags, and owner will also be displayed.
&HELP_FINGER Help Object=+finger <name>%r%rThis command shows information about a player in a customizable manner. If you set the FINGER_FORMAT attribute on yourself, you can format this in any way you like. Formats are enclosed in <angle brackets> (unlike +who); for example, '<NAME:16>' would be the player's name in a field 16 characters wide. You can use ANSI and other special stuff, though note that directly ANSI-hiliting something in <angle brackets> will not work. The names of staff members appear in green.%r%rExample: '&FINGER_FORMAT me=<NAME:0>'s (<ALIAS:0>) full name is "<FULLNAME:20>"' might print 'Zahn's (Z) concept is "Joseph Q. Zahn"'%r%rThe default +finger format is:%r[get(#10/DEFAULT_FINGER_FMT)]%r%rSee '+help Fields' for a list of fields.
&HELP_SELFBOOT Help Object=+selfboot%r%rBoots off all of your connections except your most recent one. This is useful if your net dies, your machine crashes, or some other odd disaster leaves you with "ghost" logins.
&HELP_TIDY Help Object=+tidy%r%rRemoves disconnected players, and the puppets of disconnected players, from your present location, sending them home.%r%rIf the attribute TIDY_MESSAGE is set on the location, it will be displayed; the tidying player's dbref will be passed at %%0.
&HELP_DETAILS Help Object=+details%r+detail <object>%r+detail <object>'s <detail>%r%rThis set of commands enables you to obtain more information about an object, allowing you to extend the amount of description available without writing an overly long object @desc.%r%rDetails are set up in one of two possible ways. The first is use of the DETAIL_*, ODETAIL_*, and ADETAIL_* attributes (corresponding to @desc, @odesc, and @adesc, roughly). The second and more complicated way is through the use of a DETAILS_REF attribute, which contains the dbref of the object on which the detail-attributes are stored, and the attribute DETAILS, listing available details, both of which are set on <object>. The DETAIL_*, ODETAIL_*, and ADETAIL_* attributes are then set on the DETAILS_REF object instead. This second use is intended for those people who use multi-descer objects.%r%rInside the substitutes for details, '%%0' corresponds to the name of the <detail>, and '%%1' corresponds to the dbref of the person looking at the detail.%r%r'+help details2' for more.
&HELP_DETAILS2 Help Object='+detail <object>' lists the available details on an object. If a DETAILS_REF is present on the object, the DETAILS attribute will be used to obtain this list. Otherwise, the DETAIL_* attributes on <object> will be used to generate this list.%r%r'+detail <object>'s <detail>' looks at a detail on an object, activating its corresponding DETAIL, ODETAIL, and ADETAIL. If a DETAILS_REF is present, it will be the triggered object; otherwise, <object> will.%r%r'+details' lists objects in the vicinity (items and exits in the room, or carried by you, as well as the room itself) that have details, and the details present, in four-column format. Any object type -- player, thing, room, or exit -- can have details.%r%rExample:%r%r&DETAILS_REF me=#1122%r&DETAILS me=Pistol%r&DETAIL_PISTOL #1122=This is a pearl-handled .45-caliber gun.
&HELP_VIEW Help Object=+view%r+view <object>%r%r+view allows you to have "virtual objects" in your rooms -- objects that can be looked at and respond with the equivalent of Desc, Odesc, and Adesc, but cannot be picked up. This allows you to put more detail into your rooms without needing to create a lot of extraneous objects.%r%rTo put a 'view'able object in a location, add the attribute VIEW_<object name> to the location, and, optionally, OVIEW_<object name> and AVIEW_<object name>. If there are spaces in the name, substitute underscores (i.e. a viewable 'oak table' would be VIEW_OAK_TABLE).%r%r'+view <name>' shows the contents of the VIEW attribute to the player. If there is an OVIEW, everyone else in the room sees "<player name> <OVIEW message>". If an AVIEW exists, it is executed. Players may use partial names to view objects; the oak table could be viewed with '+view oak'. The name that the player used is passed to the VIEW attributes as %%0. The player's name and dbref are passed as %%N and %%# (and \%1), respectively.%r%r'+view' lists all viewable objects in a location. (You can also create viewable objects that don't show up in '+view' by using DVIEW_<name>, ODVIEW_<name>, and ADVIEW_<name> instead of the usual VIEW_<name>, etc.)
&HELP_LHELP Help Object=+lhelp%r%r+lhelp <subject>%r[space(5)]+lhelp is a help command local to each area. The local help can give players background information about a particular area: its history, customs, topography, notable characters, and any special commands available there. +lhelp lists the subjects available, while +lhelp <subject> lists information on a particular subject.%r[space(5)]The local help is maintained by the builder(s) of the area.%r%rSee also: +help local help
&HELP_LOCAL_HELP Help Object=&lhelp_refs <place> = <lhelp ref> ...%r&lhelp_title <place>=<Title>%r&lh_<subject> <lhelp ref>=...%r&lhd_<subject> <lhelp ref>=...%r%r[space(5)]These attributes are used to create local help for an area. LHELP_REFS should be put on the parent of the area, and should contain a list of objects that store the actual help information. These objects may be owned by other players, to allow multiple builders to add their own help to a more general area. LHELP_TITLE is optional, and allows personalised titling. This should also be kept on the parent of the area.%r[space(5)]LH_* are the attributes that store the help information. They should be kept on objects referred to in LHELP_REFS. LH_* attributes appear in the list of subjects shown by '+lhelp'; to have a 'dark' topic which isn't listed in the main topic list, use LHD_*. Enactor remains constant (%%# and %%N work as expected.) Example:%r> @create boonies_parent%rBoonies_parent created as object #123456.%r> &LHELP_REFS Boonies_parent=#123456 %(store the local help on the parent%)%r> &LH_Introduction Boonies_parent=This is a yawn-a-minute area of no interest.%r%rSee also: help @parent%b%b+help lhelp
&HELP_INSPECT Help Object=+inspect%r%rPerforms a brief building inspection on the room you are currently in. You must control the room. The inspection consists of:%r%r1. Checking exit backlinks. Warnings will be issued if an exit does not have a directional alias, if no backlink to the current location from an exit's destination exists, or if the backlink's direction is incorrect (an exit going south should have a north backlink, for example).%r%r2. Checking to make sure all exits are linked, and that there's an Out exit.%r%r3. Checking exit aliases. A warning will be printed if there is no acronym alias (for example, a "North Beach" exit should have an "NB" alias). It will also warn if the exit acronym might conflict with a standard directional abbreviation (if it's not a logical abbreviation for the exit's direction), or with a command (i.e, 'e', 'w', 'i', 'l').%r%r4. Checking exit attributes. Exits should have a Desc, plus Succ/Osucc/Odrop, or Fail.%r%r5. Checking room attributes. Rooms should have a Desc. A Succ or Fail is optional (missing ones will generate warnings).
&HELP_SCOPE Help Object=+scope%r%rLooks at the 'scope' of your current location. You must control the room. It reports the total number of attributes on it, the number of bytes used by attribute text, the number of viewable items in the room, the number of exits in the room, and the number of objects in the room. It also reports the room's parent, if any. Finally,it reports the name and destination of the room's Out exit.
&HELP_IDLE Help Object=+idle%r+idle/here%r+idle/list%r%rThe first form of this command lists the idle times of every player connected to the MUSH, with the player names in alphabetical order, in 5-column format.%r%rThe second form of this command does the same thing, except it only lists connected players in your location.%r%rThe third form of this command lists idles by category, listing only the player names, in alphabetical, six-column format. Players who are less than 5 minutes idle are classified as 'Active'. Players who are 5 to 15 minutes idle are classified as 'Awake'. Players who are 15 minutes to 1 hour idle are classified as 'Idle'. Finally, players idle for longer than an hour are classified as 'Comatose'.
&HELP_KNOCK Help Object=+knock <exit>%r+knock <exit>=<message>%r%rThis command sends a message to the room beyond a nearby exit. Everything in the room on the far side will receive a message, and everything in your current location will see that you have sent a message to the room beyond a certain exit. Your gender will be identified, though if you have your VOICE attribute set, it will automatically be substituted instead. %r%rIf <message> it not specified, your location will see, "<your name> knocks on <this side>." and the far side will see, "You hear someone knocking on <far side>."%r%rIf <message> is specified, your location will see the message you have called out, and the far side will see that someone has called out a message at the exit. The ':' and ';' prefixes to messages can also be used to send poses.%r%r<this side> is the contents of <exit>'s ThisSide attribute, or, if that doesn't exist, the name of <exit>. <far side> is the contents of <exit>'s OtherSide attribute, or if that doesn't exist, the name of <exit>.%r%rSee also: AUDIBLE, @prefix
&HELP_HUSH Help Object=+hush ambience%r%rThis temporarily turns off ambience messages in a room (see +help Ambience).
&HELP_AMBIENCE Help Object=configure <place> for ambience%r&ambientref <place>=<message holder number>%r&ambient_<name1> <message holder>=<Ambient message 1>%r&ambient_<name2> <message holder>=<Ambient message 2>%r...%r&ambientdelay <place>=<minutes>%r%r[space(8)]These commands set up 'ambient messages' on rooms that people are likely to enter. An ambient message is a message chosen randomly from a list of attributes named AMBIENT_<whatever>, and sent to the contents of the place, e.g., "The frogs croak in the cool water."%r[space(8)]Ambient messages can be used to set background for a place, and are selected randomly at intervals; the delay, in minutes, should be specified as 10, 20, or 30. The messages are only broadcast when a connected player is in the room. The message order is random, but messages will not be repeated until every ambient message has been shown.%r[space(8)]The configure command changes the value of @aenter in <place>, but does nothing else. Everything is handled by a global object. The configuration code may be placed upon a parent, and will be shared by the parent's children.
&HELP_MUDCORE Help Object=Credits and Copyright Notice: MudCore version 1.2%r%rThe MudCore package is maintained by Amberyl, who also designed and wrote most of the code for it. A fairly significant portion of MudCore includes concepts and code derived from the work of others, and changes made by other people, including: Ken Bartlett (Kynn), John Batzel (Tiercel@PernMUSH), Joshua Bell (Tash@NarniaMUSH), Jean Marie Diaz (Ambar), Carol Gaupp (Brandy@CrystalMUSH), Mark Grundy (Meg@AmberMUSH), Fred Hicks (Iago), Jon Kull (F'jon@PernMUSH), and Jeff Vance (Drake@AmberMUSH). It is derived from the globals collections of PernMUSH, AmberMUSH, Pax Magica, and Blood of Amber.%r%rThis code is under a copyright which more or less amounts to, "You can distribute and use this freely, as long as you don't make any money off it, you retain this notice, and you give the author a copy of any improvements you make to the code."%r%rAn extended version of copyright and credits can be found packaged with the MudCore database.%r%rQuestions about MudCore should go to lwl@godlike.com (please note MudCore and MUSH version, if you are reporting a bug).
&HELP_UPTIME Help Object=+uptime%r%rGives the time and date of the last restart.
&HELP_EXITS Help Object=There are global "fake exits" for the cardinal compass directions (north, south, east, west, northeast, southeast, northwest, southwest, up, down) and their aliases (N, S, E, W, etc.)%r%rYou can 'fake' exits in those directions, by setting the attributes DESC_<exit name> and FAIL_<exit name> on a room. These messages will be displayed when the exit is looked at, or if someone tries to go that way. The default messages are, "There's nothing special in that direction." and "There is no exit in that direction."%r%rExample: to fake a "north" exit, one might set something like:%r%r&DESC_NORTH here=To the north is a storage shed. It seems to be locked.%r&FAIL_NORTH here=You cannot enter the locked storage shed.
&HELP_COMPASS2 Help Object=Use '&COMPASS <room>=<format> \[show_dark\]' to set a compass format and on a room (or on a parent room, to make the format apply to an entire area). For example, '&COMPASS here=intersection' would set the compass format for that room to Intersection. '&COMPASS here=intersection show_dark' would set the format to be Intersection, and all exits, dark or not, to be displayed.%r%rA player can override the room's +compass format via '+compass <format>'. The player cannot, however, override the room's show_dark option.%r%rIf you set the room's compass format to "custom", instead of using one of the standard formats, it will look for the attribute CUSTOM_COMPASS, and evaluate that as a user-defined function, with %%0 - %%9 being north, northeast, east, southeast, south, southwest, west, northwest, up, and down. This allows you to define your own compass 'look'.%r%rThis code was originally based on Kynn's Compass 3.0, with Pandora's additional formats.
&HELP_BOOT Help Object=+boot <player>=<minutes>%r+unboot <player>%r+boots%r%rThese wizard-only commands are used to boot and lock players out of the game for a specified amount of time. The first command starts the boot-and-lockout. The second command removes the lockout before it has expired. The third command lists all current lockouts.%r%rConnected wizards will automatically be notified when a disallowed player attempts to connect; a message will be displayed to the disallowed player before he is disconnected. Connected wizards will also be notified of that player's first connect after the lockout period has expired.
&HELP_DOORS Help Object=+lock <door>%r+unlock <door>%r%rThe Doors system is a flexible and customizable system for dealing with doors and other exits which can be locked, barred, and otherwise restricted from access. There is a parent exit, #44, to which door objects should probably be parented, since it contains some useful defaults, but all you have to do in order to declare an exit part of a door is to set it OPAQUE.%r%rBecause of the way MUSH is set up, a "door" really consists of two exits. However, logically, if a door is locked, you shouldn't be able to go through it, no matter which side of the door you're on. The Door code provides a simple way to lock or unlock a door (simultaneously locking or unlocking both MUSH exits). Each exit will need its own set of messages, since, for example, the in-character method of opening a portcullis might vary depending on which side of it you're on.%r%rContinued in '+help Doors2'.
&HELP_DOORS2 Help Object=First, an exit needs a list of the people who can lock it. This is stored in the attribute LOCK_LIST on the exit, and takes the form of an Authorization List (see '+help Authorize' for details). A valid LOCK_LIST might be something like 'org=WIZ org=FCs', which would permit in members of the Wizard and Feature Character orgs.%r%rIf a person isn't in the LOCK_LIST, then when he tries to +lock the door, he will get the contents of the exit's LOCK_FAIL attribute. If he can +lock the door, then he sees the exit's LOCK_MSG; other people in that room see the exit's LOCK_OMSG with the character's name prepended; the LOCK_AMSG attribute is also triggered. Default messages will be used if the exit doesn't have those attributes. Also, if the exit has a LOCK_XMSG, it is shown to those on the other side of the door. The player's dbref is passed as %%0.%r%rContinued in '+help Doors3'.
&HELP_DOORS3 Help Object=Unlocking doors is similar. Instead of using the LOCK_LIST, LOCK_FAIL, LOCK_MSG, LOCK_OMSG, LOCK_AMSG, and LOCK_XMSG attributes, the +unlock command uses the UNLOCK_LIST, UNLOCK_FAIL, UNLOCK_MSG, UNLOCK_OMSG, UNLOCK_AMSG and UNLOCK_XMSG attributes.%r%rAll this can be combined to create fairly complex types of doors, based on how you set your LOCK_LIST and UNLOCK_LIST. Examples follow.%r%rThe simplest type of door is the door which can be unlocked from both the inside and the outside, and requires the same sort of key, in-character. The LOCK_LIST and UNLOCK_LIST will be the same for both sides of the door.%r%rContinued in '+help Doors4'.
&HELP_AUTHORIZE Help Object=There are many times when you're going to want to restrict access to something to a specific group of people. There's a global function which lets you do this.%r%rAuthorized(<list>,<dbref>)%r%rThe list should be a space-separated list which can contain dbrefs, player names, the keyword "any" (allows anyone), an object dbref/attribute pair (which should contain a list of dbrefs), or special Organization parameters.%r%rThe latter take the format 'org=<three-letter org abbreviation' (for "Everyone who is part of that org") or 'org=<three-letter org abbreviation:<key>/<data>' (for "everyone in that org that matches that search parameter"). This last bit lets you get specific, in the same way that the OrgSearch() function does -- for example, if you want to specify only members of the royal family of FooFoo, you might use 'org=FOO:Position/Family'.%r%rThus, a valid list might look like 'org=FOO Jester #3', which would let everyone in organization Foo, Jester, and object #3 perform the action in question.%r%rAuthorization lists might be used by various global systems.
&HELP_EDITOR Help Object=The global editor allows you to edit individual attributes on an object you control, much in the same way as you might edit a +mail message. The commands are as follows:%r%r'+ed begin <object>/<attribute>' -- begins an edit on an attribute. You can only edit one attribute at a time.%r%r'+ed -<text>' -- appends text to your editing buffer. The text is entered unparsed, which means that percent signs, etc. are preserved.%r%r'+ed proof' -- displays the editing buffer.%r%r'+ed edit <old>/<new>' -- replaces <old> text with <new> text. The text is not parsed.%r%r'+ed save' -- quit the editor, saving the new attribute text.%r%r'+ed abort' -- quit the editor, throwing out any changes.
&HELP_DS_OBJECTS Help Object=Any object you control can be used for the descer. All descer +commands operate on the 'default descer', which you set with the command '+ds set descer <object>'.%r%rFor convenience, the descer keeps a list of items which you have designated as using the descer. '+ds add descer <object>' adds an object to your list of descers; '+ds del descer <dbref>' deletes an object from your list of descers. It is not necessary to have an item on the list in order to use it as a descer, but this list is useful for keeping track of them.%r%r'+ds defaults' lists all the descers in your list, together with the number of descer properties on the object, as well as the current default states.%r%rAll other descer commands operate on the default descer object.
&HELP_DS_ITEMS Help Object=Every description is an "item" in a "category". For example, in the category "shirts", one might have items "blue", "green", and "red". Descriptions are sorted by category for convenience; though one could have a gigantic "generic" category and stuff all descriptions under it, this would be much more confusing than breaking down the descriptions by type.%r%rYou don't have to do anything special to create a category or item; it's all automatically done when you store a description. Normally, you store a description with '+ds edit <category>-<item>', which puts you in the global MUSH editor; alternatively, you can also store the attribute directly (see '+help DS Details' for more information).%r%r'+ds list' lists all categories; '+ds list <category>' lists items in that category.%r%rDescriptions can contain nested functions and percent-substitutions. '+ds view <category>-<item>' displays the text of that description, without evaluation. '+ds preview <category>=<item>' displays the text of that description with evaluation.
&HELP_DS_PARAMETERS Help Object=The descer operates on a 'parameter list'. This is a list of selections of items from various categories, which, when put together, make a complete description. A parameter list might be something like 'shirt=blue pants=jeans shoes=sneakers'. 'shirt=blue' means the "blue" item from the "shirt" category, and so forth; the example parameter list concatenates the three shorter descs to make one long desc.%r%rIf there is no '=' sign in an element of a parameter list, that element is treated like a 'state'. A 'state' is a special sort of description category which only stores parameter lists. For example, one might have a parameter list 'normal hat=baseball', which would evaluate to the contents of the 'normal' state (perhaps, 'shirt=blue pants=jeans') plus the 'baseball' hat description. States are set like normal descriptions are set.%r%r'+ds preview <parameter list>' gives you a preview of what a description using those parameters would look like.%r%r'+ds set state <state>' sets the "default" state for that descer object.
&HELP_DS_DETAILS Help Object=One can bypass the descer commands by simply setting attributes on an object. The descer properties used are as follows:%r%rDS_DEFAULT: the default state.%r%rDS_<category>+<item>: description of an item in a category.%r%rStates are stored just like other categories, i.e., DS_STATE+<state name>; the only difference is that they don't contain description text, just parameter lists.
&HELP_DS_FUNCTIONS Help Object=A single global function is used to retrieve descriptions. It is as follows:%r%rdescer(<object>\[,<parameter list>\])%r%r<object> is a descer object. <parameter list> is a list of parameters; if it's not specified, then the default state (from '+ds set state <state>') is assumed.%r%rFor example, one might describe an object which uses the global descer with '@desc object=\[descer(#300)\]' or '@desc object=\[descer(#300,normal)\]' or '@desc object=\[descer(#300,shirt=white pants=shorts shoes=sandals)\]'.%r%rThere's a command shortcut for this: '+ds wear <parameter>' will set your personal @desc to the appropriate parameter list, using your default descer.%r%rYou can do various things to change the formatting of your description.%r'@desc me=\[space(8)\]\[descer(#300,top)\]\%r\[space(8)\]\[descer(#300,bottom)\]', for example, would break a description down into two paragraphs. You can also directly embed spacing into your descriptions by defining parameters like 'spacing-newline' or 'spacing-indent' which evaluate to '%%r' or '\[space(8)\]' respectively, for example.
&HELP_DS_BASICS Help Object=If all you need is to be able to switch around a few descriptions, you may not need the full power of this descer. Instead, you can set up and use your descer with the following simple commands:%r%r1. First, you need an object (you might need to '@create Descer').%r2. Next, '+ds set descer <dbref>' (<dbref> is the number of your object).%r3. @desc yourself with '@desc me=<whatever you look like>'.%r4. Save your desc with '+ds save <desc name>'.%r5. Repeat steps 3 and 4 for whatever descs you want.%r6. You can list your saved descs with '+ds list saved'.%r7. You can look a saved desc with '+ds view saved-<desc name>'.%r8. You can delete a saved desc with '+ds delete <desc name>'.%r9. To restore a saved desc, use '+ds restore <list of desc names>'.%r%rFor more details on these shortcut commands, see '+help DS Shortcuts'.
&HELP_DS_SHORTCUTS Help Object=+ds save <desc name>%r+ds delete <desc name>%r+ds restore <list of desc names>%r%rThe first command saves the current evaluation of your description (i.e., what people see when they 'look' at you), under <desc name>, which must be a single word.%r%rThe second command deletes an already-stored description.%r%rThe third command sets your desc to the appropriate stored description(s). You can use a list. For example, you could type, '@desc me=His tunic is white and spotless.'; '+ds save white_tunic'; '@desc me=His pants are a dark brown.'; '+ds save brown_pants'; '@desc me=The boots on his feet are plain and scuffed.'; then '+ds save plain_boots'. You could then put these together using '+ds restore white_tunic brown_pants plain_boots'.%r%r(For reference purposes, these commands simply shortcuts which operate on items in a 'Saved' category on the default descer. Items manipulated in this simplified fashion can also be manipulated by the usual descer commands.)
&HELP_DESCER Help Object=[mudname()] provides a simple, yet powerful and flexible, global descer. This can be used to keep track of multiple descriptions on any arbitrary object. All descer commands begin with the prefix '+ds', to distinguish them from other MUSH global commands. Please see the following help topics for more details. Those interested in only a basic level of descer operation should read only the first two help topics; those who want advanced features should skip the basics/shortcuts entirely and read on.%r%r[edit(u(#10/FMT_4COL_FN,DS_Basics DS_Shortcuts DS_Objects DS_Items DS_Parameters DS_Functions DS_Details),_,%b)]%r%rPlease note: Descriptions can take up a lot of database space. Please do not create gigantic wardrobes on the MUSH; if you "must" write yourself a lot of clothing descriptions, please store them off-line.%r%rDo NOT write your own descer code; this is a further drain on our limited database space. If there is a feature you need that is not part of this descer, please discuss it with a wizard.
&HELP_ORG_INTRO Help Object=The Organization System is highly configurable. A player can belong to any number of orgs. All org administration commands start with the prefix '+org/<org>'.%r%rFirst, some useful definitions:%r%rA "key" is some sort of named data. Keys come in many types, and can be named arbitrary things. Typical keys are "Rank" and "Posting".%r%r"Data" is normally something associated with a key. Typical data for the key "Rank" might be "Apprentice", "Journeyman", "Lord", etc. Some data comes in the form of a "list" -- a space-separated list of words, such as "red orange yellow green blue".%r%rA "roster template" (or just plain "template") is a list of formattting instructions for the output of the '+rwho' or '+roster' commands. There can be any number of these defined. These can be used to display key data, as well as other things such as the amount of time someone has been connected.
&HELP_ORG_KEYS Help Object=All data on orgs is kept in the format of key-data pairs. Every key has a "rule", which specifies what kind of data can be stored in that key.%r'+org/<org> keys' lists keys for a specific org. Possible rules are:%r%rPLAYER -- Only a player can be stored in this field.%rDBREF -- Only a valid dbref can be stored in this field.%rNUM -- Only an integer can be stored in this field.%rTEXT-<length> -- Only text of a certain maximum length can be stored in this field.%rLIST-<list name> -- Only words which are in the named list can be stored in this field.%r%rThree commands are used to manipulate keys and rules.%r'+org/<org> add key <key>=<rule>' adds a new <key> with <rule>.%r'+org/<org> del key <key>' deletes a key and its associated data.%r'+org/<org> fix key <key>=<rule>' changes the rule for an existing key.
&HELP_ORGADMIN Help Object=Organization Administration%r%r[edit(u(#10/FMT_4COL_FN,Org_Intro Org_Keys Org_Lists Org_Data Org_Template Org_Macros Org_Misc Org_Functions),_,%b)]%r%rThe order of the +help topics above is the order for suggested reading.%r%rA summary of the commands can be found in '+help Organizations'.
&HELP_ORG_LISTS Help Object=Org lists provide ways of controlling what type of data can be put into a key field. The command '+org/<org> lists' will list all lists that have been defined for a particular org.%r%rLists are normally used with the LIST-<name> type for keys. Typical lists might include COLOR, "red orange yellow green blue", or RANK, "apprentice journeyman master".%r%rThree commands operate on lists.%r%r'+org/<org> add list <list name>=<list data>' defines a new list.%r'+org/<org> del list <list name>' deletes a list.%r'+org/<org> edit list <list name>=<old>/<new>' edits an existing list.%r%r'+org/<org> show list <list name>' shows you that list.
&HELP_ORG_DATA Help Object=The following commands modify data for the orgs.%r%r'+org/<org> new <player name>' will add that player to the org.%r%r'+org/<org> delete <player name>' will remove that player from the org.%r%r'+org/<org> mod <player>/<key>=<data>' modifies data for a specific player. <key> must already be defined, and <data> must fit the rule for that key. This either adds the key data for the player or replaces the existing data for that key and player.%r%r'+org/<org> edit <player>/<key>=<old>/<new>' edits the existing data for a key and player.
&HELP_ORG_TEMPLATE Help Object=Org roster templates specify the format of the output from the +roster and +rwho commands. The standard template, which is the first one you should define, is the DEFAULT template, used by +rwho. Templates take the form of a list of <field>:<length> pairs. The data for <field> is left-justified within <length> characters. <field> is either a defined key, or one of several special fields. These fields are:%r%r_CONN %b -- (1) Prints a '*' if the player is connected.%r_IDLE %b -- (4) Prints a connected player's idle time.%r_LAST %b -- (4) Prints the amount of time since a player last logged in.%r_LOC %b %b-- (30) Prints the name of the player's location, if findable.%r_ONFOR%b -- (5) Prints a connected player's time connected.%r_NAME %b -- (16) Prints a player's name.%r_QUIET%b -- (1) Prints a '-' if the player is not connected or is Quiet.%r_SEX %b %b-- (3) Prints 'M', 'F', or '-', depending on the player's sex.%r_STATUS -- (5) Prints the contents of the player's <org>_STATUS attribute.%r%rSee '+help org template2' for more.
&HELP_ORG_TEMPLATE2 Help Object=The template-related commands are:%r%r'+org/<org> templates' -- lists all existing templates.%r'+org/<org> add template <template>=<format>' -- adds a new template.%r'+org/<org> del template <template>' -- deletes a template.%r'+org/<org> edit template <template>=<old>/<new>' -- edits a template.%r'+org/<org> show template <template>' -- shows you that template.%r%rA typical template would be:%r_CONN:3 _NAME:18 _ONFOR:8 _IDLE:6 _QUIET:3 RANK:10 _STATUS:20%rwhich would print a player's connect status ('*' or blank) in a field 3 characters wide, name (18 wide), connect time (8 wide), idle time (etc.), quiet status, data from the key field Rank, and contents of the player's <org>_STATUS attribute.
&HELP_ORG_MISC Help Object=To add a player to an org, use '+org/<org> new <player name>'.%rTo remove a player from an org, use '+org/<org> delete <player name>'.%r%rTo change the chat-prefix for an org, use '+org/<org> prefix <new prefix>'.%r%rTo enable or disable the chat system for an org, use '+org/<org> hush <on | off>'.%r%rTo toggle whether or not organization membership is private, use '+org/<org> private <on | off>'.%r%rTo see a list of admins for an org, use '+org/<org> admins.%r%rTo give someone admin status for an org, use '+org/<org> add admin <player>'.%rTo remove someone's admin status on an org, use '+org/<org> del admin <player>'.%r%rTo display assorted information about an org, use '+org/<org> status'.%r%rWizards can create a new organization using:%r'+org/<org> create <email> for <use>=<names of initial org admins>'.
&HELP_ORG_FUNCTIONS Help Object=Several globally-defined @functions, which can be used like normal MUSH built-in functions, allow you to access org data in your normal MUSHcode. They are as follows:%r%rOrgWho(<org>)%r[space(8)]This function takes a single argument, a three-letter org code. It returns an unsorted list of dbrefs of all players who are part of that org. If the org does not exist, "#-1 NO MATCH" is returned.%r%rOrgAdmin(<org>, <player dbref>)%r[space(8)]This function checks to see if <player dbref> is an admin on that org, returning 1 if the player is an admin, or 0 if not.%r%rSee '+help Org Functions2' for more.
&HELP_ORG_MACROS Help Object=Org macros provide an easy way to macro searches for specific templates, keys, and data fields. They work with the '+rwho' and '+roster' commands. A macro is an alias for a template, a key, and a data field, as would normally be provided to the '+roster' command; macros will also work for '+rwho', but only macros using the 'default' template will be permitted.%r%r'+macros/<org>' lists available macros for an org.%r%r'+org/<org> add macro <macro> for <template>=<key>/<data>' adds a macro. For example, to add a macro which searches the default template for 'Rider' in the 'Position' key, you might use, "+org/hrw add macro Riders for Default=Position/Rider". Macros should be a single word long and contain no special characters.%r%r'+org/<org> del macro <macro>' will delete an existing macro.
&HELP_ORGS2 Help Object=Certain commands are only available to the member of a specific org.%r%rThe command '+roster/<org> <roster type>\[=<key>/<data>\]' lists a player roster, formatted by some specified roster type (to get a list of these, use '+rosters/<org>'. If no key-data pair is provided, it will provide the roster for connected players. Otherwise, it will search for for <key> fields equal to <data>. <data> can contain wildcards. In lieu of a <roster type>=<key>/<data> specification, you can specify a macro, with '+roster/<org> <macro>'. This will display the appropriate roster and search pattern, as defined by that macro. '+rinfo/<org> <player>/<key>' will display the value of a certain key field for a specific player in the org.%r%r'+chat <org>=<message>' will send a message to all non-quiet players in that org. The tokens ':', ';' and '| are accepted (the '|' symbol is used for an 'emit').%r%r'+quiet/<org> \[on|off\]' changes your 'quiet' status for an org. If you are 'quiet' for an org, you will not hear chat messages from it.%r%rSee '+help orgadmin' for the gory details about orgs.
&HELP_ORG_FUNCTIONS2 Help Object=More organization-related global functions:%r%rOrgKeys(<org>, <player dbref>)%r[space(8)]This function takes two arguments. The first is a three-letter org code. The second is a player dbref. The owner of the item which is attempting to call this function must be part of the org that they are trying to get information from; "#-1 NO MATCH" is returned if this is not true, or if the org does not exist. If <player dbref> is not part of that org, an empty string is returned. Otherwise, the list of key-field pairs for that player's particular org is returned.%r%rOrgInfo(<org>, <player dbref>, <key>)%r[space(8)]This function takes three arguments. The first is a three-letter org code. The second is a player dbref. The third is a key. The same permissions for OrgKeys() apply. If there is no error, then the value of <key> for <player> or <org> is returned.%r%rOrgSearch(<org>, <key>/<data>)%r[space(8)]This function takes two arguments. The first is a three-letter org code. The second is a <key>/<data> pair to search for. The function returns the list of player dbrefs which match the search criterion, or, if the function's inputs are invalid, "#-1 NO MATCH".
&HELP_ORGS Help Object=This system is a global mechanism for keeping track of organizations (henceforth abbreviated "orgs"). It provides data storage and retrieval, as well as chat systems, thus removing the necessity for players to have physical 'badges' present in their inventories. Players can belong to more than one organization. All orgs are designated by three-letter acronyms. The command '+orgs' will list all those acronyms. The command '+rwho' by itself prints a list of connected players, sorted by org; '+rwho/stats' prints a bargraph list of connections by org.%r%rThe command '+rwho <org>\[=<key>/<data>\]' will list a roster of players who are part of that org. If no key-data pair is provided, it will provide the appropriate roster of connected players. Otherwise, it will search for all players in that org who have <key> field equal to <data>. <data> can contain wildcards. A 'macro' can be specified in lieu of the <key>/<data> pair; a 'macro' is simply a pre-defined alias for one such pair. The '+macros/<org>' command lists available macros for an org. Some macros are only usable by the member of an org; if you try to use one without being a member, you'll simply get the standard output of '+rwho <org>'.%r%rThe command '+rwho/all <org>' will list a roster of all players in that org, connected or not. It is faster than the equivalent command '+rwho <org>=*/*'.%r%rPlease see '+help orgs2' for more.
&HELP_ORGANIZATIONS Help Object=This is a complete list of commands for Organizations. If you are looking for basic player organization information, please see '+help Orgs'. If you are looking for organization administration information, please see '+help OrgAdmin'.%r%rBasic organization commands:%r%r+orgs%r+chat <org>=<message> (equivalent to '=<org> <message>')%r+quiet/<org> [on|off]%r%rCommands for listing members of organizations:%r%r+rosters/<org>%r+roster/<org> <roster type>[=<key>/<data> | <macro>]%r+rwho [<org>][=<key/data> | <macro>]%r+rwho/all <org>%r+rwho/stats%r%rContinued in '+help Org Commands2'.
&HELP_ORG_COMMANDS2 Help Object=Commands dealing with macros:%r%r+macros/<org>%r+org/<org> add macro <macro> for <template>=<key>/<data>%r+org/<org> del macro <macro>%r%rBasic data-modification commands:%r%r+org/<org> create <email> for <use>=<names of initial org admins>%r+org/<org> new <player>%r+org/<org> delete <player>%r+org/<org> mod <player>/<key>=<data>%r+org/<org> edit <player>/<key>=<old>/<new>%r+org/<org> admins%r+org/<org> add admin <player>%r+org/<org> del admin <player>%r+org/<org> prefix <new prefix>%r+org/<org> hush <on | off>%r+org/<org> private <on | off>%r+org/<org> status%r%rContinued in '+help Org Commands3'.
&HELP_ORG_COMMANDS3 Help Object=Commands dealing with keys:%r%r+org/<org> keys%r+org/<org> add key <key>=<rule>%r+org/<org> del key <key>%r+org/<org> fix key <key>=<rule>%r%rCommands dealing with lists:%r%r+org/<org> lists%r+org/<org> add list <list name>=<list data>%r+org/<org> del list <list name>%r+org/<org> edit list <list name>=<old>/<new>%r+org/<org> show list <list name>%r%rCommands dealing with templates:%r+org/<org> templates%r+org/<org> add template <template>=<format>%r+org/<org> del template <template>%r+org/<org> edit template <template>=<old>/<new>%r+org/<org> show template <template>
&HELP_WATCHES Help Object=The Watches System allows [mudname()] players to view the action in many of the popular public locations, without needing to be physically present. It also provides OOC transportation to those locations.%r%rThe '+watchlist' command lists all locations on the game accessible via the Watches System. These are aliases, used for <place> in the commands listed above. %r%rThe '+watching \[<place>\]' command lists either who is watching in your present location if no argument is given, or who is watching in <place>, and the '+watches' command lists the places you are watching.%r%rThe commands '+watch on <place>' and '+watch off <place>' turn your watching of a specific place on and off. If you are watching a place, you will be notified of everything which happens there, prefixed with something like, "OOC Room>", just as if you had a puppet there. Please try to use watchlists instead of puppets to watch locations.%r%rSee '+help watches2' for more information.
&HELP_WATCHES2 Help Object=%r'+watchlook <place>\[/<object>\]' allows you to look at either <place>'s description, or the description of <object> in <place>.%r%rThe command '+go <place>' transports you, via OOC teleport, to a location. (See +help go)%r%rWizards can use the command '+watch add place <place>/<dbref>=<prefix>' to add a new location, with alias <place>, room <dbref>, and watchprefix <prefix>. The command '+watch del place <place>' removes a location from the system.%r%rSome blocks can be set up to +watch'ing or +go'ing to a place. If a WATCH_LIST or GO_LIST, respectively, exists on the room, an Authorization check will be performed. This allows one to set up places that can only be +watch'd by certain people but which anyone can +go to, for example.
&HELP_GO Help Object=+go <place>%r%r+go is a global transportation system, which will teleport you to <place>. For a list of available places, type '+watchlist'.%r%r+go triggers the room's GO, OGO, and AGO messages, which are similar to the DROP, ODROP, and ADROP attributes on exits (see 'help @drop', etc.). When you +go somewhere, you will see the contents of that room's GO attribute. Everyone else in the room will see the contents of the OGO, prefixed by your name. The room then runs the AGO attribute, if it has one. This can be used to give the illusion of In-Character transportation. For example:%r%r&GO here=You arrive at the city gates via an OOC method of transportation.%r&OGO here=arrives at the city gates via an OOC method of transportation.%r&AGO here=@pemit *City_Builder=%%N just arrived via +go.
&HELP_MAIL_REVIEWING2 Help Object=Reviewing Mail (Page 2/2)%r--------- ---- ----------%r%r[ljust(+retract letter <number>,27)] Retracts a letter that has not yet been read by%r[space(28)]any of its recipients, or which is older than%r[space(28)]the Expiration time (given by '+mail defaults'),%r[space(28)]removing it from the mail of all its recipients.%r%r[ljust(+resend letter <num>=<list>,27)] Sends a letter specified by <num> from the list%r[space(28)]of letters you've already sent to a <list> of%r[space(28)]addresses. This simply resends the message,%r[space(28)]as if you had carbon-copied it. It does not%r[space(28)]invoke the editor, and saves db space.
&HELP_MAIL_QUOTAS Help Object=Mail Quotas%r---- ------%r%rOne option provided by this +mail system is the ability to turn quotas on. If a player has more saved messages in his mailbox than the quotas permit, he will not be able to send new +mail until he is below the +mail quota. He will also be given a large annoying message when he connects, warning him that he is over the +mail quota.%r%rIn general, the MUSH database should not be used to store large amount of +mail; the +dumpmail command is provided for the archival of messages that one needs to keep. This method of enforcement prevents players from sending mail, rather than receiving it, because having mail messages fail because of a quota tends to be more of an annoyance to the sender than to the recipient; it is intended to provide a strong prod to clean up one's +mail, rather than absolutely prevent large mailboxes.%r%rThe command '+set mail quota <player>=<unread>/<read>' permits a wizard to change the amount of +mail quota that a player has available.%r%rThe defaults for quotas are given by '+mail defaults'; personal quotas are given by '+mail status'.
&HELP_MAIL_READING2 Help Object=Reading Your Mail (Page 2/3)%r------- ---- ---- ----------%r%r[ljust(+skim \[<range>\],16)] If you don't specify a range, this command lists the message%r[space(17)]headers (with sender, subject, size, and time) for all your%r[space(17)]messages. '+' indicates the current message, 'U' indicates an%r[space(17)]unread message, 'D' indicates a message marked for deletion,%r[space(17)]and 'M' indicates a message marked via '+mark'. If a range is%r[space(17)]specified, only the message headers for that range of messages%r[space(17)]are reported.%r%r[ljust(+read <range>,16)] This command displays the message headers and text for the%r[space(17)]specified range of messages.%r%rContinued in '+help Mail Reading3'.
&HELP_BBOARD Help Object=There are a number of global bulletin boards on [mudname()].%r%r+bblist\[/l\]%r[space(5)]This lists all the available bulletin boards. If you specify the /l switch, it'll also display their purposes, the date of the most recent message, how many new/total messages there are,and, if you're a Wizard, the dbref of the message storage object.%r%r+bb <bulletin board>%r[space(5)]Changes your default bulletin board. If you don't specify a board for the other commands, this one is automatically assumed. If you do not set this, the default is 'global'.%r%r+bbpost\[/<board>\] <subject>=<message>%r[space(5)]Posts a new note with <subject> and text <message>.%r%r+bbdel\[/<board>\] <message list>%r[space(5)]Removes messages. You must be the author of the note, or a Wizard.%r%rContinued in '+help bboard2'.
&HELP_BBOARD2 Help Object=+bbscan\[/<board>\] \[<message list>\]%r[space(5)]Scans the bulletin board headers. If you don't specify a message list, scans all messages.%r%r+bbread\[/<board>\] <message list>%r[space(5)]Like '+bbscan', but reads entire messages, not just their headers. It also keeps track of the most recently-posted message you've read on each board.%r%r+bbcreate/<board name> <purpose>%r[space(5)]Allows a Wizard to create a new bulletin board.%r%rA message list is one or more of the following:%r%rA number, or range of numbers, such as '5', or '7-11'.%r%r'from:' plus a number to start from, such as 'from:10' (message #10, on).%r%r'last:' plus a number of messages, such as 'last:5' (the 5 most recent messages).%r%rContinued in '+help bboard3'.
&HELP_BBOARD3 Help Object='author:' plus a player's name, such as 'author:Deirdre' (all messages posted by Deirdre).%r%r'subject:' plus a string to search for in the Subject of the message, such as 'subject:where' (which would match, "Where are the merchants?", "Sailors are everywhere!" and so forth).%r%r'text:' plus a string to search for in the message text itself, such as 'text:war' (which would match, "The war effort is underway!" and "Beware of dog", etc.)%r%r'time:' plus Nd, Nh, or Nm, where N is the number of days/hours/minutes of most recent messages.%r%r'all' indicates all messages.%r%r'new' indicates new messages. 'New' is defined as, "posted after the latest message that you have read", NOT, "messages you haven't read".%r%rThus, a valid message list could be '18-22 author:Caladan last:5'.%r%rContinued in '+help bboard4'.
&HELP_BBOARD4 Help Object=You can use '+bbcheck' to quickly check what boards have new messages. For your convenience, this is only done for boards that you have previously read.%r%rYou can use '+bbclear', a "catchup command", to advance your "read messages up to this point" marker without actually having you read the messages.%r%rAll boards can be locked to a specific group of players using Authorization lists. Permission to read is READ_LIST, permission to post is POST_LIST, and permission to delete messages you do not own is ADMIN_LIST. Wizards can automatically read, post, and delete from all bulletin boards. These locks must be set by a Wizard (by setting the attribute on the board's data object).%r%rOn a '+bblist/l', boards that you cannot read or post to are marked with '*'. Boards that you can read but cannot post to are marked with '-'. Boards that you can post to but cannot read are marked with '+'.
&HELP_MUTTER3 Help Object=This enables you to cover a situation like the following: You're seated with some other people at Place #3 (the square mirrored table) in the bar. Corwin is standing by the table, not actually seated, but listening to the conversation. Meanwhile, Gerard, at the next table, is straining to hear the conversation, but trying not to let anyone else notice it. You want all of them to be able to hear the mutter, but the rest of the room shouldn't notice that Gerard is listening. So you do: '+mutter 3 Corwin/Gerard=There's a new secret knock today.'%r%rThe rest of the room will see something like, 'Deirdre mutters to Corwin and the square mirrored table, "... secret ..."'; you'll be told everyone you muttered to, and Corwin, Gerard, and the folks at place #3 will see the full text of the message (plus a list of the public targets -- i.e., Corwin and their place, but not Gerard).
&HELP_DECOMPILE Help Object=+decompile <object>\[/<attribute pattern>\]%r%rThis runs an incremental decompile on an object, in a format similar to @decompile. While the built-in @decompile command can sometimes overflow the output buffer, resulting in lost output, this command will not. It is, however, more computationally expensive; please only use this when your object exceeds 16 K in size. It also ONLY decompile attributes, not locks or flags. You must control the object.%r%rTo log a decompilation of an object in TinyFugue, type the following:%r%r[space(8)]/set wraplog 0%r[space(8)]/log object%r[space(8)]+decompile object%r[space(8)]/nolog
&HELP_SHOUT Help Object=+shout <message>%r%rThis shouts a message. Everyone in the rooms connected to your current location will hear the shout, identified as coming from either a male or female, together with the direction of shout.%r%rIf you have a VOICE attribute set, this will be used instead of identifying the shout as coming from, "a man" or "a woman". For example, if you have a VOICE attribute of, "a shrill soprano", the shout will come from, "a shrill soprano" instead of from, "a woman".
&HELP_DOORS4 Help Object=A more common type of door is one which can only be locked and unlocked from a single side. For example, one might have a door which is barricaded by simply putting an oaken bar across it. For such a door, anyone could put down the beam and anyone could lift it; thus, that side of the door would have a LOCK_LIST and UNLOCK_LIST of 'any'. The opposite side would not have either a LOCK_LIST or UNLOCK_LIST, since it can't be locked or unlocked from that side.%r%rAnother common type of door is one that can be locked by anyone on the inside, but must be unlocked by a key, from the outside. Such a door will have, on the inside, a LOCK_LIST and UNLOCK_LIST of 'any', and, on the outside, a LOCK_LIST and UNLOCK_LIST corresponding to the list of people who have keys to that door.
&HELP_MAIL_READING3 Help Object=Reading Your Mail (Page 3/3)%r------- ---- ---- ----------%r%r[ljust(+dumpmail <range>,19)] This command outputs +mail messages in a format%r[space(20)]compatible with UNIX mailers. This enables you to log%r[space(20)]your mailbox using your favorite MUD client, and%r[space(20)]then read it using a standard UNIX mail program.%r%rBecause TinyFugue eats blank lines, the markers 'EOH' and 'EOM' are used. This requires minor editing of the resultant file. The procedure to log mail is the following:%r%r1. In TinyFugue: /log mudmail.tmp%r2. Issue the appropriate +dumpmail command to the MUSH.%r3. In TinyFugue: /nolog%r4. In UNIX: sed -e 's/EOM//' mudmail.tmp | sed -e 's/EOH//' > mudmail%r5. In UNIX: rm mudmail.tmp%r6. To read it, in UNIX: mail -f mudmail%r%rYou can, in that last step, substitute elm, pine, etc. for the 'mail' command.%r%rSee also: Mail Ranges
&HELP_SIZEALL Help Object=+sizeall \[<player>\]%r%rThis calculates the size of the items you own, in bytes, broken down by object type. One kilobyte (K) is equal to 1024 bytes.%r%rOnly wizards can check the sizes of other players.%r%rUse of this command costs the same as a @search.
&HELP_PLACES_COMMANDS Help Object=%b%bCommands:%r%b%b---------%r%b%b[ljust(Mv from <#> to <#>,28)]Moves a vacancy from one place to another.%r%b%b[ljust(Join <place name>,28)]Puts you at <place name>%r%b%b[ljust(Join at #<num>,28)]Puts you at place #<num>.%r%b%b[ljust(Join with <name>,28)]Puts you at the place with <name>.%r%b%b[ljust(Depart,28)]Removes you from your place.%r%b%b[ljust(Places,28)]Lists who's present at all places.%r%b%b[ljust(Place <num>,28)]Lists who's present at place <num>.%r%b%b[ljust(Plook,28)]Lists in column format everyone around the room.%r%b%b[ljust(Places/brief\, Plook/brief,28)]Lists only occupied places.%r%b%b[ljust(tt <message>,28)](Tete a tete) Relays a message%r[space(30)]to all those at your place. This command takes%r[space(30)]the usual say/pose tokens, and TT |<message>%r[space(30)]will emit.
&HELP_PLACES_FUNCTIONS Help Object=%rWHICHPLACE(<room dbref>,<object dbref>)%r[space(8)]Given the dbref of the room that an object is in, returns the number of the place that object is at.%r%rATPLACE(<room dbref>,<place number>)%r[space(8)]Returns a list of the dbrefs of objects currently at one of the places in a room.%r%rPLACEINFO(<room dbref>,<place number>,<option>%r[space(8)]Returns the text associated with a given option for a place in a room.
&HELP_COMPASS_FORMATS Help Object=The possible basic compass formats are:%r%r[space(5)][ljust(Amberyl \(standard\),25)] Compass rose.%r[space(5)][ljust(Kynn,25)] Smaller compass rose.%r[space(5)][ljust(Mini,25)] Miniature compass rose.%r[space(5)][ljust(Custom,25)] Custom format.%r%rThere are also "street"-look compass formats ('+help compass street') and "room"-look compass formats ('+help compass room').
&HELP_COMPASS_STREET Help Object="Street"-look compass formats:%r%r[space(5)][ljust(NSstreet,25)] North-South street.%r[space(5)][ljust(EWstreet,25)] East-West street.%r[space(5)][ljust(Intersection,25)] Intersection of streets.%r[space(5)][ljust(NESstreet,25)] North-South East T-junction.%r[space(5)][ljust(SWNstreet,25)] North-South West T-junction.%r[space(5)][ljust(WNEstreet,25)] East-West North T-junction.%r[space(5)][ljust(ESWstreet,25)] East-West South T-junction.%r[space(5)][ljust(NDeadend,25)] North-South dead-ends north.%r[space(5)][ljust(SDeadend,25)] North-South dead-ends south.%r[space(5)][ljust(EDeadend,25)] East-West dead-ends east.%r[space(5)][ljust(WDeadend,25)] East-West dead-ends west.
&HELP_COMPASS_ROOM Help Object="Room"-look compass formats:%r%r[space(5)][ljust(Circular,25)] Circular room format.%r[space(5)][ljust(1NDoor,25)] Room, one door to the north.%r[space(5)][ljust(1SDoor,25)] Room, one door to the south.%r[space(5)][ljust(1EDoor,25)] Room, one door to the east.%r[space(5)][ljust(1WDoor,25)] Room, one door to the west.%r[space(5)][ljust(2NEDoor,25)] Room, doors to north and east.%r[space(5)][ljust(2NSDoor,25)] Room, doors to north and south.%r[space(5)][ljust(2NWDoor,25)] Room, doors to north and west.%r[space(5)][ljust(2ESDoor,25)] Room, doors to east and south.%r[space(5)][ljust(2EWDoor,25)] Room, doors to east and west.%r[space(5)][ljust(2SWDoor,25)] Room, doors to south and west.%r[space(5)][ljust(3NESDoor,25)] Room, doors to north, east, south.%r[space(5)][ljust(3NSWDoor,25)] Room, doors to north, south, west.%r[space(5)][ljust(3ESWDoor,25)] Room, doors to east, south, west.%r[space(5)][ljust(3NEWDoor,25)] Room, doors to north, east, west.%r[space(5)][ljust(4Door,25)] Room, four doors.
&HELP_SPELL Help Object=+spell <words>%r+spell <object>/<attribute pattern>%r%rIf Webster is supported, these commands use the on-line Webster robot to check the spelling of words, or the spelling of words in a set of attributes on an object.
&HELP_REQUEST Help Object=+request <name>=<email address>%r%rIn order to obtain a character, you may be required to register with a valid email address. Use this command to request a character. The password will be sent to the email address you specify. This occurs automatically. Generally, if you receive email quickly, you should get a response within five minutes; if you don't receive the password within two days, there has been a problem and you should contact a staff member to get it resolved.
&HELP_FIELDS Help Object=The fields usable by the +who and +finger commands are listed below. In most cases, the field length is the width the field will be padded/truncated to. A field length of 0 means do not truncate, do not pad.%r%rSPACE: %b %b Blank spaces.%rHBAR:%b %b %b Horizontal line of a certain length.%rVBAR:%b %b %b Vertical bar in the center of a field of a certain length.%rNAME:%b %b %b Name of the player%rALIAS: %b %b @alias of the player%rONFOR: %b %b Amount of time connected%rIDLE:%b %b %b Amount of time idle%rLAST:%b %b %b Connect time (if connected) or disconnect time (if disconnected).%rSITE:%b %b %b Site last connected from (if player can examine target).%rLOC: %b %b %b Location, if you can locate them.%rSEX: %b %b %b Gender (M or F)%rMAIL:%b %b %b Unread mail?%rORGS:%b %b %b Name of any (public) Orgs the player belongs to.%rIC:%b %b %b %b Yes if the player is IC, No if the player is not.%r%rContinued in '+help Fields2'.
&HELP_FIELDS2 Help Object=DBREF: %b %b Dbref of the player.%rFLAGS: %b %b Flags of the player.%rTRUENAME:%b The TN attribute, if it's set; otherwise, the player's name.%rFULLNAME:%b The FULLNAME attribute, if it's set.%rEMAIL: %b %b The EMAIL attribute, if it's set.%rURL: %b %b %b The URL attribute, if it's set.%rPOS: %b %b %b The POS attribute, if it's set.%rQUOTE: %b %b The QUOTE attribute, if it's set. (No length limit enforced.)
&HELP_ZOOM Help Object=The "zoom", or "shortcut" code, enables players in the same general area to find one another very rapidly. The commands are as follows:%r%r'%xc+zoom%xn': List all the shortcuts in this area. Shortcuts show the "gathering areas" that the area builder has designated; these are places which are expected to be natural gathering-points for roleplay.%r%r'%xc+zoom/list <person | shortcut | place>%xn': Lists the exits you must take to get from your current location, to a location of another character, to the room associated with a shortcut name, or to the room itself (performs a search trying to match the name you give with the name of a room in the area). This finds the shortest paths to that destination. Only paths that do not contain exits which are @lock'd against you will be shown. Please note that if the short path has a @lock'd exit, any longer paths will not be shown.%r%r'%xc+zoom <person | shortcut | place>%xn': Takes you to that location, following the shortest available path. If there are any other characters in the rooms between you and your destination, you will be stopped in the first room that contains other connected characters.%r%rContinued in '+help Zoom2'.
&HELP_ZOOM2 Help Object=The search for 'a room in the area' first checks all rooms owned by the same Builder as the room you are currently in. If that fails, it checks all rooms which have the same parent room as the room you are currently in, if the parent room is an area-specific parent room.%r%rBuilders can set shortcuts in their area by setting the SHORTCUTS attribute on their parent room. It takes the format:%r%r<name of shortcut>:<dbref of room>|<name 2>:<dbref 2>|<etc.>:<etc.>%r%ri.e.: Front Gardens:#290|Back Gardens:#324|Side Gate:#330
&HELP_ROOM Help Object='%xc+room%xn': Obtain a meta-room, if your current location is configured for it. The owner of your present location must have enough quota to own another room. You can enter the room, once it's been created, simply by typing its name.%r%r'%xc+room/test%xn': Obtain the name and description of a potential meta-room, without actually creating that room, if your current location is configured for it.%r%rSee '+help Meta-Rooms' for more details.
&HELP_META-ROOMS Help Object="Meta-Rooms" are a useful way to conserve database space by only creating rooms when they are needed; they are useful for areas which rarely receive play, or enormous, sprawling areas that should technically contain hundreds of rooms but which, naturally, would be unwieldly to build and rolepla in. An example of the former would be a rarely-used Shadow; an example of the latter would be the royal palace of Amber, where a maze of corridors opens into endless sitting rooms, drawing rooms, dining rooms, and guest rooms.%r%rA meta-room is essentially a room created on-the-fly, with a name and a description and appropriate exits; it self-destructs once there are no connected players within it (non-connected players/objects will be pushed outside the room before it self-destructs). Otherwise, the room behaves just like any other room.%r%rRooms that have meta-rooms "attached" to them have '\[meta-rooms\]' noted in their description. If you're in such a room, typing '%xc+room%xn' will create a meta-room; then, you (or anyone else in your location) can just type the name of the room to walk into it. There is a maximum of five currently-existing meta-rooms per room.%r%rSee '+help Meta2' for info on building meta-rooms.
&HELP_META2 Help Object=A location is considered to have meta-rooms if there's a META_OBJ attribute set on it (or inherited from its parent object). This attribute contains a dbref (i.e., '&META_OBJ here=#313'); the owner of the location must have permission to read attributes off that object. We'll refer to this object as the meta-object.%r%rA meta-room has a name and a description (or, more precisely, the STD attribute), as well as "properties" (random words or phrases that can be inserted in the name or desc). These are grouped together with a short alias, and represented by the MNAME_<alias>, MDESC_<alias>, and MPROP_<alias> attributes on the meta-object. For example, a sitting room might have its name in MNAME_SROOM, its desc in MDESC_SROOM, and its properties in MPROP_SROOM.%r%rContinued in '+help Meta3'.
&HELP_META3 Help Object=In its most straightforward configuration, when someone uses the '+room' command to generate a meta-room, a random <alias> is chosen from all the MNAME_<alias> attributes on the meta-object. The room name becomes the contents of MNAME_<alias>, and its desc MDESC_<alias>. For example, if the meta-object has two groups, and MNAME_SROOM is "Sitting Room" and MNAME_BED is "Bedroom", it would randomly select SROOM or BED, and name the room either "Sitting Room" or "Bedroom", respectively; it would also desc the room appropriately, setting its STD attribute to the value of MDESC_SROOM or MDESC_BED, depending on which random <alias> was selected.%r%rExits into and out of the room are also created when a meta-room is created. The in-exit is named after the room, with an abbreviation of the first letter of each word in the name (or, if that abbreviation conflicts with a direction or common one-letter command, the first two letters of the first word, and the first letter of each other word in the name); the out exit is named 'Out;o'. The exits have appropriate Succ, OSucc, and ODrop messages. Also, if the room has a parent, the meta-room will be parented to that same parent.%r%rContinued in '+help Meta4'.
&HELP_META4 Help Object=The command '%xc+room/test%xn' generates a random meta-room configuration, without actually building the room. Use it to test any meta-rooms you're working on, or trying to explore.%r%rExample of a basic meta-room configuration:%r%r&META_OBJ here = #313%r&MNAME_SIT #313 = Cozy Sitting Room%r&MDESC_SIT #313= This is a nondescript sitting room.%r&MNAME_BED #313 = Guest Bedroom%r&MDESC_BED #313 = A plainly-furnished guest room.%r%r'+room/test' would produce one of two possibilities:%r %b Name: Cozy Siting Room%r %b Desc: This is a nondescript sitting room.%r-or-%r %b Name: Guest Bedroom%r %b Desc: A plainly-furnished guest room.%r%rActually typing '%xc+room%xn' would build one of those two rooms.%r%rContinued in '+help Meta5'.
&HELP_META5 Help Object=More complex room configurations are possible. We mentioned "properties" earlier -- random words or phrases which can be inserted into a name or a description. Properties let you expand the number of meta-rooms you have without needing to write a separate description for each one; for example, simply by inserting a random color, you could have a "Red Siting Room", a "Blue Sitting Room", a "Green Sitting Room", and so on.%r%rA property consists of a property name, and a list of possible values for that property. A property name consists of a single word consisting only of lowercase letters, like "color" or "mood". The properties possible for a given room are listed in the MPROP_<alias> attribute, listing the property names in a space-separated format, e.g., "color mood material".%r%rThe list of possible values for a property is stored as P_<property name> on the meta-object, and consists of a '|'-separated list of phrases, such as 'red|blue|green' or 'wooden boards|stone slabs|glistening marble tiles'.%r%rContinued in '+help Meta6'.
&HELP_META6 Help Object=Every time a room is generated, a random value is chosen for each property. That value is substituted every time $<property name> appears in the name or description of the room; if <property name> begins with a capital letter, the substituted property value is also capitalized. For example, $color might substitute to "red", and $Color to "Red".%r%rExample of the sitting room, this time with properties:%r%r&MNAME_SIT #313 = $Color Sitting Room%r&MDESC_SIT #313 = This $mood room is decorated in $color.%r&MPROP_SIT #313 = color mood%r&P_COLOR #313 = red|blue|green%r&P_MOOD #313 = cheerful|gloomy|dusty%r%rNow, there are three possible room names: "Red Sitting Room", "Blue Sitting Room", and "Green Sitting Room". There are three possible descs for the Red Sitting Room: "This cheerful room is decorated in red.", "This gloomy room is decorated in red.", and "This dusty room is decorated in red." Three possibilities also exist for the Blue and Green Sitting Rooms, respectively. With just the addition of two random words, each with three possibilities, there are three possible room names, and nine possible room descriptions.%r%rContinued in '+help Meta7'.
&HELP_META7 Help Object=In our previous example, "color" and "mood" were "independent variables" -- the random value of one isn't affected by the random value of the other. Sometimes, though, variables should be "dependent" -- tied together. For example, suppose there is a meta-room configuration that randomly generates either guard quarters or servant quarters. The description shows an object in the corner -- either a sword or a broom. Clearly, it doesn't make much sense to have the sword show up in the servant quarters, or the broom in the guard quarters; we want to tie these variables together, so that if we pick "guard", we always pick "sword", and vice versa.%r%rProperties that are dependent variables are indicated in the MPROP_<alias> attribute as <property name>-<number>, i.e., 'color-1' rather than 'color'. All properties with the same <number> are dependent upon one another; note that because of this, they have to have the same number of random possibilities in their list of values. You can mix independent and dependent properties, i.e., 'type-1 color object-1', or even something as complex as 'type-1 floor-2 object-1 mood ceiling-2 color'. Note that the '-<number>' is stripped off when checking for the P_<property name> attribute and $<property name>; i.e., even if you use 'color-1' in MPROP_<alias>, you still set P_COLOR and use $color.%r%rContinued in '+help Meta8'.
&HELP_META8 Help Object=Dependent properties are tied together based on the position of the word/phrase in the list of possible values. i.e., the third phrase of the list might be chosen for all properties marked '-1', etc.%r%rReturning to the example of the guard and servant quarters:%r%r&MNAME_QUARTERS #313 = $Type Quarters%r&MDESC_QUARTERS #313 = A $object rests on the $floor of the $type quarters.%r&MPROP_QUARTERS #313 = type-1 object-1 floor%r&P_TYPE #313 = guard|servant%r&P_OBJECT #313 = sword|broom%r&P_FLOOR #313 = wooden boards|rough stone slabs|packed dirt floor%r%rTwo possibilities exist for the room name in this example: "Guard Quarters" and "Servant Quarters". For the Guard Quarters, there are three possible descs: "A sword rests on the wooden boards of the guard quarters.", "A sword rests on the rough stone slabs of the guard quarters.", and "A sword rests on the packed dirt floor of the guard quarters." For the Servant Quarters, there are also three desc possibilities: "A broom rests on the wooden boards of the servant quarters.", "A broom rests on the rough stone slabs of the servant quarters.", and, "A broom rests on the packet dirt floor of the servant quarters."
&HELP_ONLINE Help Object=+online \[<player>\]%r+online/active <list of times>%r+online/free <list of times>%r+online/idle <list of times>%r+online/find <list of people or orgs>%r%rThis system allows you to register the times that you are typically logged into the game, so that people who are trying to schedule events for large groups can readily pick times that will be convenient for the largest number of people.%r%r'+online' displays a graph of time, for the seven days of week, going from midnight to 11:30 pm of a given day, showing your own registered login pattern. '+online <player>' does the same, for another player. (Recommended: @set me=ANSI to see this in color.)%r%rContinued in '+help online2'.
&HELP_ONLINE2 Help Object='+online/find <list>' tries to find coincidental login times for a list of players and/or orgs (org=<org code>, or org=<org code>:<field>/<value> to search). For all players with registered login times: an 'A' is displayed if all of them are listed as active during a time, an 'f' is displayed if all of them are listed as active or free during a time, or an 'i' is displayed if all of them are listed as active, free, or idle during a time.%r%rThe /active, /idle, and /free switches let you register your times. "Active" (A) times are the times you're typically logged in and available to actively roleplay. "Free" (f) times are times you aren't typically logged in, but could be if something was scheduled. "Idle" (i) times are times you are typically logged in but are often idle (such as MUSHing from work).%r%rTimes are a list of the form 'DAY/TIME-TIME', where DAY is the day of the week (or abbreviation, i.e., 'Sun' for Sunday), and TIME is of the format <time>am or <time>pm, i.e., '7:30pm' or '10am'. Note that there are no spaces. Thus, a valid time list could be something like 'Mon/10:30pm-12am Sun/9am-12:30pm', indicating you're on Monday nights from 10:30 to midnight (local game time) and Sundays from 9 am to 12:30 pm.
&GLOBALS_LIST Help Object=Ambience Authorize BBoard Descer Doors Editor Exits Local_Help Mail Meta-Rooms MudCore Orgs Places Watches Wiztools
&CMDS_LIST Help Object=+awake +check +compass +decompile +details +finger +go +grep +hush +idle +inspect +knock +last +lattr +lhelp +margins +mutter +mvattr +online +pairs +request +scan +scope +selfboot +shout +size +sizeall +spell +tidy +uptime +view +where +who +wizards +zoom +3look +3who
&HELP_TRUE_NAMES Help Object=On some MUSHes, the 'look', 'say', and 'pose' commands (as well as their abbreviations, such as 'l', '\"', ':', and ';'), obey \"True Names\". True Names are a convenient way of prefixing the things you say/pose with something other than your actual character name. In some cases this might be just a title you'd like to add onto your name (\"Lord Chantris\") or it could be a full name or in-character alias (\"Brandon Corey\"), or the name of an NPC that you're playing in that particular scene (\"The nondescript man in black\").%r%rYou can set your true name with '&TN me = <True Name>'. If you're just using your regular character name, please DO NOT set a True Name -- do this ONLY when the name is different.%r%rNote that this ONLY affects looks, says, and poses -- it doesn't affect WHO, pages, places code, and so forth.
@set Help Object=HALTED


=================================+++++================================

@@DBC> Now working with object #9, name: Main_Global_Commands
@create Main Global Commands=10
&DO_CHECK Main Global Commands=$+check *: @pemit %#=[switch([setq(1,locate(%#,%0,*))]%q1 [u(CAN_CHECKF_FN,%#,%q1)],#-1 ?,I don't see that here.,#-2 ?,I'm not sure which one you mean.,* 0,Permission denied.,[setq(0,%#)][iter(%q1 [filter(CAN_CHECK_FN,u(RECURS_FN,%q1,%#))],%r[u(CHECK_FMT_FN,##)])])]
&DO_COMPASS Main Global Commands=$+compass: @pemit %#=[setq(0,room(%#))][setq(1,lcstr(first(get(%q0/COMPASS))))][setq(2,switch(member(v(CPS_FMTS),%q1),0,v(CPS_STD),%q1))][setq(3,switch(rest(get(%q0/COMPASS)),show_dark,CPS_DEXIT_FN,CPS_EXIT_FN))][setq(4,locate(%q0,out,c))][u(CPS_FMT_%q2,u(%q3,North),u(%q3,Northeast),u(%q3,East),u(%q3,Southeast),u(%q3,South),u(%q3,Southwest),u(%q3,West),u(%q3,Northwest),u(%q3,Up),u(%q3,Down))]
&DO_LATTR Main Global Commands=$+lattr *: @eval pemit(%#,switch([setq(0,locate(%#,first(%0,/),*))][visible(%#,%q0)],#-1*,I don't see that here.,0,Permission denied.,[setq(9,switch(%0,*/*,rest(%0,/),*))][setq(8,objeval(%#,lattr(%q0/%q9)))][setq(1,sort(objeval(%#,regrep(%q0,%q9,^%\$.+:.+))))][setq(2,sort(objeval(%#,regrep(%q0,%q9,^%\^.+:.+))))][setq(3,setinter(%q8,v(GLOB_LIST)))][setq(4,setdiff(%q8,%q1 %q2 %q3))][iter(Commands Monitors Globals General,ifelse(r(#@),[pemit(%#,%r##:)][list(r(#@),u(LATTR_FMT_FN,##))],))][ifelse(%q1 %q2 %q3 %q4,,No matches.)]))
&DO_LATTR_TYPE Main Global Commands=$+lattr/* *: @eval pemit(%#,switch([setq(0,locate(%#,first(%1,/),*))][visible(%#,%q0)],#-1*,I don't see that here.,0,Permission denied.,[setq(9,switch(%1,*/*,rest(%1,/),*))][setq(8,objeval(%#,lattr(%q0/%q9)))][switch(grab(Commands Monitors Globals Miscellaneous,%0*),,That is not a valid switch.,commands,setq(1,sort(objeval(%#,regrep(%q0,%q9,^%\$.+:.+)))),monitors,setq(2,sort(objeval(%#,regrep(%q0,%q9,^%\^.+:.+)))),globals,setq(3,setinter(%q8,v(GLOB_LIST))),miscellaneous,[setq(1,sort(objeval(%#,regrep(%q0,%q9,^%\$.+:.+))))][setq(2,sort(objeval(%#,regrep(%q0,%q9,^%\^.+:.+))))][setq(3,setinter(%q8,v(GLOB_LIST)))][setq(4,setdiff(%q8,%q1 %q2 %q3))])][iter(Commands Monitors Globals General,ifelse(r(#@),[pemit(%#,%r##:)][list(r(#@),u(LATTR_FMT_FN,##))],))][switch(#$:%q1 %q2 %q3 %q4,?*:,No matches.)]))
&DO_GREP Main Global Commands=$+grep *=*: @eval pemit(%#,switch([setq(0,locate(%#,first(%0,/),*))][visible(%#,%q0)],#-1*,I don't see that here.,0,Permission denied.,[setq(9,switch(%0,*/*,rest(%0,/),*))][switch(wildgrep(%q0,%q9,*%1*),,No matches for '%1' on [u(NAME_FN,%q0)].,[switch(words(#$),1,1 match,#$ matches)] for '%1' on [u(NAME_FN,%q0)]:%r[u(FMT_3COL_FN,sort(#$))])]))
&DO_LHELP Main Global Commands=$+lhelp: @pemit %#=[setq(0,u(LHELP_ATTRIBS_FN,room(%#)))][switch(%q0,,u(DEFAULT_LHELP_MSG),[switch(get(room(%#)/LHELP_TITLE),,Local Help:,get_eval(room(%#)/LHELP_TITLE))]%rValid +lhelp subjects are:%r%r[u(LHELP_SUBJ_FN,setunion(%q0,))]%r%rType '+lhelp <subject>' for further information. <Subject> may be specified as just a fragment of the subjects listed above.%r)]
&DO_LHELP_SUBJ Main Global Commands=$+lhelp *: @pemit %#=[setq(9,u(LHELP_FULLGET_FN,edit(%0,%b,_),room(%#)))][switch(%q9,,Subject '%0' not found. Type '+lhelp' for a list of subjects.,u(%q9))]
&DO_MARGINS Main Global Commands=$+margins */* to */*=*,*,*,*: @switch/first [setq(8,locate(%#,%0,*))][setq(9,locate(%#,%2,*))][controls(%#,%q8)]:[controls(%#,%q9)]:[visible(%#,%q8/%1)]:[writable(%#,%q9/%3)]:[words(get(%q8/%1))]=#-1*:*:?:?:*, {@pemit %#=I don't see that here.},*:#-1*:?:?:*, {@pemit %#=I can't find that target.},0:*:?:?:*, {@pemit %#=You do not control that object.},*:0:?:?:*, {@pemit %#=You do not control that target.},?:?:0:?:*, {@pemit %#=You cannot format that attribute.},?:?:?:0:*, {@pemit %#=You cannot set that attribute.},?:?:?:?:0, {@pemit %#=That attribute does not exist.}, {&%3 %q9=edit(edit(u(MARGINS_FN,%q8,%1,%4,%5,%6,%7),repeat(%b,%6),\[space(%6)\]),%r,\%r); @pemit %#=Format set.}
&DO_MARGINS_VIEW Main Global Commands=$+margins/view */*=*,*,*,*: @pemit %#=[setq(9,locate(%#,%0,*))][switch(%q9:[controls(%#,%q9]:[visible(%#,%q9/%1)],#-1:?:?,I don't see that here.,#-2:?:?,I'm not sure which one you mean.,*:0:?,Permission denied.,*:?:0,Permission denied.,Format for [name(%q9)]/[ucstr(%1)]:%r[u(MARGINS_FN,%q9,%1,%2,%3,%4,%5)])]
&DO_SCAN Main Global Commands=$+scan *: @pemit %#=Scanning.; @dolist filter(NOT_HALT_FN,[lcon(%#)] [lcon(%l)] %l)=@pemit %#=trim(u(SCAN[controls(%#,##)]_FN,%0,##,%#))
&DO_SCAN_FROM Main Global Commands=$+scan/from *=*: @pemit %#=[setq(9,locate(%#,%0,*))][switch(%q9,#-1,I don't see that here.,#-2,I don't know which one you mean!,[setq(8,controls(%#,%q9))][switch(%q8,0,Permission denied.,Scanning: [name(%q9)] \(%q9[flags(%q9)]\) in [setq(7,loc(%q9))][name(%q7)] \(%q7[flags(%q7)]/[name(owner(%q7))]\))])]; @dolist switch(%q8,1,filter(NOT_HALT_FN,[lcon(%q9)] [lcon(%q7)] %q7))=@pemit %#=trim(u(SCAN[controls(%#,##)]_FN,%1,##,%#))
&DO_SCAN_ALL Main Global Commands=$+scan/all *=*: @pemit %#=[setq(9,locate(%#,%0,*))][switch(%q9,#-1,I don't see that here.,#-2,I don't know which one you mean!,[setq(8,controls(%#,%q9))][switch(%q8,0,Permission denied.,Scanning: [name(%q9)] \(%q9[flags(%q9)]\) in [setq(7,loc(%q9))][name(%q7)] \(%q7[flags(%q7)]/[name(owner(%q7))]\))])]; @dolist switch(%q8,1,[lcon(%q9)] [lcon(%q7)] %q7)=@pemit %#=trim(u(SCAN[controls(%#,##)]_FN,%1,##,%#))
&DO_SIZE Main Global Commands=$+size *: @pemit %#=[switch([setq(0,switch(isdbref(locate(%#,%0,*)),1,locate(%#,%0,*),num(*%0)))]%q0 [controls(%#,%q0)],#-1 *,I don't see that here.,#-2 *,I'm not sure which one you mean!,* 0,Permission denied.,Size of [name(%q0)] \(%q0[flags(%q0)]/[name(owner(%q0))]\) : [objmem(%q0)] bytes)]
&DO_SELFBOOT Main Global Commands=$+selfboot: @switch [setq(0,ports(%#))][lt(words(%q0),2)]=1, {@pemit %#=You are only connected once.}, {@dolist rest(%q0)=@boot/port ##; @pemit %#=Your extra connections have been removed.}
&DO_WHERE_NUM Main Global Commands=$+where *: @pemit %#=[setq(0,objeval(%#,lwho()))][setq(1,objeval(%#,iter(%q0,loc(##))))][setq(2,sort(setdiff(%q1,#-1),d))]Locations[space(39)]Players[setq(3,hasflag(%#,Wizard))][setq(9,%0)]; @pemit %#=list(filter(CROWD_FN,%q2),u(FMT_3WHERE%q3_FN,##))
&DO_WHO Main Global Commands=$+who: think u(CUSTOM_WHO_FN,%#,objeval(%#,lwho()))
&DO_WHO_SWITCH Main Global Commands=$+who/*: think u(CUSTOM_WHO_FN,%#,switch(%0,h*,setinter(objeval(%#,lwho()),lcon(%l)),f*,u(FIND_WHO_FN,%#,objeval(%#,lwho())),objeval(%#,lwho())))
&DO_WHO_WILD Main Global Commands=$+who *: think u(CUSTOM_WHO_FN,%#,u(WILD_WHO_FN,%0,objeval(%#,lwho())))
&DO_3WHO Main Global Commands=$+3who*: @pemit %#=[setq(9,objeval(%#,lwho()))][setq(8,switch(%0,,%q9,/a,[setq(1,setunion(iter(%q9,name(##)),))][iter(%q1,num(*##))],/t *,[setq(1,member(%q9,num(*[rest(%0)])))][extract(%q9,1,switch(%q1,0,150,%q1))],/l *,[setq(1,iter(rest(%0),num(*##)))][setq(2,sort(iter(setinter(%q9,%q1),name(##))))][iter(%q2,num(*##))],%b*,[setq(9,setunion(%q9,))][setq(0,[edit(trim(%0),%b,*%b)]*)][setq(1,iter(%q9,name(##)))][munge(MUNGE_WILD_FN,%q1,%q9)],INVALID))][switch(%q8:[words(%q8)],INVALID:*,That is not a valid +3who command.,*:0,There are [words(%q9)] players logged in.,*:1,[u(HDR_3WHO_FN)]%r[u(FMT_3WHO_FN,%q8)]%r%rThere are [words(%q9)] players logged in.,[u(HDR_3WHO_FN)]%r[edit(edit(fold(COL_3WHO_FN,rest(%q8),ljust(u(FMT_3WHO_FN,first(%q8)),24)),D%b%b,D%b),@,%b)]%r%rThere are [words(%q9)] players logged in.)]
&DO_3LOOK Main Global Commands=$+3look: @pemit %#=[name(%l)][switch(or(controls(%#,%l),hasflag(%l,JUMP),hasflag(%l,VISUAL)),1,\(%l[flags(%l)]\))][switch(hasflag(%#,TERSE),0,%r[get_eval(%l/DESC)][switch(elock(%l,%#),0,switch(get(%l/FAIL),,,%r[get_eval(%l/FAIL)]),switch(get(%l/SUCC),,,%r[get_eval(%l/SUCC)]))])][setq(0,filter(SEE_OBJ_FN,remove(lcon(%l),%#)))][switch(%q0,,,%rContents:%r[setq(1,sort(rest(iter(%q0,@[switch(type(##),THING,*[mid(name(##),0,22)],mid(name(##),0,23))]),@),a,@))][edit(u(FMT_3CMUL_FN,%q1),@,%b)])][setq(2,filter(SEE_OBJ_FN,lexits(%l)))][switch(%q2,,,%rObvious Exits:%r[iter(%q2,[name(##)]%b)])]
&DO_MUTTER Main Global Commands=$+mutter *=*: @remit [setq(0,setdiff(map(MUTTER_DBREF_FN,[first(%0,/)] [rest(%0,/)]),#-1 #-2))][setq(1,map(MUTTER_NAME_FN,edit(first(%0,/),%b,|),|))][setq(2,map(MUTTER_NAME_FN,edit(rest(%0,/),%b,|),|))][setq(3,u(MUTTER_LIST_FN,%q1))][switch(%q0,,#-1,%l)]={[switch(%1,:* "*"*,{%N [first(delete(%1,0,1),")]%S mutters to %q3[setq(4,u(MUTTER_FN,extract(%1,2,1,")))][switch(%q4,...,.,{, "%q4"})][rest(rest(%1,"),")]},:*,{%N mutters to %q3.},;* "*"*,{%N[first(delete(%1,0,1),")]%S mutters to %q3[setq(4,u(MUTTER_FN,extract(%1,2,1,")))][switch(%q4,...,.,{, "%q4"})] [rest(rest(%1,"),")]},;*,{%N mutters to %q3.},{%N mutters to %q3[setq(4,u(MUTTER_FN,%1))][switch(%q4,...,.,{, "%q4"})]})]}; @pemit %#={[setq(5,edit(edit(%1,<,),>,))][setq(6,switch(%q0:%0,%#:*,SELF,* *:* *,MANY,ONE))][switch(%q0,,,u(MUTTER_FROM_%q6_FN,[capstr(u(MUTTER_LIST_FN,%q1|%q2))],%q5))][setq(9,trim(%q9))][switch(%q9,,,%rCould not mutter to: %q9)]}; @dolist [setq(2,setdiff(iter(%0,add(##,0)),0))][setq(3,iter(%q2,[AtPlace(%l,##)]|))]%q2=@pemit/list extract(%q3,##,1,|)=u(MUTTER_TO_PLACE_FN,%q5,##); @pemit/list switch(%q6,SELF,,setdiff(%q0,edit(%q3,|,%b)))=u(MUTTER_TO_FN,%q5)
&DO_MUTTER_PLACE Main Global Commands=$+mutter/place *=*: @switch and(gte(%0,1),lte(%0,get(%l/PLACESMAX)))=0, {@pemit %#=There is no such place here.}, {@remit %l={[switch(%1,:* "*"*,{%N [first(delete(%1,0,1),")]%S mutters to [PlaceInfo(%l,%0,NAME)][setq(1,u(MUTTER_FN,extract(%1,2,1,")))][switch(%q1,...,.,{, "%q1"})] [rest(rest(%1,"),")]},:*,{%N mutters to [PlaceInfo(%l,%0,NAME)],},;* "*"*,{%N[first(delete(%1,0,1),")]%S mutters to [PlaceInfo(%l,%0,NAME)][setq(1,u(MUTTER_FN,extract(%1,2,1,")))][switch(%q1,...,.,{, "%q1"})] [rest(rest(%1,"),")]},;*,{%N mutters to [PlaceInfo(%l,%0,NAME)]},{[setq(1,u(MUTTER_FN,%1))]%N mutters to [PlaceInfo(%l,%0,NAME)][switch(%q1,....,.,{, "%q1"})]})]}; @pemit/list [setq(2,edit(edit(%1,<,),>,))][setq(3,{[PlaceInfo(%l,%0,PREFIX)], [switch(%q2,:*,%N [delete(%q2,0,1)],;*,%N[delete(%q2,0,1)],%N says "%q2")]})][setunion(AtPlace(%l,%0),%#)]=%q3}
&DO_MUTTER_TT Main Global Commands=$+mutter/tt *=*: @switch/first [setq(0,locate(%#,%0,nimP))]%q0 [setq(9,WhichPlace(%l,%#))][switch(%q9,0,setq(9,WhichPlace(%l,%q0)))]%q9=#-1 *, {@pemit %#=I don't see that here.},#-2 *, {@pemit %#=I'm not sure which %0 you mean.},* 0, {@pemit %#=Neither you nor [name(%q0)] is at a special place.}, {@pemit/list [setq(8,{[PlaceInfo(%l,%q9,PREFIX)], [switch(%1,:* "*"*,{%N [first(delete(%1,0,1),")]%S mutters to [setq(1,u(MUTTER_FN,extract(%1,2,1,")))][switch(%q0,%#,%oself,name(%q0))][switch(%q1,...,.,{, "%q1"})] [rest(rest(%1,"),")]},:*,{%N mutters to [switch(%q0,%#,%oself,name(%q0))].},;* "*"*,{%N[first(delete(%1,0,1),")]%S mutters to [setq(1,u(MUTTER_FN,extract(%1,2,1,")))][switch(%q0,%#,%oself,name(%q0))][switch(%q1,...,.,{, "%q1"})] [rest(rest(%1,"),")]},;*,{%N mutters to [switch(%q0,%#,%oself,name(%q0))].},{[setq(1,u(MUTTER_FN,%1))]%N mutters to [switch(%q0,%#,%oself,name(%q0))][switch(%q1,...,.,{, "%q1"})]})]})][setunion(AtPlace(%l,%q9),%# %q0)]=%q8; @pemit %#=[setq(2,edit(edit(%1,<,),>,))][u(MUTTER_FROM_[switch(%q0,%#,SELF,ONE)]_FN,name(%q0),%q2)]; @pemit %q0=u(MUTTER_TO_FN,%q2)}
&DO_WIZARDS Main Global Commands=$+wizards:@pemit %#=[setq(0,setinter(objeval(%#,lwho()),v(WIZLIST[hasflag(%#,wizard)])))][switch(%q0,,No wizards connected.,Wizard [space(17)] Idle %b Status%r------ [space(17)] ---- %b ------[map(WIZ_CONN_FN,u(NAMESORT_FN,%q0))])]
&DO_TIDY Main Global Commands=$+tidy: @remit %l=u(%l/TIDY_MESSAGE,%#); @dolist filter(SWEEP_FILT_FN,lcon(%l))=@tel ##=home; @pemit %#=Okay.
@Adisconnect Main Global Commands=&LASTLOGOUT %#=secs(); @pemit/list u(ORGWHO_FN,MON)=DISCONNECT: %N in [name(%l)] (%l[flags(%l)]/[name(owner(%l))])
&DO_VIEW_ALL Main Global Commands=$+view: @pemit %#=[setq(0,lattr(%l/VIEW_*))][switch(%q0,,There is nothing to view here.,Things that can be viewed:%r[edit(u(FMT_3COL_FN,iter(sort(%q0),mid(capstr(lcstr(rest(##,_))),0,23))),_,%b)])]
&DO_VIEW Main Global Commands=$+view *: @verb [setq(9,edit(trim(%0),%b,_))][setq(0,sort(lattr(%l/VIEW_*)))][setq(1,grab(%q0,VIEW_%q9*))][switch(%q1,,[setq(1,grab(%q0,VIEW_*_%q9*))][switch(%q1,,[setq(0,sort(lattr(%l/DVIEW_*)))][setq(1,grab(%q0,DVIEW_%q9*))][switch(%q1,,setq(1,grab(%q0,DVIEW_*_%q9*)))])])][switch(%q1,,setq(1,VIEW_%0))]%l=%#,%q1,I don't see that here.,O%q1,,A%q1,{%0,%#}
&DO_DETAIL Main Global Commands=$+detail *: @switch strmatch(%0,*'s *)=0, {@pemit %#=[setq(0,locate(%#,%0,cehimn))][setq(1,switch(controls(%q0,get(%q0/DETAILS_REF)),1,u(%q0/DETAILS),iter(lattr(%q0/DETAIL_*),rest(##,_))))][switch(%q0:%q1,#-1:*,I don't see that here.,#-2:*,I'm not sure which one you mean.,*:,There are no special details for [name(%q0)].,Details for [name(%q0)]:%r[edit(u(FMT_3COL_FN,iter(sort(%q1),capstr(lcstr(##)))),_,%b)])]}, {@verb [setq(8,trim(after(%0,'s%b)))][setq(9,locate(%#,before(%0,'s%b),cehimn))][setq(0,sort(switch(controls(%q9,get(%q9/DETAILS_REF)),1,[iter(u(%q9/DETAILS),DETAIL_##)][setq(9,get(%q9/DETAILS_REF))],lattr(%q9/DETAIL_*))))][setq(1,match(%q0,DETAIL_[setq(4,edit(%q8,%b,_))]%q4*))][switch(%q1,0,setq(1,match(%q0,DETAIL_*_%q4*)))][setq(2,extract(%q0,%q1,1))][setq(3,switch(%q2,,DETAIL_%q8,%q2))]%q9=%#,%q3,I don't see that here.,O%q3,,A%q3,{%q8,%#}}
&DO_DETAIL_ALL Main Global Commands=$+detail *: @pemit %#=[setq(0,lattr(locate(%#,%0,in)/DETAIL_*))][switch(%q0,,[switch(strmatch(%0,*'s*),,There's no %0 here.)],,There is nothing of interest on %0.,Interesting items: [lcstr(iter(%q0,%b[after(##,DETAIL_)]))])]
&DO_WHERE Main Global Commands=$+where: @pemit %#=[setq(0,objeval(%#,lwho()))][setq(1,objeval(%#,iter(%q0,loc(##))))][setq(2,sort(setdiff(%q1,#-1),d))]Locations[space(39)]Players[setq(3,hasflag(%#,Wizard))]; @pemit %#=list(%q2,u(FMT_3WHERE%q3_FN,##))
&DO_FINGERALL Main Global Commands=$+finger: @pemit %#=Name[space(16)]Position[iter(objeval(%#,lwho()),%r[ljust(name(##),17)] - [u(INDENT_FN,before(get_eval(##/POS),%r),20,59)])]
&DO_LAST Main Global Commands=$+last *: @pemit %#=switch(words(%0),1,u(LAST_ONE_FN,num(*%0)),[u(LAST_HDR_FN)][map(LAST_TBL_FN,u(NAMESORT_FN,setdiff(iter(%0,num(*##)),#-1)))])
&DO_MVATTR Main Global Commands=$+mvattr */*=*: @switch/first switch(%2,*/*,[setq(0,locate(%#,%0,*))]%q0:[controls(%#,%q0)]:[visible(%#,%q0/%1)]:[setq(1,get(%q0/%1))][strmatch(%q1,?*)]:[setq(2,locate(%#,first(%2,/),*))]%q2:[controls(%#,%q2)]:[setq(3,rest(%2,/))][writable(%#,%q2/%q3)],[setq(0,locate(%#,%0,*))]%q0~[controls(%#,%q0)]~[setq(1,lattr(%q0/%1))]%q1~[setq(2,locate(%#,%2,*))]%q2~[controls(%#,%q2)])=#-1~*~*~*~*, {@pemit %#=No such object to move from.},#-2~*~*~*~*, {@pemit %#=I'm not sure which object you want to move from.},*~0~*~*~*, {@pemit %#=You do not control the object to move from.},*~*~~*~*, {@pemit %#=No attributes to move.},*~*~*~#-1~*, {@pemit %#=No such object to move to.},*~*~*~#-2~*, {@pemit %#=I'm not sure which object you want to move to.},*~*~*~*~0, {@pemit %#=You do not control the object to move to.},*~*, {@dolist [setq(4,[name(%q0)]\(%q0[flags(%q0)]\))][setq(5,[name(%q2)]\(%q2[flags(%q2)]\))]%q1={&[setq(9,and(visible(%#,%q0/##),writable(%#,%q2/##)))][switch(%q9,0,,##)] %q2=get(%q0/##); &[switch(%q9,0,,##)] %q0; @pemit %#=Moved %q4/## to %q5/##}}, #-1:*:*:*:*:*:*, {@pemit %#=No such object to move from.},#-2:*:*:*:*:*:*, {@pemit %#=I'm not sure which object you want to move from.},*:0:*:*:*:*:*, {@pemit %#=You do not control the object to move from.},*:*:0:*:*:*:*, {@pemit %#=You cannot move from that attribute.},*:*:*:0:*:*:*, {@pemit %#=No such attribute to move from.},*:*:*:*:#-1:*:*, {@pemit %#=No such object to move to.},*:*:*:*:#-2:*:*, {@pemit %#=I'm not sure which object you want to move to.},*:*:*:*:*:0:*, {@pemit %#=You do not control the object to move to.},*:*:*:*:*:*:0, {@pemit %#=You cannot move to that attribute.}, {&%q3 %q2=%q1; &%1 %q0; @pemit %#=Moved: [name(%q0)]\(%q0[flags(%q0)]\)/[ucstr(%1)] to [name(%q2)]\(%q2[flags(%q2)]\)/[ucstr(%q3)]}
&DO_AWAKE Main Global Commands=$+awake: @pemit %#=[setq(0,.)][setq(1,*)][setq(3,[lcon(%l)] %l [iter(filter(IS_AUDIBLE_FN,lexits(%l)),[loc(##)] [lcon(loc(##))])])][setq(2,setunion(%q3,map(FWD_EXPN_FN,%q3 [lexits(%l)])))][setq(9,filter(IS_HEARER_FN,%q2))][setq(8,filter(IS_MONITOR_FN,%q2))][setq(7,filter(IS_AUDIBLE_FN,%q2))][setq(6,edit(trim(iter(setunion(%q9 %q8 %q7,),##@),r,@),%b,))][setq(5,munge(ASORT_FN,map(MNAME_FN,%q6,@),%q6,@))][setq(4,map(AWAKE_FMT_FN,%q5,@))][u(AWAKE_HDR_FN)]%r[u(FMT_2CMUL_FN,%q4)]
&DO_CHECK_F Main Global Commands=$+check/f *: @switch/first [setr(9,num(*%0))]:[u(CAN_CHECKF_FN,%#,%q9)]=#-1:*, {@pemit %#=No such player.},*:0, {@pemit %#=Permission denied.}, {@dolist [search(name(*%0))]=@pemit %#=[u(CHECK_FMT_FN,##)]}
&DO_CHECK_ONLY Main Global Commands=$+check/only *: @pemit %#=[switch([setq(0,locate(%#,%0,*))]%q0 [u(CAN_CHECKF_FN,%#,%0)],#-1 ?,I don't see that here.,#-2 ?,I'm not sure which one you mean.,* 0,Permission denied.,u(CHECK_FMT_FN,%q0))]
&DO_CHECK_T Main Global Commands=$+check/t *=*: @switch/first [num(*%0)] [member(thing player exit room,lcstr(%1))]=#-1 0, {@pemit %#=No such player. That type is also invalid.},#-1 *, {@pemit %#=No such player.},* 0, {@pemit %#=Invalid type. Valid types are: THING, PLAYER, EXIT, ROOM.}, {@switch [u(CAN_CHECKF_FN,%#,num(*%0))]=0, {@pemit %#=Permission denied.}, {@dolist [search([name(*%0)] type=%1)]=@pemit %#=[u(CHECK_FMT_FN,##)]}}
&DO_IDLE Main Global Commands=$+idle*: @pemit %#=switch(%0,,[repeat(Name %b %b Idle%b%b,5)]%r[setq(9,iter(setunion(objeval(%#,lwho()),),[ljust(mid(name(##),0,9),9,+)]+[rjust(trim(u(WHO_IDLE_FN,idle(##))),3,+)]+))][edit(u(FMT_5COL_FN,sort(%q9)),+,%b)],/h*,[repeat(Name %b %b Idle%b%b,5)]%r[setq(9,iter(setinter(lcon(%l),objeval(%#,lwho())),[ljust(mid(name(##),0,9),9,+)]+[rjust(trim(u(WHO_IDLE_FN,idle(##))),3,+)]+))][edit(u(FMT_5COL_FN,sort(%q9)),+,%b)],/l*,[setq(9,iter(objeval(%#,lwho()),u(IDLE_CAT_FN,name(##),idle(##))))][rjust(Active:,10)] [u(IFMT_6COL_FN,sort(%q0))]%r[rjust(Awake:,10)] [u(IFMT_6COL_FN,sort(%q1))]%r[rjust(Idle:,10)] [u(IFMT_6COL_FN,sort(%q2))]%r[rjust(Comatose:,10)] [u(IFMT_6COL_FN,sort(%q3))],That is not a valid +idle option.)
&DO_KNOCK Main Global Commands=$+knock *: @switch/first [switch(%0,*=:*,POSE:[setq(0,locate(%#,first(%0,=),e))][setq(3,edefault(%q0/ThisSide,name(%q0)))][setq(1,edefault(%q0/OtherSide,name(%q0)))][setq(2,rest(%0,:))]%q0,*=;*,SEMI:[setq(0,locate(%#,first(%0,=),e))][setq(3,edefault(%q0/ThisSide,name(%q0)))][setq(1,edefault(%q0/OtherSide,name(%q0)))][setq(2,rest(%0,;))]%q0,*=*,MSG:[setq(0,locate(%#,first(%0,=),e))][setq(3,edefault(%q0/ThisSide,name(%q0)))][setq(1,edefault(%q0/OtherSide,name(%q0)))][setq(2,rest(%0,=))]%q0,KNOCK:[setq(0,locate(%#,%0,e))][setq(3,edefault(%q0/ThisSide,name(%q0)))][setq(1,edefault(%q0/OtherSide,name(%q0)))]%q0)]=*:#-1, {@pemit %#=Knock on what?},*:#-2, {@pemit %#=Knock on which?},KNOCK:*, {@remit loc(%q0)=You hear someone knocking on %q1.; @oemit %#=%N knocks on the %q3.; @pemit %#=You knock on the %q3.},MSG:*, {@remit loc(%q0)=From beyond %q1, you hear [u(VOICE_FN,%#)] call out, "%q2"; @oemit %#=%N calls out, "%q2" towards the %q3.; @pemit %#=You call out, "%q2" towards the %q3.},POSE:*, {@remit loc(%q0)=From beyond %q1, someone %q2.; @remit %l=%N %q2 at the %q3.},SEMI:*, {@remit loc(%q0)=From beyond %q1, someone%q2.; @remit %l=%N%q2 at the %q3.}
&DO_HUSH_AMBIENCE Main Global Commands=$+hush ambience: @pemit %#=Hushing ambience.; @fo %l=@pemit #29=amb stop
&DO_CONFIGURE_AMB Main Global Commands=$configure * for ambi?nce: @switch/first [setq(0,locate(%#,%0,*))]%q0:[type(%q0)]:[controls(%#,%q0)]=#-1:*:*, {@pemit %#=I don't see that here.},#-2:*:*, {@pemit %#=I'm not sure which one you mean.},*:*:0, {@pemit %#=Permission denied.},*:ROOM:*, {@mvattr %q0=aenter,aenter_no_ambience; @aenter %q0=@pemit #29=amb start; &AMBIENTDELAY %q0=20; @pemit %#=[name(%q0)] (%q0) configured. (Its old @aenter attribute, if any, has been moved to AENTER_NO_AMBIENCE.)}, {@pemit %#=Ambience can only be configured on rooms.}
&DO_UPTIME Main Global Commands=$+uptime: @pemit %#=[mudname()] has been up since [starttime()] ([u(TIME_FMT_FN,sub(secs(),convtime(starttime())))]).%rThe last restart was at [restarttime()] ([u(TIME_FMT_FN,sub(secs(),convtime(restarttime())))]).
&DO_COMPASS_ONE Main Global Commands=$+compass *: @pemit %#=[setq(0,room(%#))][setq(1,lcstr(%0))][setq(2,switch(member(v(CPS_FMTS),%q1),0,v(CPS_STD),%q1))][setq(3,switch(rest(get(%q0/COMPASS)),show_dark,CPS_DEXIT_FN,CPS_EXIT_FN))][setq(4,locate(%q0,out,c))][u(CPS_FMT_%q2,u(%q3,North),u(%q3,Northeast),u(%q3,East),u(%q3,Southeast),u(%q3,South),u(%q3,Southwest),u(%q3,West),u(%q3,Northwest),u(%q3,Up),u(%q3,Down))]
@Aconnect Main Global Commands=@pemit/list u(ORGWHO_FN,MON)=CONNECT: %N in [name(%l)] (%l[flags(%l)]/[name(owner(%l))]); @switch/first [setq(0,get(#17/BOOT_LIST))][setq(1,match(%q0,%#:*:*:*))][setq(2,first(revwords(extract(%q0,%q1,1),:),:))]%q1:[gt(%q2,secs())]=0:*,,1:1, {@pemit %#={You have been locked out of [mudname()] until [setq(3,convsecs(first(revwords(extract(%q0,%q1,1),:),:)))]%q3, due to your unacceptable conduct on this MUSH. Please use this time to reflect on your actions, and to consider behavior that would be more appropriate to a mature adult. Thank you.}; @boot %#; @wall/wiz/emit AUTOBOOT: %N (%#). Locked out until %q3.}, {&BOOT_LIST #17=ldelete(%q0,%q1); @wall/wiz/emit AUTOBOOT: allowed %N (%#). Was locked out until %q3.}
&DO_PAIRS Main Global Commands=$+pairs *: @pemit %#=[setq(0,locate(%#,first(%0,/),*))][switch(controls(%#,%q0),#-1*,I don't see that here.,0,Permission denied.,[setq(1,u(SECURE_ATTR_FN,%#,%q0,lattr(%q0/[switch(%0,*/*,rest(%0,/),*)])))]Pairs Check for [name(%q0)]\(%q0[flags(%q0)]\)[map(PAIRS_FN,sort(%q1))])]
&DO_PAIRS_FIND Main Global Commands=$+pairs/find */*: @pemit %#=[setq(0,locate(%#,%0,*))][switch(%q0:[visible(%#,%q0/%1)]:[hasattr(%q0,%1)],#-1:*:*,I don't see that here.,#-2:*:*,I'm not sure which one you mean.,*:0:*,Permission denied.,*:*:0,That attribute does not exist.,u(PAIRMATCH_FN,get(%q0/%1)))]
&DO_LOCK Main Global Commands=$+lock *: @switch/first [setq(0,locate(%#,%0,ec))]%q0:[hasflag(%q0,Opaque)]:[Authorized(get(%q0/LOCK_LIST),%#)]:[lock(%q0)]=#-1:*:*:*, {@pemit %#=I don't see that door here.},#-2:*:*:*, {@pemit %#=I'm not sure which door you mean.},*:0:*:*, {@pemit %#=That is not a door.},*:*:0:*, {@pemit %#=edefault(%q0/LOCK_FAIL,You are not able to lock that door.)},*:*:*:, {@lock [setq(1,loc(%q0))][setq(2,extract(lexits(%q1),member(iter(lexits(%q1),loc(##)),%l),1))]%q2=#0; @lock %q0=#0; @verb %q0=%#,LOCK_MSG,You lock the door to [name(%q1)].,LOCK_OMSG,locks the door to [name(%q1)].,LOCK_AMSG,%#; @remit [setq(3,get_eval(%q0/LOCK_XMSG))][switch(%q3,,,%q1)]=%q3}, {@pemit %#=That door is already locked.}
&DO_UNLOCK Main Global Commands=$+unlock *: @switch/first [setq(0,locate(%#,%0,ec))]%q0:[hasflag(%q0,Opaque)]:[Authorized(get(%q0/UNLOCK_LIST),%#)]:[lock(%q0)]=#-1:*:*:*, {@pemit %#=I don't see that door here.},#-2:*:*:*, {@pemit %#=I'm not sure which door you mean.},*:0:*:*, {@pemit %#=That is not a door.},*:*:0:*, {@pemit %#=edefault(%q0/UNLOCK_FAIL,You are not able to unlock that door.)},*:*:*:, {@pemit %#=That door is already unlocked.}, {@unlock [setq(1,loc(%q0))][setq(2,extract(lexits(%q1),member(iter(lexits(%q1),loc(##)),%l),1))]%q2; @unlock %q0; @verb %q0=%#,UNLOCK_MSG,You unlock the door to [name(%q1)].,UNLOCK_OMSG,unlocks the door to [name(%q1)].,UNLOCK_AMSG,%#; @remit [setq(3,get_eval(%q0/UNLOCK_XMSG))][switch(%q3,,,%q1)]=%q3}
&DO_DETAILS Main Global Commands=$+details: @pemit %#=[setq(9,filter(HAS_DETS_FN,filter(SEE_OBJ_FN,%l [lcon(%l)] [lcon(%#)] [lexits(%l)] [lexits(%#)])))][switch(trim(%q9),,There is nothing detailed here.,map(FMT_DETS_FN,%q9))]
&DO_DECOMPILE Main Global Commands=$+decompile *: @switch/first [setq(0,locate(%#,first(%0,/),*))][controls(%#,%q0)]=#-1*, {@pemit %#=I don't see that here.},0, {@pemit %#=Permission denied.}, {@pemit %#=Decompiling [setq(1,name(%q0))][setq(2,sort(u(SECURE_ATTR_FN,%#,%q0,lattr(switch(%0,*/*,%q0/[rest(%0,/)],%q0)))))][setq(9,0)][setq(3,fold(BUFSIZE_SPLIT_FN,%q2,%b))][setq(4,words(%q3,|))][words(%q2)] attributes on %q1.; @dolist lnum(1,%q4)=@wait ##=@pemit %#=u(DECOMPILE_FN,%q0,%q1,extract(%q3,##,1,|)); @wait add(%q4,1)=@pemit %#=Finished decompiling %q1 in %q4 chunks.}
&DO_SHOUT Main Global Commands=$+shout *: @remit %l={%N shouts, "%0"}; @dolist iter(lexits(%l),loc(##))=@pemit/list lcon(##)={You hear, from [u(SHOUT_DIR_FN,##,%l)], [u(VOICE_FN,%#)]'s shout: %0}
&DO_SIZEALL Main Global Commands=$+sizeall: @switch/first or(gt(money(%#),300),hasflag(%#,Wizard))=0, {@pemit %#=This command costs as much as a @search. You have inadequate funds.}, {give %#=-300; @pemit %#=u(SIZEALL_FN,%#)}
&DO_SIZEALL_ONE Main Global Commands=$+sizeall *: @pemit %#=switch([hasflag(%#,Wizard)]:[setq(9,num(*%0))]%q9,0:*,Permission denied.,*:#-1,No such player.,u(SIZEALL_FN,%q9))
&DO_MP_H Main Global Commands=$mp/h *: @pemit/list [setq(0,remove(setinter(lcon(%l),lwho()),%#))][setq(1,sort(iter(%q0,name(##))))][setq(2,trim(u(MP_LIST_FN,%q1)))][setq(3,switch(%0,:*,{From afar, to %q2, %N [delete(%0,0,1)]},;*,{From afar, to %q2, %N[delete(%0,0,1)]},{%N pages to %q2: %0}))][setq(4,switch(%0,:*,{Long distance to %q2: %N [delete(%0,0,1)]},;*,{Long distance to %q2: %N[delete(%0,0,1)]},{You paged %q2 with '%0'.}))]%q0={%q3}; @pemit %#={%q4}
&DO_SPELL Main Global Commands=$+spell *: @pemit %#=switch([hasflag(*Webster,Connect)]:[strmatch(%0,*/*)]:[setr(0,locate(%#,first(%0,/),*))]:[visible(%#,%q0)]:[setq(1,rest(%0,/))][t(setr(2,u(SECURE_ATTR_FN,%#,%q0,lattr(%q0/%q1))))],0:*:*:*:*,Spellcheck failed: Service currently unavailable.,*:0:*:*:*,Spellcheck in progress.[pemit(*Webster,%N pages: spell Misspelled [edit(%0,%r,%b)])],*:*:#-1*:*:*,I don't see that here.,*:*:#-2*:*:*,I don't know which one you mean!,*:*:*:0:*,Permission denied.,*:*:*:*:0,No attributes to spellcheck.,Spellcheck for [name(%q0)]\(%q0[flags(%q0)]\)/%q1[pemit(*Webster,iter(%q2,%r%N pages: spell ## [edit(get(%q0/##),%r,%b)]))])
&DO_REQUEST Main Global Commands=$+request *=*: @switch/first [setq(0,trim(%0))][setq(1,trim(%1))][hasflag(*Webster,Connect)]:[and(strmatch(%q1,*@*.*),eq(words(%q1),1))]:[eq(words(%q0),1)]:[num(*%q0)]=0:*:*:*, {@pemit %#=Sorry. That service is currently unavailable.; @pemit OrgWho(STF)=GAME: %N just tried to request a character but Webster isn't connected.},*:0:*:*, {@pemit %#=Sorry. That is not a valid email address.},*:*:0:*, {@pemit %#=Sorry. Character names must be a single word.},*:*:*:#-1, {&R_[setq(9,v(PCREATE_DATA))][setq(8,max(1,get(%q9/TOP)))][setr(7,ifelse(gte(strlen(get(%q9/R_%q8)),3500),add(%q8,1),%q8))][set(%q9,TOP:%q7)] %q9=[get(%q9/R_%q7)] [secs()]:%#:[get(%#/LastSite)]:%q0:%q1; @pemit %#=Processing request.; @pemit *Webster=CREATE %# %q1 %q0 [left(scramble(ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789),8)]; @pemit/list setinter(OrgWho(STF),lwho())=u(REGISTER_MSG_FN,%#,%q0,%q1)}, {@pemit %#=Sorry. That character name is already taken.}
&DO_INFO Main Global Commands=$+info *: @pemit %#=[setq(0,num(*%0))][switch(%q0,#-1,No such player.,[u(PNAME_FN,%q0,%#)]%r[switch(and(hasflag(%q0,connect),or(not(hasflag(%q0,dark)),hasflag(%#,wizard))),0,Last login: [u(LOGIN_FMT_FN,num(%q0),%#)],Idle for [u(SECS_FMT_FN,idle([num(%q0)]))]%rOn since [u(LOGIN_FMT_FN,num(%q0),%#)])]%rLocation: [switch(findable(%#,%q0),1,u(LOC_FMT_FN,loc(%q0),%#),Unknown)]%r[u(MAIL_CHECK_FN,get(%q0/MBOX))]%rOrgs: [u(ORGS[controls(%#,%q0)]_FN,%q0)][u(PATTR_FN,%q0,sex,Gender)][u(PATTR_FN,%q0,pos,Position)][u(PATTR_FN,%q0,email,Email)][switch(hasflag(%#,wizard),1,u(PFATTR_FN,%q0,comment,Comment \([name(owner(%q0/comment))]\)))])]
&DO_FINGER_ONE Main Global Commands=$+finger *: @pemit %#=ifelse(setr(0,num(*%0)),u(CUSTOM_FINGER_FN,default(%#/FINGER_FORMAT,v(DEFAULT_FINGER_FMT))),No such player.)
&DO_ZOOM Main Global Commands=$+zoom: @pemit %#=switch(get(%l/SHORTCUTS),,There are no shortcuts in this area.,[ljust(Shortcut,15)] Destination[iter(#$,%r[ljust(first(##,:),15)] [name(rest(##,:))],|,)])
&DO_ZOOM_ONE Main Global Commands=$+zoom *: @pemit %#=ifelse(setr(0,num(*%0)),ifelse(findable(%#,%q0),switch(u(ZOOM_FN,%l,loc(%q0),owner(%l),0),,,u(Z_MOVE_FN,%#,first(#$))),You cannot locate that person.),switch(setr(3,grab(get(%l/SHORTCUTS),%0*:*,|)),,switch(setr(4,u(Z_RANGE_FN,%l,%0)),,That is not the name of a room in this area.,* *,There are multiple rooms that match:[iter(%q4,%r %b [name(##)])],switch(setr(5,u(ZOOM_FN,%l,first(%q4),owner(%l),0)),,,u(Z_MOVE_FN,%#,first(%q5)))),switch(setr(4,u(ZOOM_FN,%l,rest(%q3,:),owner(%l),0)),,,u(Z_MOVE_FN,%#,first(%q4)))))
&DO_ZOOM_LIST Main Global Commands=$+zoom/list *: @pemit %#=ifelse(setr(0,num(*%0)),ifelse(findable(%#,%q0),u(ZOOM_FN,%l,loc(%q0),owner(%l),2),You cannot locate that person.),switch(setr(3,grab(get(%l/SHORTCUTS),%0*:*,|)),,switch(setr(4,u(Z_RANGE_FN,%l,%0)),,That is not the name of a room in this area.,* *,There are multiple rooms that match:[iter(%q4,%r %b [name(##)])],u(ZOOM_FN,%l,%q4,owner(%l),2)),u(ZOOM_FN,%l,rest(%q3,:),owner(%l),2)))
&DO_HELP_ONE Main Global Commands=$+help *: @pemit %#=[setq(0,sort(iter(lattr(#8/HELP_*),rest(##,_))))][setq(1,match(%q0,[edit(%0,%b,_)]*))][switch(%q1,0,The global help topic '%0' does not exist.%r[u(HELP_SEARCH_FN,%0)],u(#8/HELP_[extract(%q0,%q1,1)]))]
&DO_HELP Main Global Commands=$+help: @pemit %#=u(#8/HELP_HELP)
&DO_HELP_INDEX Main Global Commands=$+help/index *: @pemit %#=u(HELP_SEARCH_FN,%0)
&DO_ROOM Main Global Commands=$+room: @pemit %#=switch([setr(0,get(%l/META_OBJ))]:[words(lattr(%q0/MNAME_*))]:[visible(owner(%l),%q0)]:[words(setr(1,get(setr(9,%vd)/MT_%l)))],:*:*:*,This location is not configured for temporary meta-rooms.,*:0:*:*,This location doesn't have any valid valid meta-rooms configured.,*:*:0:*,This location cannot read its meta-room configuration.,*:*:*:5,This location has reached the maximum of five temporary meta-rooms.,u(MT_MAKE_FN,%#,%q0,%q1,1))
&DO_ROOM_TEST Main Global Commands=$+room/test: @pemit %#=switch([setr(0,get(%l/META_OBJ))]:[words(lattr(%q0/MNAME_*))]:[visible(owner(%l),%q0)],:*:*,This location is not configured for temporary meta-rooms.,*:0:*,This location doesn't have any valid valid meta-rooms configured.,*:*:0,This location cannot read its meta-room configuration.,u(MT_MAKE_FN,%#,%q0,%q1,0))
@set Main Global Commands=INHERIT
@set Main Global Commands=SAFE
@set Main Global Commands=STOP
@set Main Global Commands=COMMANDS
@parent Main Global Commands=#10


=================================+++++================================

@@DBC> Now working with object #10, name: Main_Global_Funcs
@create Main Global Funcs=10
&CAN_CHECKF_FN Main Global Funcs=[controls(%0,%1)]
&CAN_CHECK_FN Main Global Funcs=[visible(%q0,%0)]
&CHECK_FMT_FN Main Global Funcs=[type(%0)] [fullname(%0)](%0[flags(%0)]) is [u(ATTR_CHECK_FN,u(FULL_ALIST_FN,%0),u([type(%0)]_attribs,%0))]
&ATTR_CHECK_FN Main Global Funcs=[setq(3,setdiff(trim(%1),%0))][switch(%q3,,complete.,missing: %q3)]
&FULL_ALIST_FN Main Global Funcs=[switch(parent(%0),#-1,lattr(%0),[lattr(%0)] [u(FULL_ALIST_FN,parent(%0))])]
&RECURS_FN Main Global Funcs=[switch(type(%0),EXIT,,ROOM,[lcon(%0)] [lexits(%0)],lcon(%0))]
&PLAYER_ATTRIBS Main Global Funcs=Desc Sex
&ROOM_ATTRIBS Main Global Funcs=Desc Succ [switch(hasflag(%0,audible),1,Filter Prefix)]
&EXIT_ATTRIBS Main Global Funcs=Desc Odrop Osucc Succ [switch(hasflag(%0,audible),1,Filter Prefix)] [switch(words(lock(%0)),0,,Fail Ofail)]
&THING_ATTRIBS Main Global Funcs=Desc Drop Odrop Osucc Succ [switch(hasflag(%0,enter_ok),1,Enter Oenter Oxenter Leave Oleave Oxleave)] [switch(words(lock(%0)),0,,Fail Ofail)]
&CPS_STD Main Global Funcs=amberyl
&CPS_FMTS Main Global Funcs=amberyl kynn ewstreet nsstreet intersection circular mini custom nesstreet eswstreet swnstreet wnestreet ndeadend sdeadend edeadend wdeadend 1ndoor 1sdoor 1edoor 1wdoor 2nedoor 2nsdoor 2nwdoor 2esdoor 2ewdoor 2swdoor 3nesdoor 3nswdoor 3eswdoor 3newdoor 4door
&CPS_EXIT_FN Main Global Funcs=[setq(5,locate(%q0,%0,c))][switch(%q5:[hasflag(%q5,Dark)]:[hasflag(%q5,Haven)],#-1:*,,*:1:0,,%q4:?:?,[mid(name(%q5),0,19)] \(out\),mid(name(%q5),0,25))]
&CPS_DEXIT_FN Main Global Funcs=[setq(5,locate(%q0,%0,c))][switch(%q5,#-1,,%q4,[mid(name(%q5),0,19)] \(out\),mid(name(%q5),0,25))]
@set Main Global Funcs/CPS_DEXIT_FN = visual
&CPS_FMT_KYNN Main Global Funcs=Obvious Exits:%r[space(23)][center(%0,25)]%r[space(34)]/N\\%r[space(8)][rjust(%7,25)][space(2)]|[space(2)]%1%r[space(33)]\\ | /%r[space(3)][rjust(%6,25)] <-W---+---E-> %2%r[space(33)]/ | \\%r[space(8)][rjust(%5,25)][space(2)]|[space(2)]%3%r[space(34)]\\S/%r[space(23)][center(%4,25)]
&CPS_FMT_AMBERYL Main Global Funcs=Compass Rose%r[space(23)][center(%0,25)]%r[space(34)]/N\\%r[space(35)]|[switch(%8,,,[space(24)]UP)]%r[space(8)][rjust(%7,25)][space(2)]|[space(2)]%1%r[space(33)]\\ | /%r[rjust(%6,25)] <--W-----+-----E--> %2%r[space(33)]/ | \\%r[space(8)][rjust(%5,25)][space(2)]|[space(2)]%3%r[space(35)]|[switch(%9,,,[space(23)]DOWN)]%r[space(34)]\\S/%r[space(23)][center(%4,25)]
&CPS_FMT_EWSTREET Main Global Funcs=Obvious Exits:%r|[space(22)][center(%0,25)][space(22)]|%r| [center(%7,25)][space(17)][center(%1,25)] |%r|[space(23)]|[space(21)]|[space(23)]|%r+[repeat(-,23)]+[repeat(-,21)]+[repeat(-,23)]+%r%r[ljust(%6,25)][space(21)][rjust(%2,25)]%r%r+[repeat(-,23)]+[repeat(-,21)]+[repeat(-,23)]+%r|[space(23)]|[space(21)]|[space(23)]|%r| [center(%5,25)][space(17)][center(%3,25)] |%r|[space(22)][center(%4,25)][space(22)]|
&CPS_FMT_NSSTREET Main Global Funcs=Obvious Exits:%r[setq(8,[repeat(-,30)]+[space(8)]+[repeat(-,30)])][setq(9,[space(30)]|[space(8)]|)][space(23)][center(%0,25)]%r[r(8)]%r[r(9)]%r[space(4)][rjust(%7,25)] |[space(8)]| %1%r[r(9)]%r[r(8)]%r[r(9)]%r[space(4)][rjust(%6,25)] |[space(8)]| %2%r[r(9)]%r[r(8)]%r[r(9)]%r[space(4)][rjust(%5,25)] |[space(8)]| %3%r[r(9)]%r[r(8)]%r[space(23)][center(%4,25)]
&CPS_FMT_INTERSECTION Main Global Funcs=Obvious Exits:%r[setq(8,[repeat(-,30)]+[space(8)]+[repeat(-,30)])][setq(9,[space(30)]|[space(8)]|)][space(23)][center(%0,25)]%r[r(9)]%r[space(4)][rjust(%7,25)] |[space(8)]| %1%r[r(8)]%r%r[ljust(%6,25)][space(21)][rjust(%2,25)]%r%r[r(8)]%r[space(4)][rjust(%5,25)] |[space(8)]| %3%r[r(9)]%r[space(23)][center(%4,25)]
&CPS_FMT_CIRCULAR Main Global Funcs=Obvious Exits:%r[space(23)][center(%0,25)]%r[space(30)]\\[space(9)]/%r[space(3)][rjust(%7,25)][space(3)]\\[repeat(_,7)]/[space(3)]%1%r[space(21)][repeat(_,8)][space(2)]/[space(7)]\\[space(2)][repeat(_,8)]%r[space(29)]\\/[space(9)]\\/%r[space(3)][rjust(%6,25)][space(2)]|[space(9)]|[space(2)]%2%r[space(30)]|[space(9)]|[space(30)]%r[space(21)][repeat(_,8)]/\\[space(9)]/\\[repeat(_,8)]%r[space(31)]\\[repeat(_,7)]/%r[space(3)][rjust(%5,25)][space(3)]/[space(7)]\\[space(3)]%3%r[space(30)]/[space(9)]\\%r[space(23)][center(%4,25)]
&FMT_3AUX_FN Main Global Funcs=%0[switch(mod(words(%0),3),0,%r[ljust(%1,25)],[ljust(%1,25)])]
&FMT_3COL_FN Main Global Funcs=[table(%0,24)]
&LATTR_FMT_FN Main Global Funcs=[ljust(left(%0,15),15)]: [left(get(%q0/%0),60)]
&SECURE_ATTR_FN Main Global Funcs=[istrue(%2,visible(%0,%1/##))]
&WIZONLY_ATTRS Main Global Funcs=Aconnect Adisconnect Comment Last Lastsite Timeout Quota QuotaRoom QuotaExit QuotaThing QuotaPlayer Rquota RquotaRoom RquotaExit RquotaThing RquotaPlayer FIRST_LOGIN LASTLOGOUT MBOX PROPLOC ORGS WATCHED
&GLOB_LIST Main Global Funcs=Aahear Aclone Aconnect Adesc Adfail Adisconnect Adrop Aefail Aenter Afail Agfail Ahear Akill Aleave Alfail Alias Allowance Amail Amhear Amove Apay Arfail Asucc Atfail Atport Atofail Aufail Ause Away Charges Comment ConFormat Cost Daily Desc Destroyer Dfail Drop Ealias Efail Enter ExitFormat ExitTo Fail Filter Forwardlist Gfail Idesc Idle Infilter Inprefix Kill Lalias Last LastIP Lastsite Leave Lfail Listen Logindata Mailcurf Mailflags Mailfolders Mailsucc Move NewObjs Odesc Odfail Odrop Oefail Oenter Ofail Ogfail Okill Oleave Olfail Omove Opay Orfail Osucc Otfail Otport Otofail Oufail Ouse Oxenter Oxleave Oxtport Pay Prefix QueueMax Quota Reject Rfail Rquota Runout Semaphore Sex Signature Startup Succ Tfail Timeout Tport Tofail Ufail Use VA VB VC VD VE VF VG VH VI VJ VK VL VM VN VO VP VQ VR VS VT VU VV VW VX VY VZ VRML_URL HTDesc
&CAN_COPY_FN Main Global Funcs=[or(hasflag(%0,Wizard),not(match(v(WIZONLY_ATTRS),%1)))]
&PATTR_FN Main Global Funcs=[switch(hasattr(%0,%1),0,,%r%2: [get(%0/%1)])]
&LOC_FMT_FN Main Global Funcs=[name(%0)][switch(hasflag(%1,wizard),1,%b\(%0[flags(%0)]/[name(owner(%0))]\),switch(hasflag(%0,jump_ok),1,%b\(%0[flags(%0)]\)))]
&LOGIN_FMT_FN Main Global Funcs=[get(%0/last)][switch(hasflag(%1,wizard),1,%bfrom [get(%0/lastsite)])]
&PFATTR_FN Main Global Funcs=[switch(get(%0/%1),,,%r%2: [get(%0/%1)])]
&CAN_FIND_FN Main Global Funcs=[findable(%1,%0)]
&MAIL_CHECK_FN Main Global Funcs=[switch(get(%0/NEW_LIST),,No unread mail.,#-1 NO MATCH,No unread mail.,New mail since [setq(9,first(get(%0/NEW_LIST)))][convsecs(first(get([first(%q9,-)]/S-[rest(%q9,-)])))].)]
&LHELP_DEFAULT_MSG Main Global Funcs=There is no local help here.
&LHELP_ATTRIBS_FN Main Global Funcs=[iter(get(%0/LHELP_REFS),lattr(##/LH_*))]
&LHELP_SUBJ_FN Main Global Funcs=[edit(u(FMT_3COL_FN,iter(%0,capstr(lcstr(mid(rest(##,_),0,22))))),_,%b)]
&LHELP_FIND_FN Main Global Funcs=[fold(LHELP_LIST_FN,get(%0/LHELP_REFS),#-1)]
&LHELP_LIST_FN Main Global Funcs=[switch(%0,*/LH_*,%0,filter(LHELP_MATCH_FN,iter(lattr(%1/LH_*),%1/##)))]
&LHELP_MATCH_FN Main Global Funcs=[strmatch(%0,%q0)]
&MARGINS_FN Main Global Funcs=[switch(%2,0,,repeat(%r,%2))][u(PARA_FMT_FN,get_eval(%0/%1),%4,%5)][switch(%3,0,,repeat(%r,%3))]
&PARA_FMT_FN Main Global Funcs=[setq(1,%1)][setq(2,sub(78,add(%1,%2)))][edit(map(PARA_AUX_FN,edit(%0,%r,|),|),|,%r)]
&PARA_AUX_FN Main Global Funcs=[space(%q1)][u(INDENT_FN,%0,%q1,%q2)]
&INDENT_FN Main Global Funcs=[setq(0,wordpos(%0,%2))][switch(%q0,#-1,%0,1,[first(%0)]%r[space(%1)][u(INDENT_FN,rest(%0),%1,%2)],[extract(%0,1,sub(%q0,1))]%r[space(%1)][u(INDENT_FN,extract(%0,%q0,words(%0)),%1,%2)])]
&SCAN0_FN Main Global Funcs=[setq(1,fold(ADD_FOLD_FN,iter(setdiff(u(CMDS_ALIST_FN,%1,%2),v(STD_ATTRS)),[setq(0,before(get(%1/##),:))][and(strmatch(%q0,$*),strmatch($%0,%q0))])))][switch(%q1,0,,1,[name(%1)]\(%1\) has 1 matching attribute.,[name(%1)]\(%1\) has %q1 matching attributes.)]
&SCAN1_FN Main Global Funcs=[iter(setdiff(u(CMDS_ALIST_FN,%1,%2),v(STD_ATTRS)),switch([setq(0,before(get(%1/##),:))][strmatch(%q0,$*)] [strmatch($%0,%q0)],1 1,%r[name(%1)] \(%1\) %b##: %q0))]
&CMDS_ALIST_FN Main Global Funcs=[switch(parent(%0),#-1,switch(elock(%0/USE,%1),1,lattr(%0)),[switch(elock(%0/USE,%1),1,lattr(%0))] [u(CMDS_ALIST_FN,parent(%0),%1)])]
&ADD_FOLD_FN Main Global Funcs=[add(%0,%1)]
&STD_ATTRS Main Global Funcs=AAHEAR ACLONE ACONNECT ADESC ADFAIL ADISCONNECT ADROP AEFAIL AENTER AFAIL AGFAIL AHEAR AKILL ALEAVE ALFAIL ALIAS ALLOWANCE AMHEAR AMOVE APAY ARFAIL ASUCC ATFAIL ATPORT AUFAIL AUSE AWAY CHARGES COMMENT COST DESC DFAIL DROP EALIAS EFAIL ENTER FAIL FILTER FORWARDLIST GFAIL IDESC IDLE INFILTER INPREFIX KILL LALIAS LAST LASTSITE LEAVE LFAIL LISTEN MOVE ODESC ODFAIL ODROP OEFAIL OENTER OFAIL OGFAIL OKILL OLEAVE OLFAIL OMOVE OPAY ORFAIL OSUCC OTFAIL OTPORT OUFAIL OUSE OXENTER OXLEAVE OXTPORT PAY PREFIX QUEUEMAX QUOTA REJECT RFAIL RQUOTA RUNOUT SEMAPHORE SEX STARTUP SUCC TFAIL TIMEOUT TPORT UFAIL USE BIRTHTIME KNOTS MBOX OOC RACE WATCHED QUOTAPOOL
&SIZE_FN Main Global Funcs=[fold(ADD_FOLD_FN,iter(lattr(%q0/%0*),strlen(get(%q0/##))))]
&OOC_LOCATIONS Main Global Funcs=#50 #75 #100 #101 #150 #151
&SECS_FMT_FN Main Global Funcs=[setq(8,%0)][switch(gte(%q8,3600),1,{[div(%q8,3600)] hr, [setq(8,mod(%q8,3600))]})][switch(gte(%q8,60),1,{[div(%q8,60)] min, [setq(8,mod(%q8,60))]})]%q8 sec.
&FMT_3WHERE1_FN Main Global Funcs=[ljust(mid([name(%0)] \(%0[flags(%0)]/[name(owner(%0))]\),0,46),47)] [setq(2,sort(iter(elements(%q0,matchall(%q1,%0)),name(##))))][ljust(mid(extract(%q2,1,1),0,9),9)] [ljust(mid(extract(%q2,2,1),0,9),9)] [ljust(mid(extract(%q2,3,1),0,9),9)][switch(gt(words(%q2),3),1,u(NAME_3COL_FN,extract(%q2,4,3999)))]
&FMT_3WHERE0_FN Main Global Funcs=[ljust(mid([name(%0)][switch(hasflag(%0,jump_ok),1,\(%0[flags(%0)]/[name(owner(%0))]\))],0,46),47)] [setq(2,sort(iter(elements(%q0,matchall(%q1,%0)),name(##))))][ljust(mid(extract(%q2,1,1),0,9),9)] [ljust(mid(extract(%q2,2,1),0,9),9)] [ljust(mid(extract(%q2,3,1),0,9),9)][switch(gt(words(%q2),3),1,u(NAME_3COL_FN,extract(%q2,4,3999)))]
&CROWD_FN Main Global Funcs=[gte(words(setinter(lcon(%0),%q0)),%q9)]
&FINDABLE_FN Main Global Funcs=[findable(%#,%0)]
&WHO_ON_FN Main Global Funcs=[switch(hasflag(%0,wizard),1,lwho(),filter(WHO_FILT_FN,lwho()))]
&WHO_FILT_FN Main Global Funcs=not(hasflag(%0,dark))
&NAME_3COL_FN Main Global Funcs=[fold(NAME_3AUX_FN,rest(%0),%r[space(48)][ljust(mid(first(%0),0,9),10)])]
&NAME_3AUX_FN Main Global Funcs=%0[switch(mod(words(%0),4),0,%r[space(48)][ljust(mid(%1,0,9),10)],[ljust(mid(%1,0,9),10)])]
&WHO_FORMAT1 Main Global Funcs=%r[switch(hasflag(%0,haven),1,OOC,IC%b)] [ljust(name(%0),17)][switch(poss(%0),his,\(M\),her,\(F\),its,---)] %b[ljust(mid(name(room(%0)),0,38),39)][u(WHO_ONFOR_FN,conn(%0))][u(WHO_IDLE_FN,idle(%0))]
&LIST_WILD_FN Main Global Funcs=[neq(member(iter(%q0,strmatch(%0,##)),1),0)]
&COL_3WHO_FN Main Global Funcs=%0[switch(mod(words(%0),9),0,%b%r[ljust(u(FMT_3WHO_FN,%1),22)], %b%b[ljust(u(FMT_3WHO_FN,%1),22)])]
&HDR_3WHO_FN Main Global Funcs=Name %b %b %b %b On For Idle %bName %b %b %b %b On For Idle %bName %b %b %b %b On For Idle
&FMT_3WHO_FN Main Global Funcs=[ljust(mid(name(%0),0,12),13)][rjust(u(WHO_ONFOR_FN,conn(%0)),6)] [rjust(u(WHO_IDLE_FN,idle(%0)),4)][switch(hasflag(%0,DARK),1,D)]
&WHO_FLAGS_FN Main Global Funcs=[switch(hasflag(%0,dark),1,D)][switch(hasflag(%0,unfind),1,U)][switch(hasflag(%0,wizard),1,W)]
&WHO_ONFOR_FN Main Global Funcs=[switch(gte(div(%0,3600),10),1,div(%0,3600),0[div(%0,3600)])]:[switch(gte(div(mod(%0,3600),60),10),1,div(mod(%0,3600),60),0[div(mod(%0,3600),60)])]
&WHO_IDLE_FN Main Global Funcs=[setq(x,86400 3600 60 1)][setq(y,switch(member(whenfalse(%qx,gte(%0,##)),1),0,4,#$))][setq(z,div(%0,extract(%qx,%qy,1)))][ifelse(lt(%qz,10),%b,)]%qz[extract(d h m s,%qy,1)]
&WHO_ROOM_FN Main Global Funcs=[ljust(mid(switch(hasflag(%0,Jump_Ok),1,[name(%0)] \(%0[flags(%0)]\),name(%0)),0,38),39)]
&SEE_OBJ_FN Main Global Funcs=[not(or(hasflag(%0,DARK),and(not(hasflag(%0,CONNECT)),strmatch(PLAYER,type(%0)))))]
&FMT_3CMUL_FN Main Global Funcs=[fold(FMT_3AMUL_FN,rest(%0,@),ljust(first(%0,@),25),@)]
&FMT_3AMUL_FN Main Global Funcs=%0@[switch(mod(words(%0,@),3),0,%r[ljust(%1,25)],[ljust(%1,25)])]
&RESOLVE_NAME_FN Main Global Funcs=[switch(and(hasflag(*%0,connected),elock(*%0/PAGE,%#)),1,num(*%0),#-1)]
&DIFF_LIST_FN Main Global Funcs=[switch(%0,#-1,%1)]
&MUTTER_FN Main Global Funcs=[edit(u(DOTS_FN,u(SELECT_WORDS_FN,%0)),%b...,...)]
&MUTTER_FROM_FN Main Global Funcs=[switch(%0,%1,switch(%2,:*,{You sense "[name(%0)] [delete(%2,0,1)]"},;*,{You sense "[name(%0)][delete(%2,0,1)]"},{You mutter to yourself, "%2"}),switch(%2,:*,{[name(%1)] senses "[name(%0)] [delete(%2,0,1)]"},;*,{[name(%1)] senses "[name(%0)][delete(%2,0,1)]"},{You whisper "%2" to [name(%1)].}))]
&MUTTER_TO_FN Main Global Funcs=[switch(%0,:*,{You sense %N [delete(%0,0,1)]},;*,{You sense %N[delete(%0,0,1)]},{%N whispers "%0"})]
&DOTS_FN Main Global Funcs=[switch(%0,*... ...*,u(DOTS_FN,edit(%0,... ...,...)),%0)]
&SELECT_WORDS_FN Main Global Funcs=[switch(%0,*<*>*,[map(KILL_WORDS_FN,before(%0,<))] [before(after(%0,<),>)] [u(SELECT_WORDS_FN,after(%0,>))],map(KILL_WORDS_FN,%0))]
&KILL_WORDS_FN Main Global Funcs=[switch([rand(3)]%0,0,,1,,2,,0*,%0,...)]
&COMMA_LIST_FN Main Global Funcs=[itemize(%0)]
&FMT_5COL_FN Main Global Funcs=[table(%0,14)]
&FMT_5AUX_FN Main Global Funcs=%0[switch(mod(words(%0),5),0,%r[ljust(%1,15)],[ljust(%1,15)])]
&FMT_4COL_FN Main Global Funcs=[table(%0,18)]
&FMT_4AUX_FN Main Global Funcs=%0[switch(mod(words(%0),4),0,%r[ljust(%1,19)],[ljust(%1,19)])]
&WIZLIST1 Main Global Funcs=#1 #3 #23
&WIZLIST0 Main Global Funcs=#3
&WIZ_CONN_FN Main Global Funcs=%r[ljust([name(%0)] [switch(hasflag(%0,dark),1,\(Dark\))],25)] [u(WHO_IDLE_FN,idle(%0))] %b [mid(edefault(%0/WIZ_STATUS,switch(hasflag(%0,Dark),0,Available,Unavailable)),0,45)]
&GLOB_CONN_LIST Main Global Funcs=#25 #30 #11
&SWHO_FN Main Global Funcs=%r[space(8)][ljust([name(%0)] [switch(hasflag(%0,DARK),1,\(Dark\))],25)] [ljust(Idle: [u(WHO_IDLE_FN,idle(%0))],15)] [switch(get(%0/STF_STATUS),,,\([get(%0/STF_STATUS)]\))]
&IS_CONN0_FILT_FN Main Global Funcs=[and(hasflag(%0,Conn),not(hasflag(%0,Dark)))]
&IS_CONN1_FILT_FN Main Global Funcs=hasflag(%0,Conn)
&SWEEP_FILT_FN Main Global Funcs=[switch(type(%0),PLAYER,not(hasflag(%0,Connect)),THING,and(hasflag(%0,Puppet),not(hasflag(owner(%0),Connect))),0)]
&GFUN_LIST Main Global Funcs=tn:#55/tn_gfun whichplace:#22/func_whichplace atplace:#22/func_atplace placeinfo:#22/func_placeinfo descer:#32/descer_gfun orgwho:#37/orgwho_gfun orgkeys:#37/orgkeys_gfun orginfo:#37/orginfo_gfun orgsearch:#37/orgsearch_gfun orgadmin:#37/orgadmin_gfun authorized:#37/authorized_gfun margins:#10/margins_gfun
&NOT_HALT_FN Main Global Funcs=[and(not(hasflag(%0,Halt)),elock(%0/USE,%#))]
&PAREN0 Main Global Funcs=(
&PAREN1 Main Global Funcs=)
&BRACKET0 Main Global Funcs=[
&BRACKET1 Main Global Funcs=]
&BRACE0 Main Global Funcs={
&BRACE1 Main Global Funcs=}
&IS_AUDIBLE_FN Main Global Funcs=[hasflag(%0,Audible)]
&FWD_EXPN_FN Main Global Funcs=[iter(get(%0/Forwardlist),## [lcon(##)])]
&IS_HEARER_FN Main Global Funcs=[or(strmatch(type(%0),PLAYER),hasflag(%0,Puppet))]
&IS_MONITOR_FN Main Global Funcs=[or(hasflag(%0,Monitor),hasattr(%0,Listen))]
&ASORT_FN Main Global Funcs=[sort(%0,a,@)]
&AWAKE_FMT_FN Main Global Funcs=[r(or(hasflag(owner(%0),Connect),hasflag(%0,Connect)))][r(neq(member(%q9,%0),0))][r(neq(member(%q8,%0),0))][r(neq(member(%q7,%0),0))] [mid([name(%0)][switch(%0,owner(%0),,%b\(%0[flags(%0)]/[name(owner(%0))]\))],0,32)]
&AWAKE_HDR_FN Main Global Funcs=CHMA Name[space(29)]CHMA Name
&FMT_2CMUL_FN Main Global Funcs=[edit(fold(FMT_2AMUL_FN,rest(%0,@),ljust(first(%0,@),38),@),@,)]
&FMT_2AMUL_FN Main Global Funcs=%0@[switch(mod(words(%0,@),2),0,%r[ljust(%1,38)],[ljust(%1,38)])]
&MP_LIST_FN Main Global Funcs=[setq(9,words(%0))][switch(%q9,0,no one,1,u(MP_NAME_FN,%0),2,[u(MP_NAME_FN,first(%0))] and [u(MP_NAME_FN,rest(%0))],[iter(extract(%0,1,sub(%q9,1)),{[u(MP_NAME_FN,##)],})] and [u(MP_NAME_FN,last(%0))])]
&MP_NAME_FN Main Global Funcs=[switch(get(*%0/Idle),,%0,%0 \(idle [u(TIME_FMT_FN,idle(%0))]\))]
&TIME_FMT_FN Main Global Funcs=[switch(gte(%0,86400),0,,1,[div(%0,86400)]d%b)][switch(gte(%0,3600),0,,1,sub(div(%0,3600),mul(div(%0,86400),24))h%b)][switch(gte(%0,60),0,,1,div(mod(%0,3600),60)m%b)][mod(%0,60)]s
&IDLE_CAT_FN Main Global Funcs=[setq(8,switch(1,lte(%1,300),0,lte(%1,900),1,lte(%1,3600),2,3))][setq(%q8,[r(%q8)] %0)]
&IFMT_6COL_FN Main Global Funcs=[edit(fold(IFMT_6AUX_FN,rest(%0),ljust(mid(first(%0),0,10),11)),%r,%r[space(11)])]
&IFMT_6AUX_FN Main Global Funcs=%0[switch(mod(words(%0),6),0,%r[ljust(mid(%1,0,10),11)],ljust(mid(%1,0,10),11))]
&LAST_ONE_FN Main Global Funcs=[switch(%0,#-1,That is not a player.,[name(%0)]: [switch(objeval(%#,hasflag(%0,Connect)),0,Last on [get(%0/LAST)][switch(hasflag(%#,Wizard),1,%b\([trim(u(WHO_IDLE_FN,sub(secs(),get(%0/LASTLOGOUT))))] ago\, for [trim(u(WHO_IDLE_FN,sub(get(%0/LASTLOGOUT),convtime(get(%0/LAST)))))]\))],On since [get(%0/LAST)])][switch(hasflag(%#,Wizard),1,%bfrom [get(%0/LASTSITE)])])]
&LAST_TBL_FN Main Global Funcs=%r[ljust(name(%0),18)] [ljust(switch(objeval(%#,hasflag(%0,Connect)),0,u(TIME_FMT_FN,sub(secs(),get(%0/LASTLOGOUT))),Connected),18)] [ljust(get(%0/LAST),28)] [switch([hasflag(%#,Wizard)]:[hasflag(%0,Connect)],1:0,u(TIME_FMT_FN,sub(get(%0/LASTLOGOUT),convtime(get(%0/LAST)))),1:1,u(TIME_FMT_FN,conn(%0)))]
&LAST_HDR_FN Main Global Funcs=Name [space(13)] Logged Out [space(7)] Logged In [space(18)] [switch(hasflag(%#,Wizard),1,On For)]
&NAMESORT_FN Main Global Funcs=[munge(ASORT_FN,iter(%0,name(##),,@),edit(%0,%b,@),@,)]
&SORT_AUX_FN Main Global Funcs=[sort(%0)]
&MNAME_FN Main Global Funcs=[name(%0)]
&GREP_FN Main Global Funcs=[strmatch(get(%q0/%0),*%q1*)]
&CPS_FMT_MINI Main Global Funcs=[center(%0,59)][switch(%8,,,%b %b UP)]%r[rjust(%7,25)] %b%b N %b%b %1%r[rjust(%6,25)] %bW * E%b %2%r[rjust(%5,25)] %b%b S %b%b %3%r[center(%4,59)][switch(%9,,,%b %bDOWN)]
@set Main Global Funcs/CPS_FMT_MINI = visual
&CPS_FMT_CUSTOM Main Global Funcs=[u(%q0/CUSTOM_COMPASS,%0,%1,%2,%3,%4,%5,%6,%7,%8,%9)]
&LHELP_FULLGET_FN Main Global Funcs=[setq(0,*/LH_%0*)][setq(1,first(u(LHELP_FIND_FN,%1)))][switch(%q1,,[setq(2,*/LHD_%0*)][setq(3,first(u(LHELP_DARK_FIND_FN,%1)))][switch(%q3,,u(LHELP_PARTGET_FN,%0,%1),%q3)],%q1)]
&LHELP_DARK_FIND_FN Main Global Funcs=[fold(LHELP_DARK_LIST_FN,get(%0/LHELP_REFS),#-1)]
&LHELP_PARTGET_FN Main Global Funcs=[setq(0,*/LH_*%0*)][setq(1,first(u(LHELP_FIND_FN,%1)))][switch(%q1,,[setq(2,*/LHD_*%0*)][setq(3,first(u(LHELP_DARK_FIND_FN,%1)))]%q3,%q1)]
&LHELP_DARK_LIST_FN Main Global Funcs=[switch(%0,*/LHD_*,%0,filter(LHELP_DARK_MATCH_FN,iter(lattr(%1/LHD_*),%1/##)))]
&LHELP_DARK_MATCH_FN Main Global Funcs=[strmatch(%0,%q2)]
&DEFAULT_LHELP_MSG Main Global Funcs=There is no local help here.
&PAIRS_FN Main Global Funcs=%r%b%b[ljust(%0:,28)] [setq(2,get(%q0/%0))]%b [ljust(\{ \}: [u(COUNT_CHAR_FN,%q2,\{)]/[u(COUNT_CHAR_FN,%q2,\})],12)] %b [ljust(\[ \]: [u(COUNT_CHAR_FN,%q2,\[)]/[u(COUNT_CHAR_FN,%q2,\])],12)] %b [ljust(\( \): [u(COUNT_CHAR_FN,%q2,\()]/[u(COUNT_CHAR_FN,%q2,\))],12)]
&COUNT_CHAR_FN Main Global Funcs=[words(lpos(%0,%1))]
&PAIRMATCH_FN Main Global Funcs=[setq(0,lpos(%0,v(PAREN0)))][setq(1,lpos(%0,v(PAREN1)))][setq(2,lpos(%0,v(BRACKET0)))][setq(3,lpos(%0,v(BRACKET1)))][setq(4,lpos(%0,v(BRACE0)))][setq(5,lpos(%0,v(BRACE1)))][setq(9,Go)][setq(0,map(PAIRSTACK_FN,munge(SORT_AUX_FN,%q0 %q1 %q2 %q3 %q4 %q5,[iter(%q0,##-OP)] [iter(%q1,##-CP)] [iter(%q2,##-OT)] [iter(%q3,##-CT)] [iter(%q4,##-OB)] [iter(%q5,##-CB)])))][switch(%q9:%q8,Go:,No matching errors encountered.,Go:*,Match ended prematurely. Expected to pair for '[iter(revwords(%q8),u(PAIR_TR_FN,##))]' starting from:%r[u(PAIR_POS_FN,last(%q8),%0)],Match stopped on character [first(%q7,-)] '[u(PAIR_TR_FN,%q7)]' when expecting match to [switch(words(%q8),1,character [first(%q8,-)] '[u(PAIR_TR_FN,%q8)]',2,characters [first(last(%q8),-)] '[u(PAIR_TR_FN,last(%q8))]' and [first(first(%q8),-)] '[u(PAIR_TR_FN,first(%q8))]',characters [iter(revwords(rest(%q8)),[first(##,-)] '[u(PAIR_TR_FN,##)]'\\\\,)] and [first(first(%q8),-)] '[u(PAIR_TR_FN,first(%q8))]')]. String up to error:%r[mid(%0,0,first(%q7,-))])]
&PAIRSTACK_FN Main Global Funcs=[switch(%q9:%0,Go:*-O?,setq(8,trim(%0 %q8)),Go:*-C?,switch(first(%q8),*-O[mid(%0,sub(strlen(%0),1),1)],setq(8,rest(%q8)),[setq(9,Error)][setq(7,%0)]))]
&PAIR_TR_FN Main Global Funcs=[switch(%0,*-OP,v(PAREN0),*-CP,v(PAREN1),*-OT,v(BRACKET0),*-CT,v(BRACKET1),*-OB,v(BRACE0),*-CB,v(BRACE1))]
&PAIR_POS_FN Main Global Funcs=[mid(%1,0,add(first(%0,-),1))]
&ORGS0_FN Main Global Funcs=[iter(filter(IS_HAVEN_FN,get(%0/ORGS)),%b[name(##)])]
&ORGS1_FN Main Global Funcs=[iter(get(%0/ORGS),%b[name(##)])]
&IS_HAVEN_FN Main Global Funcs=[hasflag(%0,Haven)]
&PNAME_FN Main Global Funcs=[switch([hasflag(%1,wizard)]:[hasflag(%0,suspect)]:[hasflag(%0,robot)]:[hasflag(%0,Haven)],1:1:1:*,Suspect Robot \(property of [name(owner(%0))]\),1:1:0:0,Suspect IC Player,1:1:0:1,Suspect OOC Player,*:0:1:*,Robot \(property of [name(owner(%0))]\),*:*:*:0,IC Player,OOC Player)]: [name(%0)][switch(get(%0/alias),,,%b\([get(%0/alias)]\))] [switch(hasflag(%1,Wizard),1,\(%0[flags(%0)]\))]
&MARGINS_GFUN Main Global Funcs=[switch(%1,0,,repeat(%r,%1))][u(PARA_FMT_FN,%0,%3,%4)][switch(%2,0,,repeat(%r,%2))]
&MUTTER_DBREF_FN Main Global Funcs=[switch(and(gte(%0,1),lte(%0,get(%0/PLACESMAX))),1,AtPlace(%l,%0),locate(%#,%0,nimP))]
&MUTTER_NAME_FN Main Global Funcs=[switch(and(gte(%0,1),lte(%0,get(%l/PLACESMAX))),1,PlaceInfo(%l,%0,NAME),[setq(8,locate(%#,%0,nimP))][switch(%q8,%#,%oself,#-*,setq(9,%q9 %0),name(%q8))])]
&MUTTER_LIST_FN Main Global Funcs=[setq(8,trim(setunion(%0,,|),l,|))][setq(7,words(%q8,|))][switch(%q7,0,,1,%q8,2,[first(%q8,|)] and [last(%q8,|)],edit([extract(%q8,1,sub(%q7,1),|)]|and [last(%q8,|)],|,{,%b}))]
&MUTTER_FROM_SELF_FN Main Global Funcs=[switch(%1,:*,{You sense "%N [delete(%1,0,1)]"},;*,{You sense "%N[delete(%1,0,1)]"},{You mutter to yourself, "%1"})]
&MUTTER_FROM_ONE_FN Main Global Funcs=[switch(%1,:*,{%0 senses "%N [delete(%1,0,1)]"},;*,{%0 senses "%N[delete(%1,0,1)]"},{You whisper "%1" to %0.})]
&MUTTER_FROM_MANY_FN Main Global Funcs=[edit(switch(%1,:*,{%0 sense "%N [delete(%1,0,1)]"},;*,{%0 sense "%N[delete(%1,0,1)]"},{You whisper "%1" to %0.}),%oself,yourself)]
&MUTTER_TO_PLACE_FN Main Global Funcs=[PlaceInfo(%l,%1,PREFIX)], [switch(%0,:*,{%N [delete(%0,0,1)]},;*,{%N[delete(%0,0,1)]},{%N says, "%0"})]
&MUNGE_WILD_FN Main Global Funcs=[filter(LIST_WILD_FN,sort(%0))]
&FMT_DETS_FN Main Global Funcs=%r[ljust(mid(name(%0),0,16),17)] - [edit([setq(0,switch([get(%0/DETAILS_REF)]:[u(%0/DETAILS)],?*:?*,iter(sort(u(%0/DETAILS)),capstr(lcstr(##))),iter(sort(lattr(%0/DETAIL_*)),capstr(lcstr(rest(##,_))))))][ljust(mid(first(%q0),0,13),13)] [ljust(mid(extract(%q0,2,1),0,13),13)] [ljust(mid(extract(%q0,3,1),0,13),13)] [ljust(mid(extract(%q0,4,1),0,13),13)][switch(gt(words(%q0),4),1,u(DET_4COL_FN,extract(%q0,5,2000)))],_,%b)]
&HAS_DETS_FN Main Global Funcs=[or(and(controls(%0,get(%0/DETAILS_REF)),strmatch(get(%0/DETAILS),?*)),strmatch(lattr(%0/DETAIL_*),?*))]
&DET_4COL_FN Main Global Funcs=[fold(DET_4AUX_FN,rest(%0),%r[space(20)][ljust(mid(first(%0),0,13),14)])]
&DET_4AUX_FN Main Global Funcs=%0[switch(mod(words(%0),5),0,%r[space(20)][ljust(mid(%1,0,13),14)],[ljust(mid(%1,0,13),14)])]
&BUFSIZE_SPLIT_FN Main Global Funcs=%0[setq(8,strlen(get(%q0/%1)))][setq(7,strlen(&%1 %q1=))][setq(9,add(%q7,%q8,%q9,3))][switch(gt(%q9,3900),1,[setq(9,add(%q7,%q8,3))]|%1,%b%1)]
&DECOMPILE_FN Main Global Funcs=[after(iter(%2,%r&## %1=[get(%0/##)]),%r)]
&SHOUT_DIR_FN Main Global Funcs=[switch(extract(lexits(%0),member(iter(lexits(%0),loc(##)),%1),1),locate(%0,north,c),the north,locate(%0,northeast,c),the northeast,locate(%0,east,c),the east,locate(%0,southeast,c),the southeast,locate(%0,south,c),the south,locate(%0,southwest,c),the southwest,locate(%0,west,c),the west,locate(%0,northwest,c),the northwest,locate(%0,up,c),above,locate(%0,down,c),below,somewhere)]
&VOICE_FN Main Global Funcs=[default(%0/VOICE,switch(subj(%0),he,a man,she,a woman,someone))]
&SIZEALL_FN Main Global Funcs=[setq(0,search(%0 type=r))][setq(1,search(%0 type=e))][setq(2,search(%0 type=t))][setq(3,search(%0 type=p))][setq(4,fold(ADD_FOLD_FN,iter(%q0,objmem(##))))][setq(5,fold(ADD_FOLD_FN,iter(%q1,objmem(##))))][setq(6,fold(ADD_FOLD_FN,iter(%q2,objmem(##))))][setq(7,fold(ADD_FOLD_FN,iter(%q3,objmem(##))))][setq(0,words(%q0))][setq(1,words(%q1))][setq(2,words(%q2))][setq(3,words(%q3))][name(%0)] \([get(%0/Quota)] quota, [add(%q0,%q1,%q2,%q3)] items total\)%r [rjust(%q0,2)] rooms:%t[u(COMMA_NUM_FN,%q4)] bytes%r [rjust(%q1,2)] exits:%t[u(COMMA_NUM_FN,%q5)] bytes%r [rjust(%q2,2)] things:%t[u(COMMA_NUM_FN,%q6)] bytes%r [rjust(%q3,2)] players:%t[u(COMMA_NUM_FN,%q7)] bytes%r %b%t%t--------------%r %b%t%t[u(COMMA_NUM_FN,add(%q4,%q5,%q6,%q7))] bytes
&COMMA_NUM_FN Main Global Funcs=[rjust(switch(strlen(%0),6,{[mid(%0,0,3)],[mid(%0,3,3)]},5,{[mid(%0,0,2)],[mid(%0,2,3)]},4,{[mid(%0,0,1)],[mid(%0,1,3)]},%0),7)]
&FINDEXIT_FN Main Global Funcs=[not(strmatch(locate(%l,%0,c),#-1))]
@set Main Global Funcs/FINDEXIT_FN = visual
&ORGWHO_FN Main Global Funcs=[setinter(get(get(#38/%0_ORG)/PLAYERS),lwho())]
&CPS_FMT_ESWSTREET Main Global Funcs=Obvious Exits:%r[setq(8,[repeat(-,30)]+[space(8)]+[repeat(-,30)])][setq(9,[space(30)]|[space(8)]|)][ljust(%7,20)]%b%b%b%b%b[center(%0,21)]%b%b%b%b%b[rjust(%1,20)]%r[repeat(-,70)]%r%r[ljust(%6,25)][space(21)][rjust(%2,25)]%r%r[r(8)]%r[rjust(%5,25)]%b%b%b%b%b|[space(8)]|%b%3%r[r(9)]%r[space(23)][center(%4,25)]
&CPS_FMT_WNESTREET Main Global Funcs=Obvious Exits:%r[setq(8,[repeat(-,30)]+[space(8)]+[repeat(-,30)])][setq(9,[space(30)]|[space(8)]|)][space(23)][center(%0,25)]%r[r(9)]%r[rjust(%7,25)]%b%b%b%b%b|[space(8)]|%b%1%r[r(8)]%r%r[ljust(%6,25)][space(21)][rjust(%2,25)]%r%r[repeat(-,70)]%r[ljust(%5,20)]%b%b%b%b%b[center(%4,21)]%b%b%b%b%b[rjust(%3,20)]
&CPS_FMT_SWNSTREET Main Global Funcs=Obvious Exits:%r[setq(7,[space(39)]|)][setq(8,[repeat(-,30)]+[space(8)]|)][setq(9,[space(30)]|[space(8)]|)][space(23)][center(%0,25)]%r[r(9)]%r[r(9)]%r[space(4)][rjust(%7,25)]%b|[space(8)]|%b%1%r[r(8)]%r[r(7)]%r[ljust(%6,25)][space(14)]|%b%2%r[r(7)]%r[r(8)]%r[space(4)][rjust(%5,25)]%b|[space(8)]|%b%3%r[r(9)]%r[r(9)]%r[space(23)][center(%4,25)]
&CPS_FMT_NESSTREET Main Global Funcs=Obvious Exits:%r[setq(7,[space(30)]|)][setq(8,[space(30)]|[space(8)]+[repeat(-,30)])][setq(9,[space(30)]|[space(8)]|)][space(23)][center(%0,25)]%r[r(9)]%r[r(9)]%r[space(4)][rjust(%7,25)]%b|[space(8)]|%b%1%r[r(8)]%r[r(7)]%r[space(4)][rjust(%6,25)]%b|[space(8)][rjust(%2,25)]%r[r(7)]%r[r(8)]%r[space(4)][rjust(%5,25)]%b|[space(8)]|%b%3%r[r(9)]%r[r(9)]%r[space(23)][center(%4,25)]
&CPS_FMT_NDEADEND Main Global Funcs=Obvious Exits:%r[setq(8,[repeat(-,30)]+[space(8)]+[repeat(-,30)])][setq(9,[space(30)]|[space(8)]|)][space(23)][center(%0,25)]%r[repeat(-,70)]%r[r(9)]%r[space(4)][rjust(%7,25)]%b|[space(8)]|%b%1%r[r(9)]%r[r(8)]%r[r(9)]%r[space(4)][rjust(%6,25)]%b|[space(8)]|%b%2%r[r(9)]%r[r(8)]%r[r(9)]%r[space(4)][rjust(%5,25)]%b|[space(8)]|%b%3%r[r(9)]%r[r(8)]%r[space(23)][center(%4,25)]
&CPS_FMT_SDEADEND Main Global Funcs=Obvious Exits:%r[setq(8,[repeat(-,30)]+[space(8)]+[repeat(-,30)])][setq(9,[space(30)]|[space(8)]|)][space(23)][center(%0,25)]%r[r(8)]%r[r(9)]%r[space(4)][rjust(%7,25)]%b|[space(8)]|%b%1%r[r(9)]%r[r(8)]%r[r(9)]%r[space(4)][rjust(%6,25)]%b|[space(8)]|%b%2%r[r(9)]%r[r(8)]%r[r(9)]%r[space(4)][rjust(%5,25)]%b|[space(8)]|%b%3%r[r(9)]%r[repeat(-,70)]%r[space(23)][center(%4,25)]
&CPS_FMT_EDEADEND Main Global Funcs=Obvious Exits:%r|[space(22)][center(%0,25)][space(22)]|%r|%b[center(%7,25)][space(17)][center(%1,25)]%b|%r|[space(23)]|[space(21)]|[space(23)]|%r+[repeat(-,23)]+[repeat(-,21)]+[repeat(-,23)]|%r[space(70)]|%r[ljust(%6,25)][space(21)][rjust(%2,24)]|%r[space(70)]|%r+[repeat(-,23)]+[repeat(-,21)]+[repeat(-,23)]|%r|[space(23)]|[space(21)]|[space(23)]|%r|%b[center(%5,25)][space(17)][center(%3,25)]%b|%r|[space(22)][center(%4,25)][space(22)]|
&CPS_FMT_WDEADEND Main Global Funcs=Obvious Exits:%r|[space(22)][center(%0,25)][space(22)]|%r|%b[center(%7,25)][space(17)][center(%1,25)]%b|%r|[space(23)]|[space(21)]|[space(23)]|%r|[repeat(-,23)]+[repeat(-,21)]+[repeat(-,23)]+%r|%r|[ljust(%6,24)][space(21)][rjust(%2,25)]%r|%r|[repeat(-,23)]+[repeat(-,21)]+[repeat(-,23)]+%r|[space(23)]|[space(21)]|[space(23)]|%r|%b[center(%5,25)][space(17)][center(%3,25)]%b|%r|[space(22)][center(%4,25)][space(22)]|
&CPS_FMT_1NDOOR Main Global Funcs=Obvious Exits:%r[switch(%8,,,[space(50)]UP)]%r[setq(8,[space(15)]|[space(38)]|)]%r[space(5)][ljust(%7,15)][space(3)][center(%0,25)][space(3)][rjust(%1,15)]%r[space(15)]+[repeat(-,15)]+[space(6)]+[repeat(-,15)]+%r[r(8)]%r[r(8)]%r[r(8)]%r[r(8)]%r[r(8)]%r[r(8)]%r[r(8)]%r[space(15)]+[repeat(-,38)]+%r[space(5)][ljust(%5,15)][space(31)][rjust(%3,15)]%r%r[switch(%9,,,[space(50)]DOWN)]
&CPS_FMT_1SDOOR Main Global Funcs=Obvious Exits:%r[switch(%8,,,[space(50)]UP)]%r[setq(8,[space(15)]|[space(38)]|)]%r[space(5)][ljust(%7,15)][space(31)][rjust(%1,15)]%r[space(15)]+[repeat(-,38)]+[space(15)]%r[r(8)]%r[r(8)]%r[r(8)]%r[r(8)]%r[r(8)]%r[r(8)]%r[r(8)]%r[space(15)]+[repeat(-,15)]+[space(6)]+[repeat(-,15)]+%r[space(5)][ljust(%5,15)][space(3)][center(%4,25)][space(3)][rjust(%3,15)]%r%r[switch(%9,,,[space(50)]DOWN)]
&CPS_FMT_1WDOOR Main Global Funcs=Obvious Exits:%r[switch(%8,,,[space(50)]UP)]%r[setq(9,[space(15)]+[space(38)]|)][setq(8,[space(15)]|[space(38)]|)]%r[space(5)][ljust(%7,15)][space(31)][rjust(%1,15)]%r[space(15)]+[repeat(-,38)]+[space(15)]%r[r(8)]%r[r(8)]%r[r(9)]%r[space(54)]|%r[space(10)][ljust(%6,25)][space(19)]|%r[space(54)]|%r[r(9)]%r[r(8)]%r[r(8)]%r[space(15)]+[repeat(-,38)]+%r[space(5)][ljust(%5,15)][space(31)][rjust(%3,15)]%r%r[switch(%9,,,[space(50)]DOWN)]
&CPS_FMT_1EDOOR Main Global Funcs=Obvious Exits:%r[switch(%8,,,[space(50)]UP)]%r[setq(9,[space(15)]|[space(38)]+)][setq(8,[space(15)]|[space(38)]|)]%r[space(5)][ljust(%7,15)][space(31)][rjust(%1,15)]%r[space(15)]+[repeat(-,38)]+[space(15)]%r[r(8)]%r[r(8)]%r[r(9)]%r[space(15)]|%r[space(15)]|[space(34)][ljust(%2,25)]%r[space(15)]|%r[r(9)]%r[r(8)]%r[r(8)]%r[space(15)]+[repeat(-,38)]+%r[space(5)][ljust(%5,15)][space(31)][rjust(%3,15)]%r%r[switch(%9,,,[space(50)]DOWN)]
&CPS_FMT_2NEDOOR Main Global Funcs=Obvious Exits:%r[switch(%8,,,[space(50)]UP)]%r[setq(9,[space(15)]|[space(38)]+)][setq(8,[space(15)]|[space(38)]|)]%r[space(5)][ljust(%7,15)][space(3)][center(%0,25)][space(3)][rjust(%1,15)]%r[space(15)]+[repeat(-,15)]+[space(6)]+[repeat(-,15)]+%r[r(8)]%r[r(8)]%r[r(9)]%r[space(15)]|%r[space(15)]|[space(34)][ljust(%2,25)]%r[space(15)]|%r[r(9)]%r[r(8)]%r[r(8)]%r[space(15)]+[repeat(-,38)]+%r[space(5)][ljust(%5,15)][space(31)][rjust(%3,15)]%r%r[switch(%9,,,[space(50)]DOWN)]
&CPS_FMT_2NSDOOR Main Global Funcs=Obvious Exits:%r[switch(%8,,,[space(50)]UP)]%r[setq(8,[space(15)]|[space(38)]|)]%r[space(5)][ljust(%7,15)][space(3)][center(%0,25)][space(3)][rjust(%1,15)]%r[space(15)]+[repeat(-,15)]+[space(6)]+[repeat(-,15)]+%r[r(8)]%r[r(8)]%r[r(8)]%r[r(8)]%r[r(8)]%r[r(8)]%r[space(15)]+[repeat(-,15)]+[space(6)]+[repeat(-,15)]+%r[space(5)][ljust(%5,15)][space(3)][center(%4,25)][space(3)][rjust(%3,15)]%r%r[switch(%9,,,[space(50)]DOWN)]
&CPS_FMT_2NWDOOR Main Global Funcs=Obvious Exits:%r[switch(%8,,,[space(50)]UP)]%r[setq(9,[space(15)]+[space(38)]|)][setq(8,[space(15)]|[space(38)]|)]%r[space(5)][ljust(%7,15)][space(3)][center(%0,25)][space(3)][rjust(%1,15)]%r[space(15)]+[repeat(-,15)]+[space(6)]+[repeat(-,15)]+%r[r(8)]%r[r(8)]%r[r(9)]%r[space(54)]|%r[space(10)][ljust(%6,25)][space(19)]|%r[space(54)]|%r[r(9)]%r[r(8)]%r[r(8)]%r[space(15)]+[repeat(-,38)]+%r[space(5)][ljust(%5,15)][space(31)][rjust(%3,15)]%r%r[switch(%9,,,[space(50)]DOWN)]
&CPS_FMT_2EWDOOR Main Global Funcs=Obvious Exits:%r[switch(%8,,,[space(50)]UP)]%r[setq(9,[space(15)]+[space(38)]+)][setq(8,[space(15)]|[space(38)]|)]%r[space(5)][ljust(%7,15)][space(31)][rjust(%1,15)]%r[space(15)]+[repeat(-,38)]+[space(15)]%r[r(8)]%r[r(8)]%r[r(9)]%r%r[space(10)][ljust(%6,25)][space(15)][ljust(%2,25)]%r%r[r(9)]%r[r(8)]%r[r(8)]%r[space(15)]+[repeat(-,38)]+%r[space(5)][ljust(%5,15)][space(31)][rjust(%3,15)]%r%r[switch(%9,,,[space(50)]DOWN)]
&CPS_FMT_2ESDOOR Main Global Funcs=Obvious Exits:%r[switch(%8,,,[space(50)]UP)]%r[setq(9,[space(15)]|[space(38)]+)][setq(8,[space(15)]|[space(38)]|)]%r[space(5)][ljust(%7,15)][space(31)][rjust(%1,15)]%r[space(15)]+[repeat(-,38)]+[space(15)]%r[r(8)]%r[r(8)]%r[r(9)]%r[space(15)]|%r[space(15)]|[space(34)][ljust(%2,25)]%r[space(15)]|%r[r(9)]%r[r(8)]%r[r(8)]%r[space(15)]+[repeat(-,15)]+[space(6)]+[repeat(-,15)]+%r[space(5)][ljust(%5,15)][space(3)][center(%4,25)][space(3)][rjust(%3,15)]%r%r[switch(%9,,,[space(50)]DOWN)]
&CPS_FMT_2SWDOOR Main Global Funcs=Obvious Exits:%r[switch(%8,,,[space(50)]UP)]%r[setq(9,[space(15)]+[space(38)]|)][setq(8,[space(15)]|[space(38)]|)]%r[space(5)][ljust(%7,15)][space(31)][rjust(%1,15)]%r[space(15)]+[repeat(-,38)]+[space(15)]%r[r(8)]%r[r(8)]%r[r(9)]%r[space(54)]|%r[space(10)][ljust(%6,25)][space(19)]|%r[space(54)]|%r[r(9)]%r[r(8)]%r[r(8)]%r[space(15)]+[repeat(-,15)]+[space(6)]+[repeat(-,15)]+%r[space(5)][ljust(%5,15)][space(3)][center(%4,25)][space(3)][rjust(%3,15)]%r%r[switch(%9,,,[space(50)]DOWN)]
&CPS_FMT_3NEWDOOR Main Global Funcs=Obvious Exits:%r[switch(%8,,,[space(50)]UP)]%r[setq(9,[space(15)]+[space(38)]+)][setq(8,[space(15)]|[space(38)]|)]%r[space(5)][ljust(%7,15)][space(3)][center(%0,25)][space(3)][rjust(%1,15)]%r[space(15)]+[repeat(-,15)]+[space(6)]+[repeat(-,15)]+%r[r(8)]%r[r(8)]%r[r(9)]%r%r[space(10)][ljust(%6,25)][space(15)][ljust(%2,25)]%r%r[r(9)]%r[r(8)]%r[r(8)]%r[space(15)]+[repeat(-,38)]+%r[space(5)][ljust(%5,15)][space(31)][rjust(%3,15)]%r%r[switch(%9,,,[space(50)]DOWN)]
&CPS_FMT_3ESWDOOR Main Global Funcs=Obvious Exits:%r[switch(%8,,,[space(50)]UP)]%r[setq(9,[space(15)]+[space(38)]+)][setq(8,[space(15)]|[space(38)]|)]%r[space(5)][ljust(%7,15)][space(31)][rjust(%1,15)]%r[space(15)]+[repeat(-,38)]+%r[r(8)]%r[r(8)]%r[r(9)]%r%r[space(10)][ljust(%6,25)][space(15)][ljust(%2,25)]%r%r[r(9)]%r[r(8)]%r[r(8)]%r[space(15)]+[repeat(-,15)]+[space(6)]+[repeat(-,15)]+%r[space(5)][ljust(%5,15)][space(3)][center(%4,25)][space(3)][rjust(%3,15)]%r%r[switch(%9,,,[space(50)]DOWN)]
&CPS_FMT_3NESDOOR Main Global Funcs=Obvious Exits:%r[switch(%8,,,[space(50)]UP)]%r[setq(9,[space(15)]|[space(38)]+)][setq(8,[space(15)]|[space(38)]|)]%r[space(5)][ljust(%7,15)][space(3)][center(%0,25)][space(3)][rjust(%1,15)]%r[space(15)]+[repeat(-,15)]+[space(6)]+[repeat(-,15)]%r[r(8)]%r[r(8)]%r[r(9)]%r[space(15)]|%r[space(15)]|[space(34)][ljust(%2,25)]%r[space(15)]|%r[r(9)]%r[r(8)]%r[r(8)]%r[space(15)]+[repeat(-,15)]+[space(6)]+[repeat(-,15)]+%r[space(5)][ljust(%5,15)][space(3)][center(%4,25)][space(3)][rjust(%3,15)]%r%r[switch(%9,,,[space(50)]DOWN)]
&CPS_FMT_3NSWDOOR Main Global Funcs=Obvious Exits:%r[switch(%8,,,[space(50)]UP)]%r[setq(9,[space(15)]+[space(38)]|)][setq(8,[space(15)]|[space(38)]|)]%r[space(5)][ljust(%7,15)][space(3)][center(%0,25)][space(3)][rjust(%1,15)]%r[space(15)]+[repeat(-,15)]+[space(6)]+[repeat(-,15)]+%r[r(8)]%r[r(8)]%r[r(9)]%r[space(54)]|%r[space(10)][ljust(%6,25)][space(19)]|%r[space(54)]|%r[r(9)]%r[r(8)]%r[r(8)]%r[space(15)]+[repeat(-,15)]+[space(6)]+[repeat(-,15)]+%r[space(5)][ljust(%5,15)][space(3)][center(%4,25)][space(3)][rjust(%3,15)]%r%r[switch(%9,,,[space(50)]DOWN)]
&CPS_FMT_4DOOR Main Global Funcs=Obvious Exits:%r[switch(%8,,,[space(50)]UP)]%r[setq(9,[space(15)]+[space(38)]+)][setq(8,[space(15)]|[space(38)]|)]%r[space(5)][ljust(%7,15)][space(3)][center(%0,25)][space(3)][rjust(%1,15)]%r[space(15)]+[repeat(-,15)]+[space(6)]+[repeat(-,15)]+%r[r(8)]%r[r(8)]%r[r(9)]%r%r[space(10)][ljust(%6,25)][space(15)][ljust(%2,25)]%r%r[r(9)]%r[r(8)]%r[r(8)]%r[space(15)]+[repeat(-,15)]+[space(6)]+[repeat(-,15)]+%r[space(5)][ljust(%5,15)][space(3)][center(%4,25)][space(3)][rjust(%3,15)]%r%r[switch(%9,,,[space(50)]DOWN)]
&FMT_2COL_FN Main Global Funcs=[fold(FMT_2AUX_FN,rest(%0),ljust(first(%0),38))]
&FMT_2AUX_FN Main Global Funcs=%0[switch(mod(words(%0),2),0,%r[ljust(%1,38)],[ljust(%1,38)])]
&WILD_WHO_FN Main Global Funcs=[setq(0,iter(%1,name(##),,|))][elements(%1,setdiff(iter(%0,matchall(%q0,##*,|)),0))]
&FIND_WHO_FN Main Global Funcs=[setq(0,iter(%1,findable(%#,##)))][elements(%1,matchall(%q0,1))]
&CUSTOM_WHO_FN Main Global Funcs=ifelse(setr(7,words(%1)),[pemit(%#,[setq(0,default(%0/WHO_FORMAT,v(DEFAULT_WHO_FMT)))][fold(WHO_HDR_FN,%q0,)])][list(sortby(NAME_SORTBY_FN,%1),u(CUSTOM_FMT_FN,%0,##,%q0))][pemit(%#,%xb[repeat(-,78)]%xn%rThere [switch(%q7,1,is 1 character,are %q7 characters)] connected.)],pemit(%#,There are no matching connections.))
&WHO_HDR_FN Main Global Funcs=%0[switch(first(%1,:),SPACE,%xb[repeat(_,rest(%1,:))]_%xn,%xr#$%xn%xb[repeat(_,sub(rest(%1,:),strlen(#$)))]_%xn)]
&CUSTOM_FMT_FN Main Global Funcs=iter(%2,u(FIELD_[first(##,:)]_FN,%1,rest(##,:)))
&DEFAULT_WHO_FMT Main Global Funcs=NAME:16 SEX:3 SPACE:1 LOC:41 SPACE:1 ONFOR:5 IDLE:4
&CUSTOM_FINGER_FN Main Global Funcs=[objeval(%q0,s(edit(first(%0,<),%b,\\\\%b)))][iter(rest(%0,<),[u(FINGER_FMT_FN,first(##,>))][objeval(%q0,s(edit(rest(##,>),%b,\\\\%b)))],<,@@)]
&FINGER_MAP_FN Main Global Funcs=[objeval(%q0,s(edit(mid(%q1,inc(%0),dec(sub(%1,%0))),%b,\\%b)))][u(FINGER_FMT_FN,mid(%q1,inc(%1),add(%2,-%1,-1)))]
&DEFAULT_FINGER_FMT Main Global Funcs=<HBAR:78>%r%xrName:%xn%b <NAME:16> <VBAR:1> %xrLast:%xn %b <LAST:24> <VBAR:1> %xrOnFor:%xn <ONFOR:0>%r%xrAlias:%xn <ALIAS:16> <VBAR:1> %xrMail:%xn %b <MAIL:24> <VBAR:1> %xrIdle:%xn%b <IDLE:0>%r%xrPos:%xn %b <POS:16> <VBAR:1> %xrEmail:%xn%b <EMAIL:24> <VBAR:1> %xrSex:%xn %b <SEX:0>%r<HBAR:78>%r%xrTrue Name:%xn <TRUENAME:67>%r%xrFull Name:%xn <FULLNAME:67>%r%xrLocation:%xn%b <LOC:67>%r%xrOrgs:%xn %b %b %b<ORGS:67>%r%xrURL:%xn %b %b %b <URL:67>%r<HBAR:78>%r<QUOTE:0>%r<HBAR:78>
&FINGER_FMT_FN Main Global Funcs=u(FIELD_[first(%0,:)]_FN,%q0,rest(%0,:))
&DEL_DELIM_FN Main Global Funcs=switch(pos(^,%0),#-1,%0,u(DEL_DELIM_FN,delete(%0,dec(#$),1)))
&FIELD_SPACE_FN Main Global Funcs=space(%1)
&FIELD_NAME_FN Main Global Funcs=ifelse(%1,ljust(strtrunc(u(F_NAME_FN,%0),%1),%1),u(F_NAME_FN,%0))
&F_NAME_FN Main Global Funcs=ansi(ifelse(orflags(%0,WZ),g,n),name(%0))
&FIELD_ALIAS_FN Main Global Funcs=ifelse(%1,ljust(strtrunc(u(F_ALIAS_FN,%0),%1),%1),u(F_ALIAS_FN,%0))
&F_ALIAS_FN Main Global Funcs=default(%0/Alias,)
&FIELD_IDLE_FN Main Global Funcs=ifelse(%1,rjust(u(F_IDLE_FN,%0),%1),u(F_IDLE_FN,%0))
&F_IDLE_FN Main Global Funcs=switch(objeval(%#,idle(%0)),-1,--,u(STR_IDLE_FN,#$))
&STR_IDLE_FN Main Global Funcs=switch(1,gte(%0,3600),[div(%0,3600)]h,gte(%0,60),[div(%0,60)]m,%0s)
&FIELD_ONFOR_FN Main Global Funcs=ifelse(%1,ljust(u(F_ONFOR_FN,%0),%1),u(F_ONFOR_FN,%0))
&F_ONFOR_FN Main Global Funcs=switch(objeval(%#,conn(%0)),-1,Away,u(WHO_ONFOR_FN,#$))
&FIELD_LOC_FN Main Global Funcs=ifelse(%1,ljust(strtrunc(u(F_LOC_FN,%0),%1),%1),u(F_LOC_FN,%0))
&F_LOC_FN Main Global Funcs=ifelse(findable(%#,%0),[push(loc(%0))][name(peek())][ifelse(visible(%#,peek()),%b\([peek()][flags(peek())]/[name(owner(peek()))]\),)][toss()],Unfindable)
&FIELD_SEX_FN Main Global Funcs=ifelse(%1,ljust(u(F_SEX_FN,%0),%1),u(F_SEX_FN,%0))
&F_SEX_FN Main Global Funcs=switch(subj(%0),he,M,she,F,-)
&FIELD_HBAR_FN Main Global Funcs=%xb[repeat(-,%1)]%xn
&FIELD_VBAR_FN Main Global Funcs=%xb[center(|,%1)]%xn
&F_ATTR_FN Main Global Funcs=default(%0/%1,Not Set)
&FIELD_TRUENAME_FN Main Global Funcs=ifelse(%1,ljust(strtrunc(default(%0/TN,name(%0)),%1),%1),default(%0/TN,name(%0)))
&FIELD_FULLNAME_FN Main Global Funcs=ifelse(%1,ljust(strtrunc(u(F_ATTR_FN,%0,FULLNAME),%1),%1),u(F_ATTR_FN,%0,FULLNAME))
&FIELD_URL_FN Main Global Funcs=ifelse(%1,ljust(strtrunc(u(F_ATTR_FN,%0,URL),%1),%1),u(F_ATTR_FN,%0,URL))
&FIELD_EMAIL_FN Main Global Funcs=ifelse(%1,ljust(strtrunc(u(F_ATTR_FN,%0,EMAIL),%1),%1),u(F_ATTR_FN,%0,EMAIL))
&FIELD_POS_FN Main Global Funcs=ifelse(%1,ljust(strtrunc(u(F_ATTR_FN,%0,POS),%1),%1),u(F_ATTR_FN,%0,POS))
&FIELD_LAST_FN Main Global Funcs=ifelse(%1,ljust(strtrunc(u(F_LAST_FN,%0),%1),%1),u(F_LAST_FN,%0))
&F_LAST_FN Main Global Funcs=switch(objeval(%#,conn(%0)),-1,convsecs(get(%0/LASTLOGOUT)),%xc[get(%0/Last)]%xn)
&FIELD_MAIL_FN Main Global Funcs=ifelse(%1,ljust(strtrunc(u(F_MAIL_FN,%0),%1),%1),u(F_MAIL_FN,%0))
&F_MAIL_FN Main Global Funcs=[u(SHORT_MAIL_CHECK_FN,get(%0/MBOX))]
&SHORT_MAIL_CHECK_FN Main Global Funcs=[switch(get(%0/NEW_LIST),,No unread mail.,#-1 NO MATCH,No unread mail.,convsecs(first(get([first(first(#$),-)]/S-[rest(first(#$),-)]))))]
&FIELD_ORGS_FN Main Global Funcs=ifelse(%1,ljust(strtrunc(u(F_ORGS_FN,%0),%1),%1),u(F_ORGS_FN,%0))
&F_ORGS_FN Main Global Funcs=switch(sortby(NAME_SORTBY_FN,filter(SEE_ORG_FN,get(%0/ORGS))),,None,iter(#$,[name(##)]%b))
&SEE_ORG_FN Main Global Funcs=or(hasflag(%0,Haven),member(get(%#/ORGS),%0),visible(%#,%0))
&NAME_SORTBY_FN Main Global Funcs=[comp(name(%0),name(%1))]
&FIELD_QUOTE_FN Main Global Funcs=udefault(%0/QUOTE,No quote set.)
&FIELD_DBREF_FN Main Global Funcs=ifelse(%1,ljust(strtrunc(%0,%1),%1),%0)
&FIELD_FLAGS_FN Main Global Funcs=ifelse(%1,ljust(strtrunc(flags(%0),%1),%1),flags(%0))
&FIELD_SITE_FN Main Global Funcs=ifelse(%1,ljust(strtrunc(u(F_SITE_FN,%0),%1),%1),u(F_SITE_FN,%0))
&F_SITE_FN Main Global Funcs=ifelse(visible(%#,%0),get(%0/LastSite),Unknown)
&FIELD_IC_FN Main Global Funcs=ifelse(%1,ljust(strtrunc(u(F_IC_FN,%0),%1),%1),u(F_IC_FN,%0))
&F_IC_FN Main Global Funcs=ifelse(hasflag(%0,Haven),No,%xcYes%xn)
&Z_RANGE_FN Main Global Funcs=[switch(search([owner(%0)] Room=%1),,switch(parent(%0),#5,,[push(me,iter(setdiff(search(parent=[parent(%0)]),#$),##:[name(##)],,|))][iter(elements(peek(),matchall(pop(),*:%1*,|),|),first(##,:),|,)]),#$)]
&Z_PEOPLE_FN Main Global Funcs=[t(words(setinter(lcon(%0),lwho())))]
&Z_MOVE_FN Main Global Funcs=[setq(0,iter(%1,loc(##),:,))][switch(filter(Z_PEOPLE_FN,%q0),,u(Z_GO_FN,%0,%1,last(%q0)),loc(last(%1,:)),u(Z_GO_FN,%0,%1,last(%q0)),[pemit(%0,Your journey is interrupted midway.)][u(Z_GO_FN,%0,extract(%1,1,member(%q0,first(#$)),:),first(#$))])]
&Z_GO_FN Main Global Funcs=[pemit(%0,u(Z_PRINT_FN,%1,3))][pemit(remove(lcon(loc(%0)),%0),[name(%0)] heads towards the [name(%2)].)][remit(%2,%N comes here from the direction of the [name(loc(%0))].)][tel(%0,%2)]
&ZOOM_FN Main Global Funcs=[switch(%0,%1,pemit(%#,You are already there.),ifelse(u(IS_ENDPT_FN,%1,%2),switch(setr(5,u(Z_PATH_FN,%0,%1,%2)),,pemit(%#,No path found.),u(Z_WEED_FN,%q5,%3)),pemit(%#,That destination is outside this area.)))]
&IS_ENDPT_FN Main Global Funcs=[setq(0,iter(lexits(%1),lexits(loc(##))))][setq(1,iter(%q0,loc(##)))][t(member(iter(elements(%q0,matchall(%q1,%0)),owner(##)),%2))]
&Z_WEED_FN Main Global Funcs=[switch(trim(iter(%0,ifelse(member(map(Z_LOCK_FN,##,:),0,:),,##))),,pemit(%#,The shortest paths are inaccessible.),u(Z_PRINT_FN,#$,%1))]
&Z_LOCK_FN Main Global Funcs=[elock(%0,%#)]
&Z_PRINT_FN Main Global Funcs=[switch(%1,1,iter(%0,u(ZP_COMMA_FN,##,#@)),2,iter(%0,u(ZP_FULL_FN,##,#@)),3,u(ZP_WALK_FN,%0),%0)]
&ZP_COMMA_FN Main Global Funcs=%rPath %1: [edit(iter(%0,u(ENAME_FN,##),:,|),|,\,%b)]
&ZP_FULL_FN Main Global Funcs=%rPath %1: [u(ZP_GEN_FN,%0)]
&ZP_GEN_FN Main Global Funcs=%xc[u(ENAME_FN,first(%0,:))]%xn (to [name(loc(first(%0,:)))])[switch(rest(%0,:),,,\,[iter(#$,%b%xc[u(ENAME_FN,##)]%xn \(to [name(loc(##))]\),:,\\,)])]
&ZP_WALK_FN Main Global Funcs=You head the following way: [u(ZP_GEN_FN,%0)].
&ENAME_FN Main Global Funcs=[switch(trim(iter(N S E W NE SE NW SW U D,grab(fullname(%0),##,;))),,name(%0),first(#$))]
&Z_PATH_FN Main Global Funcs=[setq(9,%2)][setq(0,%0)][setq(8,iter(lexits(%0),switch(owner(##),%q9,##,)))][setq(7,iter(%q8,loc(##)))][switch(member(%q7,%1),0,u(EXP_PATH_FN,%q8,%1),extract(%q8,#$,1))]
&EXP_PATH_FN Main Global Funcs=[switch(matchall(iter(setr(4,setunion(map(GEN_PATH_FN,%0),)),[setq(0,%q0 [setr(5,loc(last(##,:)))])]%q5),%1),,switch(%q4,%0,,u(EXP_PATH_FN,%q4,%1)),elements(%q4,#$))]
&GEN_PATH_FN Main Global Funcs=[iter(lexits(loc(last(%0,:))),switch(owner(##),%q9,ifelse(member(%q0,loc(##)),,%0:##),))]
&NAME_FN Main Global Funcs=[name(%0)] \(%0[flags(%0)]/[name(owner(%0))]\)
&HOURLY_TRIG Main Global Funcs=@dolist v(HOURLY_LIST)=@trig ##; @wait sub(3600,mod(secs(),3600))=@trig me/HOURLY_TRIG
&HOURLY_LIST Main Global Funcs=#9/MT_CLEAN_TRIG
&MT_MAKE_FN Main Global Funcs=[setq(0,rest(first(shuffle(lattr(%1/MNAME_*))),_))][setq(1,get(%1/MNAME_%q0))][setq(2,get(%1/MPROP_%q0))][setq(3,v(DEP_PROP_REGEXP))][setq(5,)][setq(6,)][null(iter(%q2,ifelse(regmatch(##,%q3),setq(6,%q6 ##),setq(5,%q5 ##))))][setq(8,)][setq(7,trim([iter(%q5,##:[first(shuffle(get(%1/P_##),|),|)],,|)]|[iter(%q6,[first(##,-)]:[switch(rest(grab(%q8,[rest(##,-)]:*),:),,[setq(3,get(%1/P_[first(##,-)]))][setq(4,first(shuffle(lnum(1,words(%q3,|)))))][extract(%q3,%q4,1,|)][setq(8,%q8 [rest(##,-)]:%q4)],extract(get(%1/P_[first(##,-)]),#$,1,|))],,|)],b,|))][u(MT_BUILD%3_FN,%0,%1,%2,%q0,%q1,%q7)]
&DEP_PROP_REGEXP Main Global Funcs=^.+\-[0-9]+$
&MT_BUILD0_FN Main Global Funcs=Name: [u(MT_SUB_FN,%4,%5)]%rDesc: [u(MT_SUB_FN,get(%1/MDESC_%3),%5)][switch(%q5,,,%rProperties:[iter(%5,%r %b [first(##,:)] : [rest(##,:)],|,)])]
&MT_BUILD1_FN Main Global Funcs=[setq(0,u(MT_SUB_FN,%4,%5))][ifelse(member(iter(%2,name(loc(##)),|,|),%q0,|),Please try again. The random room generator came up with an existing room name.,ifelse([setq(1,loc(%0))][setq(2,owner(%q1))][setr(3,objeval(%q2,create(%q0,10,r)))],The new room is the %q0.[setq(6,u(MT_EXIT_FN,%q0))][setq(4,objeval(%q1,create(%q6,10,e)))][objeval(%q2,link(%q4,%q3))][setq(5,objeval(%q3,create(Out;o,10,e)))][objeval(%q2,link(%q5,%q1))][set(%q3,STD:[ulocal(MT_SUB_FN,get(%1/MDESC_%3),%5)])][set(%q4,Succ:You enter the %q0.)][set(%q4,OSucc:enters the %q0.)][set(%q4,ODrop:enters from the [name(%q1)].)][set(%q5,Succ:You leave.)][set(%q5,OSucc:leaves.)][set(%q5,ODrop:leaves the %q0.)][set(%q3,META_CREATE:%q1:%0:[secs()])][set(%q9,MT_%q1:[trim(%2 %q4)])][force(me,@parent %q3=[parent(%q1)])],Unable to build room. Builder for this area may be out of quota. Please consult a staff member for assistance.))]
&MT_EXIT_FN Main Global Funcs=%0;[push(edit(iter(%0,left(##,1)),%b,))][ifelse(match(N S E W NE SE NW SW U D L I,peek()),[left(first(%0),2)][edit(iter(rest(%0),left(##,1)),%b,)][toss()],pop())]
&MT_SUB_FN Main Global Funcs=[setq(0,edit(%0,%b,|))][null(iter(matchall(%0,$*),setq(0,replace(%q0,##,[ifelse(regmatch([null(regmatch(extract(%0,##,1),v(SUBSTR_REGEXP),-1 1 2))]%q1,v(SUBCAP_REGEXP)),capstr(rest(grab(%1,%q1:*,|),:)),rest(grab(%1,%q1:*,|),:))]%q2,|))))][edit(%q0,|,%b)]
&SUBCAP_REGEXP Main Global Funcs=^[A-Z]+
&SUBSTR_REGEXP Main Global Funcs=^\$([A-z0-9_]+)(.*)
&MT_CLEAN_TRIG Main Global Funcs=@dolist [setq(9,%vd)][setq(8,lwho())][setq(0,iter(lattr(%q9/MT_*),u(MT_CHECK_FN,rest(##,_),get(%q9/##))))][null(iter(%q1,set(%q9,MT_##:[setdiff(get(%q9/MT_##),%q2)])))][null(mix(MT_TELOUT_FN,%q0,%q1))]%q0=@destroy/override ##
&MT_TELOUT_FN Main Global Funcs=[iter(lcon(%0),tel(##,%1))]
&MT_CHECK_FN Main Global Funcs=[switch(trim(iter(%1,ifelse(u(MT_EMPTY_FN,setr(7,loc(##)),%0),%q7[setq(2,%q2 ##)],))),,,#$[setq(1,%q1 %0)])]
&MT_EMPTY_FN Main Global Funcs=[setq(6,get(%0/META_CREATE))][and(words(%q6),gt(sub(secs(),last(%q6,:)),900),not(words(setinter(lcon(%0),%q8))),strmatch(%1,first(%q6,:)))]
&HELP_SEARCH_FN Main Global Funcs=[setq(0,#8)][setq(1,%0)][setq(2,filter(GREP_FN,lattr(#8/HELP_*)))][switch(%q2,,There are no help topic which contain the string '%0'.,Help topics containing the string '%0':%r%r[edit(u(FMT_3COL_FN,sort(iter(%q2,capstr(lcstr(rest(##,_)))))),_,%b)])]
&SPEECHCMD_LIST Main Global Funcs=say:#55/DO_SAY ":#55/DO_QUOTE pose:#55/DO_POSE pose:#55/DO_POSE_NOSP ;:#55/DO_SEMI
&PCREATE_DATA Main Global Funcs=#54
@set Main Global Funcs=HALTED
@set Main Global Funcs=SAFE


=================================+++++================================

@@DBC> Now working with object #11, name: Mailer
@create Mailer=10
&IS_PLAYER Mailer=[hastype(%#,PLAYER)]
@lock/UseLock Mailer=IS_PLAYER/1
&DO_SET_MAIL_OPTION Mailer=$+set mail option *=*: @pemit %#=[ifelse(setr(0,get(%#/MBOX)),,[u(CREATE_MBOX_FN,%#,0)])][switch(%0:[u(OK_%0_OPT_FN,%1)],autoforward:0,You can only forward mail to valid players.,autoforward:1,Your mail will [switch(%1,,no longer be forwarded[set(%q0,FORWARD_TO:)],now be forwarded to [set(%q0,FORWARD_TO:[switch(%1,,,iter(%1,num(*##)))])][null(iter(filter(NOBOX_FILT_FN,get(%q0/FORWARD_TO)),u(CREATE_MBOX_FN,##,8)))][u(COMMA_LIST_FN,iter(%1,name(*##)))])].,delete:0,Your delete option must be 'soft' or 'hard'.,space:0,Your space option must be 'space' or 'return'.,format:0,Your format option must be 'standard' or 'compact'.,*:1,Your [lcstr(%0)] option has been set to '[lcstr(%1)]'.[set(%#,MAIL_CONFIG_OPTIONS:[setunion(get(%#/MAIL_CONFIG_OPTIONS),lcstr(%1))])],That is not a valid mail option.)]
&DO_ADD_PA Mailer=$+add personal alias *=*: @pemit %#=switchall([setq(0,get(%#/MBOX))][u(SEND_STATUS_FN,%#)]:[lattr(%q0/ALIAS_%0)],NEED_BOX~*:*,u(CREATE_MBOX_FN,%#,0),*:ALIAS_%0,You already have an alias called '[lcstr(%0)]'.,Alias added. [set(%q0,ALIAS_%0:[setq(1,map(RAW2LIST_FN,%1))][edit(%q1,#-1,)])][setq(2,u(LIST_ERR_FN,%q1,%1))][switch(%q2,,,Unknown addresses: %q2)])
&DO_REMOVE_PA Mailer=$+remove personal alias *: @pemit %#=switch([setr(0,get(%#/MBOX))]:[lattr(%q0/ALIAS_%0)],:*,No such alias to remove.,*:ALIAS_%0,Alias removed.[set(%q0,ALIAS_%0:)],No such alias to remove.)
&DO_EXPAND_PA Mailer=$+expand personal alias *: @pemit %#=[setq(0,get(%#/MBOX))][setq(1,get(%q0/ALIAS_%0))][switch(%q0:%q1,:*,No such alias to expand.,*:,No such alias to expand.,Personal mail alias '[lcstr(%0)]' expands to: [u(LIST_PRINT_FN,%q1)])]
&DO_LIST_PA Mailer=$+list personal aliases: @pemit %#=[setq(0,get(%#/MBOX))][setq(1,lattr(%q0/ALIAS_*))][switch(%q0:%q1,:*,You have no personal mail aliases defined.,*:,You have no personal mail aliases defined.,Personal mail aliases: [lcstr(sort(iter(%q1,rest(##,_))))])]
&DO_LIST_GA Mailer=$+list global aliases: @pemit %#=[setq(0,lattr(v(DATA_OBJ)/ALIAS_*))][switch(%q0,,There are no global mail aliases defined.,Global mail aliases: [lcstr(sort(iter(%q0,rest(##,_))))])]
&DO_ADD_GA Mailer=$+add global alias *=*: @pemit %#=switch([hasflag(%#,wizard)]:[lattr(v(DATA_OBJ)/ALIAS_%0)],0:*,Permission denied.,1:,Global alias added. [set(v(DATA_OBJ),ALIAS_%0:[setq(0,get(%#/MBOX))][setq(1,map(RAW2LIST_FN,%1))][edit(%q1,#-1,)])][setq(2,u(LIST_ERR_FN,%q1,%1))][switch(%q2,,,Unknown addresses: %q2)],The global mail alias '[lcstr(%0)]' already exists.)
&DO_REMOVE_GA Mailer=$+remove global alias *: @pemit %#=switch([hasflag(%#,wizard)]:[lattr(v(DATA_OBJ)/ALIAS_%0)],0:*,Permission denied.,1:ALIAS_%0,Global mail alias '[lcstr(%0)]' removed.[set(v(DATA_OBJ),ALIAS_%0:)],No such global mail alias to remove.)
&DO_EXPAND_GA Mailer=$+expand global alias *: @pemit %#=[setq(0,get(%#/MBOX))][setq(1,get(v(DATA_OBJ)/ALIAS_%0))][switch(%q1,,No such alias to expand.,Global mail alias '[lcstr(%0)]' expands to: [u(LIST_PRINT_FN,%q1)])]
&DO_MAIL_STATUS_FOR Mailer=$+mail status for *: @pemit %#=[setq(0,get(*%0/MBOX))][switch([hasflag(%#,wizard)]:[num(*%0)]:%q0,0:*:*,Permission denied.,1:#-1:*,No such player.,1:*:,[name(*%0)] does not have a mailbox.,{Mail Status for [name(*%0)] \(mailbox %q0\):%r[u(MBOX_STATUS_FN,%q0,get(*%0/MAIL_CONFIG_OPTIONS))]})]
&DO_MAIL_STATUS Mailer=$+mail status: @pemit %#=[setq(0,get(%#/MBOX))][switch(%q0,,You do not have a mailbox.,Mailbox Status%r[u(MBOX_STATUS_FN,%q0,get(%#/MAIL_CONFIG_OPTIONS))])]
&DO_MAIL_STATUS_REPORT Mailer=$+mail status report: @switch hasflag(%#,wizard)=0, {@pemit %#=Permission denied.}, {@pemit %#=[setq(0,lcon(v(STORAGE_OBJ)))][setq(1,words(%q0))][u(MS_REPORT_HDR)][map(MS_REPORT_FN,extract(%q0,1,40))]; @dolist switch(lt(%q1,41),1,,rest(lnum(add(div(%q1,40),1))))={@pemit %#=after(map(MS_REPORT_FN,extract(%q0,add(mul(##,40),1),40)),%r)}}
&DO_MAIL_DEFAULTS Mailer=$+mail defaults: @pemit %#=[repeat(-,78)]%r[center(Mail Defaults,78)]%r[repeat(-,78)]%r%r[ljust(Delete option:,20)] [v(OPTION_DELETE)]%r[ljust(Format option:,20)] [v(OPTION_FORMAT)]%r[ljust(Space option:,20)] [switch(s(%vs),%b,space,%r,return,%vs)]%r[ljust(Haven-Mail status:,20)] [v(HAVEN_MAIL)]%r%r[ljust(Expiration Time:,20)] [u(TIME_FMT_FN,v(RETRACT_TIME))]%r[ljust(Mail Quotas:,20)] [v(QUOTA_MAIL)]%r[ljust(Max Unread:,20)] [get(v(MBOX_OBJ)/MAX_UNREAD)]%r[ljust(Max Read:,20)] [get(v(MBOX_OBJ)/MAX_READ)]%r[switch(v(DASH_MSG),,,%r[ljust(Dash-Message:,20)] [v(DASH_MSG)])]%r[ljust(Mail-Enter:,20)] [v(DFL_MAIL_ENTER)]%r[ljust(Mail-Send:,20)] [v(DFL_MAIL_SEND)]%r[ljust(Mail-Deliver:,20)] [v(DFL_MAIL_DELIVER)]%r[ljust(Mail-Toss:,20)] [v(DFL_MAIL_TOSS)]%r[ljust(Mail-Note:,20)] [v(DFL_MAIL_NOTE)]%r%r[ljust(Current mailboxes:,20)] [words(lcon(v(STORAGE_OBJ)))]%r[ljust(Global aliases:,20)] [words(lattr(v(DATA_OBJ)/ALIAS_*))]%r%r[repeat(-,78)]
&DO_MAIL Mailer=$+mail *=*: @pemit %#=switchall([setq(0,get(%#/MBOX))][u(QSEND_STATUS_FN,%#)],IN_PROG,v(IN_PROG_ERR),OVER_QUOTA,v(OVER_QUOTA_ERR),NEED_BOX~SEND,u(CREATE_MBOX_FN,%#,0),*~SEND,[setq(0,get(%#/MBOX))][set(%q0,MSG_TO:[setq(1,map(RAW2LIST_FN,secure(%0)))][setq(9,edit(%q1,#-1,))][switch(%q9,,%#,%q9)])][set(%q0,MSG_SUBJECT:[trim(%1)])][u(u(NFY_MAIL_FN,%#,%l,ENTER),%#)][setq(2,u(LIST_ERR_FN,%q1,secure(%0)))][switch(%q2,,,%rUnknown addresses: %q2)])
&DO_FORWARD Mailer=$+forward *=*: @pemit %#=switch([setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(2,u(GET_RANGE_FN,%1,%q0,%q1))][u(QSEND_STATUS_FN,%#)]:[words(%q2)],IN_PROG:*,v(IN_PROG_ERR),OVER_QUOTA:*,v(OVER_QUOTA_ERR),*:0,u(NO_MSGS_ERR,%1),*:1,[set(%q0,MSG_TO:[setq(3,map(RAW2LIST_FN,%0))][setq(9,edit(%q3,#-1,))][switch(%q9,,%#,%q9)])][set(%q0,MSG_SUBJECT:Fwd: [setq(4,first(%q2,-))][setq(5,rest(%q2,-))][setq(6,get(%q4/S-%q5))][setq(7,get(%q4/R-%q5))][rest(%q6,!)])][set(%q0,MSG_TEXT:Forwarded message from [name(get(%q4/PLAYER))] at [convsecs(first(%q6))]:%r[space(8)]----------%r[ljust(To:,10)] [u(LIST_PRINT_FN,first(%q7,!))][u(EXIST_PRINT_FN,Cc:,extract(%q7,2,1,!))]%rText:%r[get(%q4/M-%q5)]%r[space(8)]----------%r)][u(u(NFY_MAIL_FN,%#,%l,ENTER),%#)][setq(8,u(LIST_ERR_FN,%q3,%0))][switch(%q8,,,%rUnknown addresses: %q8)],You can only forward one message at a time.)
&DO_REPLY Mailer=$+reply: @pemit %#=switch([setq(0,get(%#/MBOX))][setq(1,extract(get(%q0/RECV_LIST),get(%q0/CURR_NUM),1))][u(QSEND_STATUS_FN,%#)]:%q1,IN_PROG:*,v(IN_PROG_ERR),OVER_QUOTA:*,v(OVER_QUOTA_ERR),*:,No current message to reply to.,[set(%q0,MSG_TO:[setq(2,first(%q1,-))][setq(3,rest(%q1,-))][get(%q2/PLAYER)])][set(%q0,MSG_SUBJECT:[setq(4,rest(get(%q2/S-%q3),!))][switch(%q4,Re: *,%q4,Re: %q4)])][u(u(NFY_MAIL_FN,%#,%l,ENTER),%#)])
&DO_REPLY_RANGE Mailer=$+reply *: @pemit %#=switch([setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(2,u(GET_RANGE_FN,%0,%q0,%q1))][u(QSEND_STATUS_FN,%#)]:[words(%q2)],IN_PROG:*,v(IN_PROG_ERR),OVER_QUOTA:*,v(OVER_QUOTA_ERR),*:0,u(NO_MSGS_ERR,%0),*:1,[set(%q0,MSG_TO:[setq(3,first(%q2,-))][setq(4,rest(%q2,-))][get(%q3/PLAYER)])][set(%q0,MSG_SUBJECT:[setq(5,rest(get(%q3/S-%q4),!))][switch(%q5,Re: *,%q5,Re: %q5)])][u(u(NFY_MAIL_FN,%#,%l,ENTER),%#)],You can only reply to one message at a time.)
&DO_REPLYALL_RANGE Mailer=$+replyall *: @pemit %#=switch([setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(2,u(GET_RANGE_FN,%0,%q0,%q1))][u(QSEND_STATUS_FN,%#)]:[words(%q2)],IN_PROG:*,v(IN_PROG_ERR),OVER_QUOTA:*,v(OVER_QUOTA_ERR),*:0,v(MSGS_ERR),*:1,[set(%q0,MSG_TO:[setq(3,first(%q2,-))][setq(4,rest(%q2,-))][setq(5,get(%q3/R-%q4))][get(%q3/PLAYER)] [first(%q5,!)])][set(%q0,MSG_CC:[extract(%q5,2,1,!)])][set(%q0,MSG_SUBJECT:[setq(5,rest(get(%q3/S-%q4),!))][switch(%q5,Re: *,%q5,Re: %q5)])][u(u(NFY_MAIL_FN,%#,%l,ENTER),%#)],You can only reply to one message at a time.)
&DO_REPLYALL Mailer=$+replyall: @pemit %#=switch([setq(0,get(%#/MBOX))][setq(1,extract(get(%q0/RECV_LIST),get(%q0/CURR_NUM),1))][u(QSEND_STATUS_FN,%#)]:%q1,IN_PROG:*,v(IN_PROG_ERR),OVER_QUOTA:*,v(OVER_QUOTA_ERR),*:,No current message to reply to.,[set(%q0,MSG_TO:[setq(2,first(%q1,-))][setq(3,rest(%q1,-))][setq(4,get(%q2/R-%q3))][get(%q2/PLAYER)] [first(%q4,!)])][set(%q0,MSG_CC:[extract(%q4,2,1,!)])][set(%q0,MSG_SUBJECT:[setq(4,rest(get(%q2/S-%q3),!))][switch(%q4,Re: *,%q4,Re: %q4)])][u(u(NFY_MAIL_FN,%#,%l,ENTER),%#)])
&DO_DASH Mailer=$-*: @pemit %#=[setq(0,get(%#/MBOX))][setq(9,switch([u(SEND_STATUS_FN,%#)]:[strmatch(%0,-)],*:1,-,IN_PROG:0,MSG_TEXT,!))][null(set(%q0,%q9:[switch(lattr(%q0/MSG_TEXT),,%0,[get(%q0/MSG_TEXT)][u(SEP_FN,get(%#/MAIL_CONFIG_OPTIONS))]%0)]))][switch(%q9:[gte(strlen(get(%q0/MSG_TEXT)),3500)]:[v(DASH_MSG)],-:*:*,,!:*:*,v(NOT_IN_PROG_ERR),*:1:*,v(LENGTH_MSG),*:0:?*,v(DASH_MSG))]
&DO_DASHDASH Mailer=$--: @fo %#=+send
&DO_TOSS Mailer=$+toss: @pemit %#=switch([setq(0,get(%#/MBOX))][u(SEND_STATUS_FN,%#)],IN_PROG,[wipe(%q0/MSG_*)][u(u(NFY_MAIL_FN,%#,%l,TOSS),%#)],v(NOT_IN_PROG_ERR))
&DO_CC Mailer=$+cc *: @pemit %#=[setq(0,get(%#/MBOX))][setq(9,switch(u(SEND_STATUS_FN,%#),IN_PROG,MSG_CC,!))][null(set(%q0,%q9:[setq(8,secure(%0))][setq(1,map(RAW2LIST_FN,%q8))][edit(%q1,#-1,)]))][switch(%q9,!,v(NOT_IN_PROG_ERR),Carbon copy set.[setq(2,u(LIST_ERR_FN,%q1,%q8))][switch(%q2,,,%rUnknown addresses: %q2)])]
&DO_BCC Mailer=$+bcc *: @pemit %#=[setq(0,get(%#/MBOX))][setq(9,switch(u(SEND_STATUS_FN,%#),IN_PROG,MSG_BCC,!))][null(set(%q0,%q9:[setq(8,secure(%0))][setq(1,map(RAW2LIST_FN,%q8))][edit(%q1,#-1,)]))][switch(%q9,!,v(NOT_IN_PROG_ERR),Blind carbon copy set.[setq(2,u(LIST_ERR_FN,%q1,%q8))][switch(%q2,,,%rUnknown addresses: %q2)])]
&DO_EDIT Mailer=$+edit *=*/*: @pemit %#=switch([setq(0,get(%#/MBOX))][u(SEND_STATUS_FN,%#)]:[member(text subject to cc bcc,lcstr(%0))],IN_PROG:0,v(NO_PART_ERR),IN_PROG:*,[set(%q0,MSG_%0:[switch(%0,text,edit(get(%q0/MSG_TEXT),%1,%2),subject,edit(get(%q0/MSG_SUBJECT),secure(%1),secure(%2)),map(RAW2LIST_FN,u(EDIT_TO_FN,%#,get(%q0/MSG_%0),%1,%2)))])][u(PROOF_FN,%#)],v(NOT_IN_PROG_ERR))
&DO_PROOF Mailer=$+proof: @pemit %#=[setq(0,get(%#/MBOX))][switch(u(SEND_STATUS_FN,%#),IN_PROG,u(PROOF_FN,%#),v(NOT_IN_PROG_ERR))]
&DO_SEND Mailer=$+send: @eval switch([setq(0,get(%#/MBOX))][u(SEND_STATUS_FN,%#)]:[setq(9,[get(%q0/MSG_TO)] [get(%q0/MSG_CC)] [get(%q0/MSG_BCC)])][gt(words(%q9),v(MAX_MAILTO))],IN_PROG:0,[null(iter([setq(1,u(LIST2DEST_FN,%q9))][filter(NOBOX_FILT_FN,%q1)],u(CREATE_MBOX_FN,##,8)))][u(SEND_MSG_FN,%#,%q0,add(u(LAST_SENT_FN,%q0),1),%q1,iter(%q1,get(##/MBOX)),%l)],IN_PROG:1,pemit(%#,A message cannot have more than [v(MAX_MAILTO)] recipients.),pemit(%#,v(NOT_IN_PROG_ERR)))
&DO_BOUNCE Mailer=$+bounce *=*: @pemit %#=switch([setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(2,u(GET_RANGE_FN,%1,%q0,%q1))][u(SEND_STATUS_FN,%#)]:[words(%q2)],IN_PROG:*,v(IN_PROG_ERR),*:0,u(NO_MSGS_ERR,%1),*:1,[setq(7,map(RAW2LIST_FN,%0))][setq(4,u(LIST_ERR_FN,%q7,secure(%0)))][switch(%q4,,,pemit(%#,Unknown addresses: %q4))][null(iter([setq(8,edit(%q7,#-1,))][setq(9,switch(%q8,,%#,%q8))][setq(6,filter(NOT_HAS_MSG_FN,u(LIST2DEST_FN,%q9)))][filter(NOBOX_FILT_FN,%q6)],u(CREATE_MBOX_FN,##,7)))][u(BOUNCE_MSG_FN,%#,first(%q2,-),rest(%q2,-),%q6,iter(%q6,get(##/MBOX)),%l,%q9)],You can only bounce one message at a time.)
&DO_RESEND Mailer=$+resend letter *=*: @pemit %#=switch([setq(0,get(%#/MBOX))][setq(1,u(SENT_LIST_FN,%q0))][setq(3,extract(%q1,%0,1))][setq(2,%q0-%q3)][u(SEND_STATUS_FN,%#)]:[words(%q3)]=IN_PROG:*,v(IN_PROG_ERR),*:1,[setq(7,map(RAW2LIST_FN,%1))][setq(4,u(LIST_ERR_FN,%q7,secure(%1)))][switch(%q4,,,pemit(%#,Unknown addresses: %q4))][null(iter([setq(8,edit(%q7,#-1,))][setq(9,switch(%q8,,%#,%q8))][setq(6,filter(NOT_HAS_MSG_FN,u(LIST2DEST_FN,%q9)))][filter(NOBOX_FILT_FN,%q6)],u(CREATE_MBOX_FN,##,7)))][u(RESEND_MSG_FN,%#,%q0,%q3,%q6,iter(%q6,get(##/MBOX)),%l,%q9)],That is not a valid letter.)
&DO_NOTE Mailer=$+note *: @pemit %#=switchall([setq(0,get(%#/MBOX))][u(QSEND_STATUS_FN,%#)],IN_PROG,v(IN_PROG_ERR),OVER_QUOTA,v(OVER_QUOTA_ERR),NEED_BOX~SEND,u(CREATE_MBOX_FN,%#,0),*~SEND,[setq(0,get(%#/MBOX))][setq(1,add(u(LAST_SENT_FN,%q0),1))][set(%q0,P-%q1:%q0)][set(%q0,R-%q1:%#!!!1)][set(%q0,S-%q1:[secs()]![switch(%0,*=*,trim(first(%0,=)),Personal Note)])][set(%q0,M-%q1:[trim(switch(%0,*=*,rest(%0,=),%0))])][set(%q0,RECV_LIST:[get(%q0/RECV_LIST)] %q0-%q1)][set(%q0,NEW_LIST:[get(%q0/NEW_LIST)] %q0-%q1)][u(u(NFY_MAIL_FN,%#,%l,NOTE),%#)])
&DO_SKIM Mailer=$+skim: @pemit %#=[setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(9,words(%q1))][switch(%q0:%q9,:*,You have no mail.,*:0,You have no mail.,[setq(5,u(MAILOPT_FN,get(%#/MAIL_CONFIG_OPTIONS),standard,compact,format))][u(SKIM_%q5_HDR)][map(SKIM_FN,extract(%q1,1,40))][switch(%q5:[lte(%q9,40)],standard:1,%r%r[repeat(=,78)])])]; @dolist switch(lt(%q9,41),1,,rest(lnum(add(div(%q9,40),1))))={@pemit %#=after([map(SKIM_FN,extract(%q1,add(mul(##,40),1),40))][switch(%q5:[lte(%q9,mul(##,40))],standard:1,%r%r[repeat(=,78)])],%r)}
&DO_SKIM_RANGE Mailer=$+skim *: @pemit %#=[setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(9,u(GET_RANGE_FN,%0,%q0,%q1))][setq(7,words(%q9))][switch(%q7,0,u(NO_MSGS_ERR,%0),[setq(5,u(MAILOPT_FN,get(%#/MAIL_CONFIG_OPTIONS),standard,compact,format))][u(SKIM_%q5_HDR)][map(SKIM_FN,extract(%q9,1,40))][switch(%q5:[lte(%q7,40)],standard:1,%r%r[repeat(=,78)])])]; @dolist switch(lt(%q7,41),1,,rest(lnum(add(div(%q7,40),1))))={@pemit %#=after([map(SKIM_FN,extract(%q9,add(mul(##,40),1),40))][switch(%q5:[lte(%q7,mul(##,40))],standard:1,%r%r[repeat(=,78)])],%r)}
&DO_READ Mailer=$+read: @pemit %#=[setq(0,get(%#/MBOX))][setq(1,words(get(%q0/RECV_LIST)))][setq(2,words(get(%q0/NEW_LIST)))][switch(%q0:%q1:%q2,:*:*,There is no mail in your mailbox.,*:0:*,There is no mail in your mailbox.,*:*:0,You do not have unread mail \(%q1 messages remain\).,You have %q2 unread mail message\(s\) out of a total of %q1.)]
&DO_READ_RANGE Mailer=$+read *: @switch/first [setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(9,u(GET_RANGE_FN,%0,%q0,%q1))]%q9=, {@pemit %#=u(NO_MSGS_ERR,%0)},#-1 NO MATCH, {@pemit %#=u(NO_MSGS_ERR,%0)}, {@dolist [setq(6,u(MAILOPT_FN,get(%#/MAIL_CONFIG_OPTIONS),standard,compact,format))]%q9=@pemit %#=u(READ_%q6_FN,##); &NEW_LIST %q0=setinter(setdiff(get(%q0/NEW_LIST),%q9),%q1); &CURR_NUM %q0=member(%q1,extract(%q9,words(%q9),1))}
&DO_MARK Mailer=$+mark: @switch/first [setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(2,get(%q0/CURR_NUM))][setq(3,extract(%q1,%q2,1))][or(strmatch(%q0,),strmatch(%q1,))]=1, {@pemit %#=You have no mail.}, {&MARK_LIST %q0=setinter(setunion(get(%q0/MARK_LIST),%q3),%q1); @pemit %#=Message %q2 (current) marked.}
&DO_MARK_RANGE Mailer=$+mark *: @switch/first [setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(9,u(GET_RANGE_FN,%0,%q0,%q1))][or(strmatch(%q0,),strmatch(%q9,))]=1, {@pemit %#=u(NO_MSGS_ERR,%0)}, {&MARK_LIST %q0=setinter(setunion(get(%q0/MARK_LIST),%q9),%q1); @pemit %#=Message(s) [u(COMMA_LIST_FN,sort(iter(%q9,member(%q1,##))))][u(CRITERION_FN,%0)] marked.}
&DO_UNMARK Mailer=$+unmark: @switch/first [setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(2,get(%q0/CURR_NUM))][setq(3,extract(%q1,%q2,1))][or(strmatch(%q0,),strmatch(%q1,))]=1, {@pemit %#=You have no mail.}, {&MARK_LIST %q0=setinter(remove(get(%q0/MARK_LIST),%q3),%q1); @pemit %#=Message %q2 (current) marked.}
&DO_UNMARK_RANGE Mailer=$+unmark *: @switch/first [setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(9,u(GET_RANGE_FN,%0,%q0,%q1))][or(strmatch(%q0,),strmatch(%q9,))]=1, {@pemit %#=u(NO_MSGS_ERR,%0)}, {&MARK_LIST %q0=setinter(setdiff(get(%q0/MARK_LIST),%q9),%q1); @pemit %#=Message(s) [u(COMMA_LIST_FN,sort(iter(%q9,member(%q1,##))))][u(CRITERION_FN,%0)] unmarked.}
&DO_TAG Mailer=$+tag *: @switch/first [setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(2,get(%q0/CURR_NUM))][setq(3,extract(%q1,%q2,1))][pos(=,%0)]:[or(strmatch(%q0,),strmatch(%q1,))]=#-1:1, {@pemit %#=You have no mail.},#-1:0, {&TAG_%0 %q0=setinter(setunion(get(%q0/TAG_%0),%q3),%q1); @pemit %#=Message %q2 (current) marked with tag '[lcstr(%0)]'.}
&DO_TAG_RANGE Mailer=$+tag *=*: @switch/first [setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(9,u(GET_RANGE_FN,%0,%q0,%q1))][or(strmatch(%q0,),strmatch(%q9,))]=1, {@pemit %#=u(NO_MSGS_ERR,%0)}, {&TAG_%1 %q0=setinter(setunion(get(%q0/TAG_%1),%q9),%q1); @pemit %#=Message(s) [u(COMMA_LIST_FN,sort(iter(%q9,member(%q1,##))))][u(CRITERION_FN,%0)] marked with tag '[lcstr(%1)]'.}
&DO_UNTAG Mailer=$+untag *: @switch/first [setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(2,get(%q0/CURR_NUM))][setq(3,extract(%q1,%q2,1))][pos(=,%0)]:[or(strmatch(%q0,),strmatch(%q1,))]:[member(get(%q0/TAG_%0),%q3)]=#-1:1:*, {@pemit %#=You have no mail.},#-1:0:0, {@pemit %#=Message %q2 (current) is not tagged with '[lcstr(%0)]'.},#-1:0:*, {&TAG_%0 %q0=setinter(remove(get(%q0/TAG_%0),%q3),%q1); @pemit %#=Message %q2 (current) removed from tag list '[lcstr(%0)]'.}
&DO_UNTAG_RANGE Mailer=$+untag *=*: @switch/first [setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(9,u(GET_RANGE_FN,%0,%q0,%q1))][or(strmatch(%q0,),strmatch(%q9,))]=1, {@pemit %#=u(NO_MSGS_ERR,%0)}, {&TAG_%1 %q0=setinter(setdiff(get(%q0/TAG_%1),%q9),%q1); @pemit %#=Message(s) [u(COMMA_LIST_FN,sort(iter(%q9,member(%q1,##))))][u(CRITERION_FN,%0)] removed from tag list '[lcstr(%1)]'.}
&DO_LIST_TAGS Mailer=$+list tags: @pemit %#=[setq(0,get(%#/MBOX))][setq(1,lattr(%q0/TAG_*))][switch(%q0:%q1,:*,You have no mail tags.,*:,You have no mail tags.,Mail tags: [iter(sort(%q1),lcstr(rest(##,_)))])]
&DO_DELETE Mailer=$+delete: @pemit %#=switchall([setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(2,get(%q0/CURR_NUM))][setq(3,extract(%q1,%q2,1))][setq(4,first(%q3,-))][setq(5,rest(%q3,-))][or(strmatch(%q0,),strmatch(%q1,))]:[u(MAILOPT_FN,get(%#/MAIL_CONFIG_OPTIONS),soft,hard,delete)]:[eq(%q2,words(%q1))]:[strmatch(get(%q4/P-%q5),%q0)],1:*:*:*,You have no mail.,0:soft:*:*,Message [get(%q0/CURR_NUM)] \(current\) marked for deletion.[set(%q0,DEL_LIST:[setunion(get(%q0/DEL_LIST),%q3)])],0:hard:*:*,Message %q2 \(current\) deleted.[set(%q0,RECV_LIST:[remove(get(%q0/RECV_LIST),%q3)])][set(%q0,NEW_LIST:[remove(get(%q0/NEW_LIST),%q3)])][set(%q0,MARK_LIST:[remove(get(%q0/MARK_LIST),%q3)])][set(%q0,DEL_LIST:[remove(get(%q0/DEL_LIST),%q3)])],0:hard:1:*,set(%q0,CURR_NUM:),0:hard:*:1,wipe(%q4/?-%q5),0:hard:*:0,[set(%q4,P-%q5:[remove(get(%q4/P-%q5),%q0)])])
&DO_DELETE_RANGE Mailer=$+delete *: @pemit %#=switchall([setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(2,get(%q0/CURR_NUM))][setq(9,u(GET_RANGE_FN,%0,%q0,%q1))][or(strmatch(%q0,),strmatch(%q9,))]:[u(MAILOPT_FN,get(%#/MAIL_CONFIG_OPTIONS),soft,hard,delete)]:[eq(member(%q9,extract(%q1,%q2,1)),0)],1:*:*,u(NO_MSGS_ERR,%0),0:soft:*,Message\(s\) [u(COMMA_LIST_FN,sort(iter(%q9,member(%q1,##))))][u(CRITERION_FN,%0)] marked for deletion.[set(%q0,DEL_LIST:[setunion(get(%q0/DEL_LIST),%q9)])],0:hard:0,set(%q0,CURR_NUM:),0:hard:*,Message\(s\)[u(CRITERION_FN,%0)] deleted.[u(DEL_MSGS_FN,%q0,%q9)])
&DO_FLUSH Mailer=$+flush: @pemit %#=switchall([setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(2,get(%q0/DEL_LIST))][or(strmatch(%q0,),strmatch(%q1,))]:%q2:[eq(member(%q2,extract(%q1,get(%q0/CURR_NUM),1)),0)],1:*:*,u(NO_MSGS_ERR),0::*,No deleted messages to flush \([words(%q1)] remain\).,0:*:0,set(%q0,CURR_NUM:),0:?*:*,Messages marked for deletion flushed \([words(%q2)] deleted\, [sub(words(%q1),words(%q2))] remain\).[u(DEL_MSGS_FN,%q0,%q2)][set(%q0,DEL_LIST:)])
&DO_CLEAR Mailer=$+clear: @fo %#=+delete
&DO_CLEAR_RANGE Mailer=$+clear *: @fo %#={+delete %0}
&DO_UNDELETE Mailer=$+undelete: @pemit %#=switch([setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(2,get(%q0/CURR_NUM))][setq(3,extract(%q1,%q2,1))][setq(4,get(%q0/DEL_LIST))][or(strmatch(%q0,),strmatch(%q1,))]:[member(%q4,%q3)],1:*,You have no mail.,0:0,That message is not marked for deletion.,Message %q2 \(current\) removed from deletion list.[set(%q0,DEL_LIST:[setinter(remove(%q4,%q3),%q1)])])
&DO_UNDELETE_RANGE Mailer=$+undelete *: @pemit %#=switch([setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(9,u(GET_RANGE_FN,%0,%q0,%q1))][or(strmatch(%q0,),strmatch(%q9,))],1,u(NO_MSGS_ERR,%0),Message\(s\) [u(COMMA_LIST_FN,sort(iter(%q9,member(%q1,##))))][u(CRITERION_FN,%0)] removed from deletion list.[set(%q0,DEL_LIST:[setinter(setdiff(get(%q0/DEL_LIST),%q9),%q1)])])
&DO_REVIEW_LETTERS Mailer=$+review letters: @pemit %#=[setq(0,get(%#/MBOX))][setq(1,u(SENT_LIST_FN,%q0))][setq(2,words(%q1))][switch(%q0:%q1,:*,You have sent no mail.,*:,No letters available for review.,[u(REVIEW_HDR)][map(REVIEW_LIST_FN,extract(%q1,1,40))])]; @dolist switch(lt(%q2,41),1,,rest(lnum(add(div(%q2,40),1))))={@pemit %#=after(map(REVIEW_LIST_FN,extract(%q1,add(mul(##,40),1),40)),%r)}
&DO_REVIEW Mailer=$+review letter *: @switch/first [setq(0,get(%#/MBOX))][setq(1,u(SENT_LIST_FN,%q0))][setq(2,u(REVIEW_RANGE_FN,%0,%q0,%q1))]%q0:%q1:%q2=:*:*, {@pemit %#=You have sent no +mail.},*::*, {@pemit %#=No letters available for review.},*:*:, {@pemit %#=No such letter(s) available for review.}, {@dolist %q2=@pemit %#=u(REVIEW_FN,##,%q1)}
&DO_RETRACT Mailer=$+retract letter *: @pemit %#=switch([setq(0,get(%#/MBOX))][setq(1,u(SENT_LIST_FN,%q0))][setq(2,extract(%q1,%0,1))]%q0:%q1:%q2:[u(OK_RETRACT_FN,%q0,%q2)],:*:*:*,You have sent no mail.,*::*:*,No letters available for review.,*:*::*,No such letter available for review.,*:*:*:0,That letter cannot be retracted now.,*:*:*:1,Letter retracted.[null(iter(get(%q0/P-%q2),[set(##,RECV_LIST:[remove(get(##/RECV_LIST),%q0-%q2)])][set(##,NEW_LIST:[remove(get(##/NEW_LIST),%q0-%q2)])][set(##,DEL_LIST:[remove(get(##/DEL_LIST),%q0-%q2)])][set(##,MARK_LIST:[remove(get(##/MARK_LIST),%q0-%q2)])]))][wipe(%q0/?-%q2)])
&DO_DESTROY_MAILBOX Mailer=$+destroy mailbox for *: @switch/first [hasflag(%#,Wizard)]:[setq(0,get(*%0/MBOX))]%q0=0:*, {@pemit %#=Permission denied.},1:, {@pemit %#=No mailbox to destroy.}, {@dolist get(%q0/RECV_LIST)={@wipe [setq(3,first(##,-))][setq(4,rest(##,-))][switch(strmatch(get(%q3/P-%q4),%q0),0,#-1,%q3)]/?-%q4; &P-%q4 %q3=remove(get(%q3/P-%q4),%q0)}; @dolist lattr(%q0/P-*)=@trig me/DEST_MBOX_TRIG1=%q0,rest(##,-); @wait 2=@trig me/DEST_MBOX_TRIG2=%#,num(*%0),%q0}
@Aconnect Mailer=@wait [setq(0,get(%#/MBOX))][switch(%q0:[u(QUOTA_STATUS_FN,%q0)],:*,#-1,*:1,30,#-1)]=@pemit %#=u(OVER_QUOTA_MSG,%q0,%q1,%q2,%q3,%q4)
&DO_SET_MAIL_QUOTA Mailer=$+set mail quota *=*/*: @pemit %#=switch([setq(0,get(*%0/MBOX))][hasflag(%#,Wizard)]:[num(*%0)]:%q0,0:*:*,Permission denied.,*:#-1:*,No such player.,1:*:,[name(*%0)] does not have a mailbox.,Mail quotas for [name(*%0)] set to [setr(1,floor(%2))] messages \\([setr(2,floor(%1))] unread\\).[set(%q0,MAX_READ:%q1)][set(%q0,MAX_UNREAD:%q2)])
&DO_DUMPMAIL_RANGE Mailer=$+dumpmail *: @switch/first [setq(0,get(%#/MBOX))][setq(1,get(%q0/RECV_LIST))][setq(9,u(GET_RANGE_FN,%0,%q0,%q1))]%q9=, {@pemit %#=u(NO_MSGS_ERR,%0)},#-1 NO MATCH, {@pemit %#=u(NO_MSGS_ERR,%0)}, {@dolist %q9=@pemit %#=u(DUMPMAIL_FMT_FN,##)}
&DO_REVIEW_LETTERS_RANGE Mailer=$+review letters *: @pemit %#=[setq(0,get(%#/MBOX))][setq(1,u(SENT_LIST_FN,%q0))][setq(2,u(REVIEW_RANGE_FN,%0,%q0,%q1))][setq(3,words(%q2))][switch(%q0:%q1:%q2,:*:*,You have sent no +mail.,*::*,No letters available for review.,*:*:,No such letter\(s\) available for review.,[u(REVIEW_HDR)][map(REVIEW_LIST_FN,extract(%q2,1,40))])]; @dolist switch(lt(%q3,41),1,,rest(lnum(add(div(%q3,40),1))))={@pemit %#=after(map(REVIEW_LIST_FN,extract(%q2,add(mul(##,40),1),40)),%r)}
&DO_MAILSTATUS Mailer=$+mailstatus *: @pemit %#=Mail status:[map(MAIL_STATUS_FN,%0)]
&DO_DESTROY_MBOX_DBREF Mailer=$+destroy mbox dbref *: @switch/first [hasflag(%#,Wizard)]:[setr(0,switch(setr(9,get(%0/PLAYER)),,,%0))]=0:*, {@pemit %#=Permission denied.},1:, {@pemit %#=No mailbox to destroy.}, {@dolist get(%q0/RECV_LIST)={@wipe [setq(3,first(##,-))][setq(4,rest(##,-))][switch(strmatch(get(%q3/P-%q4),%q0),0,#-1,%q3)]/?-%q4; &P-%q4 %q3=remove(get(%q3/P-%q4),%q0)}; @dolist lattr(%q0/P-*)=@trig me/DEST_MBOX_TRIG1=%q0,rest(##,-); @wait 2=@trig me/DEST_MBOX_TRIG2=%#,%q9,%q0}
&DO_QMAIL Mailer=$+qmail */*=*/*: @pemit %#=switch([setr(8,num(*%0))]:[controls(%#,%q8)],#-1:*,No such player.,*:0,Permission denied.,switchall([setq(0,get(%q8/MBOX))][u(QSEND_STATUS_FN,%q8)],IN_PROG,v(IN_PROG_ERR),OVER_QUOTA,v(OVER_QUOTA_ERR),NEED_BOX~SEND,u(CREATE_MBOX_FN,%q8,0),*~SEND,[setq(0,get(%q8/MBOX))][setq(1,map(RAW2LIST_FN,secure(%1)))][ifelse(words(%q1),Message sent on behalf of [name(%q8)].[set(%q0,MSG_TO:[setq(9,edit(%q1,#-1,))][setr(5,switch(%q9,,%q8,%q9))])][set(%q0,MSG_SUBJECT:[trim(%2)])][set(%q0,MSG_TEXT:%3)][null(iter([setq(6,u(LIST2DEST_FN,%q5))][filter(NOBOX_FILT_FN,%q6)],u(CREATE_MBOX_FN,##,7)))][setq(2,u(LIST_ERR_FN,%q1,secure(%1)))][switch(%q2,,,%rUnknown addresses: %q2)][u(SEND_MSG_FN,%q8,%q0,add(u(LAST_SENT_FN,%q0),1),%q6,iter(%q6,get(##/MBOX)),loc(%q8))],No valid recipients.)]))
@set Mailer=INHERIT
@set Mailer=SAFE
@set Mailer=STOP
@set Mailer=COMMANDS
@parent Mailer=#12


=================================+++++================================

@@DBC> Now working with object #12, name: Mail_Funcs
@create Mail Funcs=10
&DATA_OBJ Mail Funcs=#12
&STORAGE_OBJ Mail Funcs=#13
&MBOX_OBJ Mail Funcs=#14
&OPTION_DELETE Mail Funcs=soft
&OPTION_FORMAT Mail Funcs=compact
@Vs Mail Funcs=%b
&HAVEN_MAIL Mail Funcs=yes
&DFL_MAIL_ENTER Mail Funcs=You begin writing a +mail message.
&DFL_MAIL_SEND Mail Funcs=You send off your +mail message.
&DFL_MAIL_DELIVER Mail Funcs=You have new +mail from [name(%1)].
&DFL_MAIL_TOSS Mail Funcs=You discard your +mail message.
&DFL_MAIL_NOTE Mail Funcs=You write a note to yourself.
&IN_PROG_ERR Mail Funcs=You are already writing a mail message.
&NOT_IN_PROG_ERR Mail Funcs=You are not currently writing a mail message.
&LENGTH_MSG Mail Funcs=Warning: You are close to exceeding the maximum message length.
&NO_PART_ERR Mail Funcs=You can only edit "text", "subject", "to", "cc", and "bcc".
&NO_MSGS_ERR Mail Funcs=No messages match that criterion[u(CRITERION_FN,%0)].
&MAILOPT_FN Mail Funcs=[switch([match(%0,%1)]:[match(%0,%2)],0:0,get(v(DATA_OBJ)/OPTION_%3),0:*,%2,%1)]
&SEP_FN Mail Funcs=[switch([match(%0,space)]:[match(%0,return)],0:0,s(%vs),0:*,%r,%b)]
&OK_DELETE_OPT_FN Mail Funcs=[neq(member(soft hard,lcstr(%0)),0)]
&OK_SPACE_OPT_FN Mail Funcs=[neq(member(space return,lcstr(%0)),0)]
&OK_FORMAT_OPT_FN Mail Funcs=[neq(member(compact standard,lcstr(%0)),0)]
&OK_AUTOFORWARD_OPT_FN Mail Funcs=[not(member(iter(%0,strmatch(##,name(*##))),0))]
&MBOX_STATUS_FN Mail Funcs=[setq(1,get(%0/FORWARD_TO))][switch(%q1,,,{Mail autoforwarded to: [u(COMMA_LIST_FN,iter(%q1,name(##)))]%r})][words(get(%0/RECV_LIST))] messages received, [words(get(%0/NEW_LIST))] unread, [words(get(%0/DEL_LIST))] marked for deletion.%r[words(lattr(%0/P-*))] sent. [words(lattr(%0/ALIAS_*))] personal aliases. [words(lattr(%0/TAG_*))] tags.%rQuotas: [get(%0/MAX_READ)] total. [get(%0/MAX_UNREAD)] unread.%rDelete option: [switch([match(%1,soft)]:[match(%1,hard)],0:0,default,0:*,hard,soft)]. Space option: [switch([match(%1,space)]:[match(%1,return)],0:0,default,0:*,return,space)].
&MS_REPORT_HDR Mail Funcs=Mbox # %b Player %b Player Name [space(7)] Sent %b Recv %b New %b Fwd %b Als %b Tag%r------ %b ------ %b ----------- [space(7)] ---- %b ---- %b --- %b --- %b --- %b ---
&MS_REPORT_FN Mail Funcs=%r[rjust(%0,6)] %b [setq(2,get(%0/PLAYER))][rjust(%q2,6)] %b [ljust(switch([type(%q2)]:[after(name(%0),Mail Data for%b)],PLAYER:%q2,name(%q2),#-1*:%q2,* BAD MAILBOX *,*:%q2,** BAD PLAYER **,* BAD POINTER *),19)] [rjust(words(lattr(%0/S-*)),4)] %b [rjust(words(get(%0/RECV_LIST)),4)] %b [rjust(words(get(%0/NEW_LIST)),3)] %b [rjust(words(get(%0/FORWARD_TO)),3)] %b [rjust(words(lattr(%0/ALIAS_*)),3)] %b [rjust(words(lattr(%0/TAG_*)),3)]
&SEND_STATUS_FN Mail Funcs=[switch(%q0:[lattr(%q0/MSG_TO)],:*,NEED_BOX~SEND,*:,OKAY~SEND,IN_PROG)]
&NFY_MAIL_FN Mail Funcs=[switch([strmatch(get(%1/MAIL-%2),?*)]:[strmatch(get(%0/MAIL-%2),?*)],0:0,DFL_MAIL_%2,1:*,%1/MAIL-%2,%0/MAIL-%2)]
&RAW2LIST_FN Mail Funcs=[switch([isdbref(num(*%0))]:[lattr(%q0/ALIAS_%0)]:[lattr(v(DATA_OBJ)/ALIAS_%0)],1:*:*,num(*%0),0::,#-1,0:?*:*,~PA-%0,0:*:?*,~GA-%0,#-1)]
&LIST_ERR_FN Mail Funcs=[filter(LIST_FILT_FN,splice(%0,%1,#-1))]
&LIST_FILT_FN Mail Funcs=[not(or(isdbref(%0),strmatch(%0,~PA-*),strmatch(%0,~GA-*)))]
&LIST2DBREF_FN Mail Funcs=[switch(%0,#-1,,#*,%0,~PA-*,map(LIST2DBREF_FN,get(%q0/ALIAS_[rest(%0,-)])),~GA-*,map(LIST2DBREF_FN,get(v(DATA_OBJ)/ALIAS_[rest(%0,-)])),)]
&LIST2DEST_FN Mail Funcs=[setdiff(iter(map(LIST2DBREF_FN,%0),switch(get([get(##/MBOX)]/FORWARD_TO),,##,#-1 NO MATCH,##,get([get(##/MBOX)]/FORWARD_TO))),#-1)]
&GET_MBOX_FN Mail Funcs=[get(%0/MBOX)]
&LIST_RSLV_FN Mail Funcs=[switch(%0,,,#-1,Error,#*,name(%0),~PA-*,[lcstr(rest(%0,-))] <personal alias>,~GA-*,[lcstr(rest(%0,-))] <global alias>,Error)]
&LIST_PRINT_FN Mail Funcs=[setq(9,words(%0))][switch(%q9,1,u(LIST_RSLV_FN,%0),2,{[u(LIST_RSLV_FN,first(%0))], [u(LIST_RSLV_FN,rest(%0))]},[iter(extract(%0,1,sub(%q9,1)),{[u(LIST_RSLV_FN,##)],})] [u(LIST_RSLV_FN,extract(%0,%q9,1))])]
&EXIST_PRINT_FN Mail Funcs=[switch(%1,,,%r[ljust(%0,10)] [u(LIST_PRINT_FN,%1)])]
&EXP_PA_FN Mail Funcs=[switch(%0,~PA-*,get(%q0/ALIAS_[rest(%0,-)]),%0)]
&COMMA_LIST_FN Mail Funcs=[setq(8,words(%0))][switch(%q8,0,,1,%0,2,{[first(%0)], [rest(%0)]},[iter(extract(%0,1,sub(%q8,1)),{##,})] [extract(%0,%q8,1)])]
&EDIT_TO_FN Mail Funcs=[iter(%1,switch(##,#*,edit(name(##),%2,%3),~PA-*,edit(rest(##,-),%2,%3),~GA-*,edit(rest(##,-),%2,%3),edit(##,%2,%3)))]
&PROOF_FN Mail Funcs=[repeat(-,78)]%r[ljust(To:,10)] [u(LIST_PRINT_FN,get(%q0/MSG_TO))][u(EXIST_PRINT_FN,Cc:,get(%q0/MSG_CC))][u(EXIST_PRINT_FN,Bcc:,get(%q0/MSG_BCC))]%r[ljust(Subject:,10)] [get(%q0/MSG_SUBJECT)]%r[repeat(=,78)]%r[get(%q0/MSG_TEXT)][switch(get(%0/MAIL_SIG),,,%r[u(%#/MAIL_SIG)])]%r[repeat(-,78)]
&NOBOX_FILT_FN Mail Funcs=[not(hasattr(%0,MBOX))]
&SENT_LIST_FN Mail Funcs=[sort(iter(lattr(%0/P-*),rest(##,-)),n)]
&LAST_SENT_FN Mail Funcs=[last(u(SENT_LIST_FN,%0))]
&SEND_TRIG Mail Funcs=&P-%2 %1=%4; &R-%2 %1=[map(EXP_PA_FN,get(%1/MSG_TO))]![map(EXP_PA_FN,get(%1/MSG_CC))]![map(EXP_PA_FN,get(%1/MSG_BCC))]![words(%4)]; &S-%2 %1=[secs()]![get(%1/MSG_SUBJECT)]; &M-%2 %1=[get(%1/MSG_TEXT)][switch(get(%0/MAIL_SIG),,,%r[u(%0/MAIL_SIG)])]; @dolist %4={&RECV_LIST ##=[get(##/RECV_LIST)] %1-%2; &NEW_LIST ##=[get(##/NEW_LIST)] %1-%2}; @wipe %1/MSG_*; @switch/first match([v(HAVEN_MAIL)] [get(%5/MAIL-HAVEN)],yes)=0, {@pemit/contents %5=u(u(NFY_MAIL_FN,%0,%5,SEND),%0)}, {@pemit %0=u(u(NFY_MAIL_FN,%0,%5,SEND),%0)}; @dolist %3={@switch/first [match([v(HAVEN_MAIL)] [get(loc(##)/MAIL-HAVEN)],yes)]:[hasflag(##,Connect)]=0:1, {@pemit/contents loc(##)=u(u(NFY_MAIL_FN,%0,loc(##),DELIVER),##,%0)},*:1, {@pemit ##=u(u(NFY_MAIL_FN,%0,loc(##),DELIVER),##,%0)}}
&NOT_HAS_MSG_FN Mail Funcs=[eq(member(get([get(%0/MBOX)]/RECV_LIST),%q2),0)]
&BOUNCE_TRIG Mail Funcs=&P-%2 %1=trim([get(%1/P-%2)] %4); &R-%2 %1=[setq(5,get(%1/R-%2))][extract(%q5,1,2,!)]![trim([extract(%q5,3,1,!)] [map(EXP_PA_FN,%6)])]![add(extract(%q5,4,1,!),words(%4))]; @dolist %4={&RECV_LIST ##=[get(##/RECV_LIST)] %1-%2; &NEW_LIST ##=[get(##/NEW_LIST)] %1-%2}; @switch/first match([v(HAVEN_MAIL)] [get(%5/MAIL-HAVEN)],yes)=0, {@pemit/contents %5=u(u(NFY_MAIL_FN,%0,%5,SEND),%0)}, {@pemit %0=u(u(NFY_MAIL_FN,%0,%5,SEND),%0)}; @dolist %3={@switch/first [match([v(HAVEN_MAIL)] [get(loc(##)/MAIL-HAVEN)],yes)]:[hasflag(##,Connect)]=0:1, {@pemit/contents loc(##)=u(u(NFY_MAIL_FN,%0,loc(##),DELIVER),##,%0)},*:1, {@pemit ##=u(u(NFY_MAIL_FN,%0,loc(##),DELIVER),##,%0)}}
&RESEND_TRIG Mail Funcs=&P-%2 %1=trim([get(%1/P-%2)] %4); &R-%2 %1=[setq(5,get(%1/R-%2))][first(%q5,!)]![trim([extract(%q5,2,1,!)] [map(EXP_PA_FN,%6)])]![extract(%q5,3,1,!)]![add(extract(%q5,4,1,!),words(%4))]; @dolist %4={&RECV_LIST ##=[get(##/RECV_LIST)] %1-%2; &NEW_LIST ##=[get(##/NEW_LIST)] %1-%2}; @switch/first match([v(HAVEN_MAIL)] [get(%5/MAIL-HAVEN)],yes)=0, {@pemit/contents %5=u(u(NFY_MAIL_FN,%0,%5,SEND),%0)}, {@pemit %0=u(u(NFY_MAIL_FN,%0,%5,SEND),%0)}; @dolist %3={@switch/first [match([v(HAVEN_MAIL)] [get(loc(##)/MAIL-HAVEN)],yes)]:[hasflag(##,Connect)]=0:1, {@pemit/contents loc(##)=u(u(NFY_MAIL_FN,%0,loc(##),DELIVER),##,%0)},*:1, {@pemit ##=u(u(NFY_MAIL_FN,%0,loc(##),DELIVER),##,%0)}}
&SPLICE_LISTS_FN Mail Funcs=[elements(%1,sort(iter(%0,member(%1,##))))]
&AUTHOR_FN Mail Funcs=[istrue(%2,strmatch(##,%0-*))]
&SUBJECT_FN Mail Funcs=[istrue(%2,strmatch(rest(get([first(##,-)]/S-[rest(##,-)]),!),*%0*))]
&TEXT_SEARCH_FN Mail Funcs=[istrue(%2,strmatch(get([first(##,-)]/M-[rest(##,-)]),*%0*))]
&GET_RANGE_FN Mail Funcs=[iter(secure(%0),switch(1,strmatch(%1,),,strmatch(%2,),,strmatch(all,##*),%2,strmatch(current,##*),extract(%2,get(%1/CURR_NUM),1),strmatch(deleted,##*),u(SPLICE_LISTS_FN,get(%1/DEL_LIST),%2),strmatch(last,##*),last(%2),strmatch(marked,##*),u(SPLICE_LISTS_FN,get(%1/MARK_LIST),%2),strmatch(next,##*),extract(%2,add(get(%1/CURR_NUM),1),1),strmatch(previous,##*),extract(%2,sub(get(%1/CURR_NUM),1),1),strmatch(unread,##*),u(SPLICE_LISTS_FN,get(%1/NEW_LIST),%2),switch(1,strmatch(##,author:*),u(SPLICE_LISTS_FN,u(AUTHOR_FN,get(*[rest(##,:)]/MBOX),%1,%2),%2),strmatch(##,last:*),extract(%2,max(1,sub(words(%2),sub(rest(##,:),1))),rest(##,:)),strmatch(##,subject:*),u(SPLICE_LISTS_FN,u(SUBJECT_FN,rest(##,:),%1,%2),%2),strmatch(##,tag:*),u(SPLICE_LISTS_FN,get(%1/TAG_[rest(##,:)]),%2),strmatch(##,text:*),u(SPLICE_LISTS_FN,u(TEXT_SEARCH_FN,rest(##,:),%1,%2),%2),strmatch(##,*-*),extract(%2,first(##,-),add(sub(rest(##,-),first(##,-)),1)),extract(%2,##,1))))]
&CRITERION_FN Mail Funcs=[switch(1,strmatch(%0,author:*),%b\(author search\),strmatch(%0,last:*),%b\(last search\),strmatch(%0,subject:*),%b\(subject search\),strmatch(%0,tag:*),%b\(tag search\),strmatch(%0,text:*),%b\(text search\),strmatch(all,%0*),%b\(all\),strmatch(current,%0*),%b\(current\),strmatch(deleted,%0*),%b\(deleted\),strmatch(last,%0*),%b\(last\),strmatch(marked,%0*),%b\(marked\),strmatch(next,%0*),%b\(next\),strmatch(previous,%0*),%b\(previous\),strmatch(unread,%0*),%b\(unread\),)]
&SKIM_COMPACT_HDR Mail Funcs=[space(10)]Sender[space(12)]Subject[space(21)]Size %bReceived%r[space(10)]------[space(12)]-------[space(21)]---- %b--------
&SKIM_STANDARD_HDR Mail Funcs=[repeat(=,78)]%r%r[space(28)]List of Mail Messages%r%r[u(SKIM_COMPACT_HDR)]
&SKIM_FN Mail Funcs=%r[setq(2,first(%0,-))][setq(3,rest(%0,-))][setq(4,member(%q1,%0))][switch(%q4,get(%q0/CURR_NUM),+,%b)][switch(member(get(%q0/NEW_LIST),%0),0,%b,U)][switch(member(get(%q0/MARK_LIST),%0),0,%b,M)][switch(member(get(%q0/DEL_LIST),%0),0,%b,D)][rjust(%q4\),4)] %b[ljust(name(get(%q2/PLAYER)),17)] [ljust(mid(rest(get(%q2/S-%q3),!),0,27),27)] [rjust(strlen(get(%q2/M-%q3)),4)] %b[extract(convsecs(first(get(%q2/S-%q3),!)),1,2,:)]
&TAG_FILT_FN Mail Funcs=[neq(member(get(%q0/%0),%q2-%q3),0)]
&TAG_PRINT_FN Mail Funcs=[switch(%0,,,%r[ljust(Tags:,10)] [iter(%0,lcstr(rest(##,_)))])]
&READ_COMPACT_FN Mail Funcs=[setq(2,first(%0,-))][setq(3,rest(%0,-))][setq(4,get(%q2/S-%q3))][setq(5,get(%q2/R-%q3))][repeat(-,78)]%r[ljust(Message [member(%q1,%0)],37)] Date Received: [convsecs(first(%q4,!))]%r[ljust(From:,10)] [name(get(%q2/PLAYER))]%r[ljust(To:,10)] [u(LIST_PRINT_FN,first(%q5,!))][u(EXIST_PRINT_FN,Cc:,extract(%q5,2,1,!))][u(TAG_PRINT_FN,filter(TAG_FILT_FN,lattr(%q0/TAG_*)))]%r[ljust(Subject:,10)] [rest(%q4,!)]%r[repeat(=,78)]%r[get(%q2/M-%q3)]%r[repeat(-,78)]
&READ_STANDARD_FN Mail Funcs=[setq(2,first(%0,-))][setq(3,rest(%0,-))][setq(4,get(%q2/S-%q3))][setq(5,get(%q2/R-%q3))][repeat(=,78)]%r[ljust(Message [member(%q1,%0)],37)] Date Received: [convsecs(first(%q4,!))]%r[ljust(From:,10)] [name(get(%q2/PLAYER))]%r[ljust(To:,10)] [u(LIST_PRINT_FN,first(%q5,!))][u(EXIST_PRINT_FN,Cc:,extract(%q5,2,1,!))][u(TAG_PRINT_FN,filter(TAG_FILT_FN,lattr(%q0/TAG_*)))]%r[ljust(Subject:,10)] [rest(%q4,!)]%r[repeat(-,78)]%r%r[get(%q2/M-%q3)]%r%r[repeat(=,78)]%rOptions: +delete, +bounce, +forward, +reply, +replyall, +mark, +tag
&REVIEW_HDR Mail Funcs=[space(6)]Subject[space(20)]Held Recipient[space(9)]Size %bSent%r[space(6)]-------[space(20)]---- ---------[space(9)]---- %b----
&REVIEW_LIST_FN Mail Funcs=%r[rjust([member(%q1,%0)]\),4)] %b[ljust(mid(rest(get(%q0/S-%0),!),0,24),26)] \[[rjust(words(get(%q0/P-%0)),2)]\] [setq(9,first(first(get(%q0/R-%0),!)))][ljust(switch(%q9,#*,name(%q9),~GA-*,rest(%q9,-),~PA-*,rest(%q9,-),%q9),17)] [rjust(strlen(get(%q0/M-%0)),4)] %b[extract(convsecs(first(get(%q0/S-%0),!)),1,2,:)]
&REVIEW_FN Mail Funcs=[repeat(-,78)]%r[ljust(Letter [member(%1,%0)],41)] Date Sent: [convsecs(first(get(%q0/S-%0),!))]%r[setq(8,get(%q0/R-%0))][ljust(To:,10)] [u(LIST_PRINT_FN,first(%q8,!))][u(EXIST_PRINT_FN,Cc:,extract(%q8,2,1,!))][u(EXIST_PRINT_FN,Bcc:,extract(%q8,3,1,!))]%r[ljust(Held:,10)] [u(COMMA_LIST_FN,iter(get(%q0/P-%0),name(get(##/PLAYER))))]%r[ljust(Subject:,10)] [rest(get(%q0/S-%0),!)]%r[repeat(=,78)]%r[get(%q0/M-%0)]%r[repeat(-,78)]
&OK_RETRACT_FN Mail Funcs=[switch(lt(add(first(get(%0/S-%1),!),v(RETRACT_TIME)),secs()),1,1,switch(eq(words(get(%0/P-%1)),extract(get(%0/R-%1),4,1,!)),0,0,1,not(member(iter(get(%0/P-%1),neq(member(get(##/NEW_LIST),%0-%1),0)),0))))]
&DEST_MBOX_TRIG1 Mail Funcs=@dolist get(%0/P-%1)={&RECV_LIST ##=remove(get(##/RECV_LIST),%0-%1); &NEW_LIST ##=remove(get(##/NEW_LIST),%0-%1); &DEL_LIST ##=remove(get(##/DEL_LIST),%0-%1); &MARK_LIST ##=remove(get(##/MARK_LIST),%0-%1)}
&DEST_MBOX_TRIG2 Mail Funcs=@wait 2={@dest %2; &MBOX %1; @pemit %0=Mailbox for [name(%1)] (%1) destroyed.}
&MAX_MAILTO Mail Funcs=100
&TIMEZONE Mail Funcs=-0500 (EST)
&RETRACT_TIME Mail Funcs=2592000
&QUOTA_MAIL Mail Funcs=yes
&OVER_QUOTA_MSG Mail Funcs=[repeat(*,78)]%r[repeat(*[space(76)]*%r,2)]* [center(YOU HAVE TOO MUCH +MAIL.,74)] *%r[repeat(*[space(76)]*%r,2)]* [center(Your mail quota is %1 / %2 un/read messages.,74)] *%r* [center(You have %4 messages \(%3 unread\).,74)] *%r*[space(76)]*%r* [center(You will not be able to send +mail until you clear some of your messages.,74)] *%r* [center(Also\, each time you connect\, you will receive this annoying message.,74)] *%r[repeat(*[space(76)]*%r,2)]* [center(PLEASE CLEAN UP YOUR +MAIL. THANK YOU.,74)] *%r[repeat(*[space(76)]*%r,2)]%r[repeat(*,78)]
&OVER_QUOTA_ERR Mail Funcs=You have exceeded your saved +mail quota. You cannot send messages until you are below that quota.
&QUOTA_STATUS_FN Mail Funcs=[setq(1,get(%0/MAX_UNREAD))][setq(2,get(%0/MAX_READ))][setq(3,words(get(%0/NEW_LIST)))][setq(4,words(get(%0/RECV_LIST)))][or(gt(%q3,%q1),gt(%q4,%q2))]
&TIME_FMT_FN Mail Funcs=[switch(gte(%0,86400),0,,1,[div(%0,86400)]d%b)][switch(gte(%0,3600),0,,1,sub(div(%0,3600),mul(div(%0,86400),24))h%b)][switch(gte(%0,60),0,,1,div(mod(%0,3600),60)m%b)][mod(%0,60)]s
&QSEND_STATUS_FN Mail Funcs=[switch(%q0:[lattr(%q0/MSG_TO)]:[v(QUOTA_MAIL)],:*:*,NEED_BOX~SEND,*::no,OKAY~SEND,*::yes,switch(ulocal(QUOTA_STATUS_FN,%q0),1,OVER_QUOTA,OKAY~SEND),IN_PROG)]
&DUMP_RSLV_FN Mail Funcs=[switch(%0,,,#-1,Error@%1,#*,[name(%0)]@%1 \(%0@%1\),~PA-*,[lcstr(rest(%0,-))]@%1 \(personal alias@%1\),~GA-*,[lcstr(rest(%0,-))]@%1 \(global alias@%1\),Error@%1)]
&DUMP_PRINT_FN Mail Funcs=[switch(%1,,,{%r%0 [setq(9,words(%1))][switch(%q9,1,u(DUMP_RSLV_FN,%1,%2),2,{[u(DUMP_RSLV_FN,first(%1),%2)], [u(DUMP_RSLV_FN,rest(%1),%2)]},[iter(extract(%1,1,sub(%q9,1)),{[u(DUMP_RSLV_FN,##,%2)],})] [u(DUMP_RSLV_FN,extract(%1,%q9,1),%2)])]})]
&DUMP_DATE_FN Mail Funcs=[first(%0)], [extract(%0,3,1)] [extract(%0,2,1)] [last(%0)] [extract(%0,4,1)] [v(TIMEZONE)]
&DUMPMAIL_FMT_FN Mail Funcs=[setq(2,first(%0,-))][setq(3,rest(%0,-))][setq(4,get(%q2/S-%q3))][setq(5,get(%q2/R-%q3))][setq(6,edit(mudname(),%b,))][setq(7,get(%q2/PLAYER))]From [name(%q7)]@%q6 [setq(8,convsecs(first(%q4,!)))]%q8%rDate: [u(DUMP_DATE_FN,%q8)]%rFrom: [name(%q7)]@%q6 \(%q7@%q6\)[u(DUMP_PRINT_FN,To:,first(%q5,!),%q6)][u(DUMP_PRINT_FN,Cc:,extract(%q5,2,1,!),%q6)]%rSubject: [rest(%q4,!)]%rEOH%r%r[edit(edit(get(%q2/M-%q3),%r%r,%r %r),%rFrom,%r>From)]%rEOM%r
&REVIEW_RANGE_FN Mail Funcs=[iter(secure(%0),switch(1,strmatch(all,##*),%2,strmatch(last,##*),last(%2),strmatch(##,to:*),filter(REVIEW_TO_FN[setq(9,rest(##,:))],%2),strmatch(##,last:*),extract(%2,max(1,sub(words(%2),sub(rest(##,:),1))),rest(##,:)),strmatch(##,subject:*),filter(REVIEW_SUBJ_FN[setq(9,rest(##,:))],%2),strmatch(##,text:*),filter(REVIEW_TEXT_FN[setq(9,rest(##,:))],%2),strmatch(##,*-*),extract(%2,first(##,-),add(sub(rest(##,-),first(##,-)),1)),extract(%2,##,1)))]
&REVIEW_TO_FN Mail Funcs=[neq(match(iter(edit(extract(get(%q0/R-%0),1,3,!),!,%b),switch(##,#*,name(##),~GA-*,rest(##,-),~PA-*,rest(##,-),##)),%q9),0)]
&REVIEW_SUBJ_FN Mail Funcs=[strmatch(rest(get(%q0/S-%0),!),*%q9*)]
&REVIEW_TEXT_FN Mail Funcs=[strmatch(get(%q0/M-%0),*%q9*)]
&MAIL_STATUS_FN Mail Funcs=%r %b[switch(num(*%0),#-1,[capstr(lcstr(%0))]: No such player.,[name(*%0)]: [u(MAIL_CHECK_FN,get(*%0/MBOX))])]
&MAIL_CHECK_FN Mail Funcs=[switch(get(%0/NEW_LIST),,No unread mail.,#-1 NO MATCH,No unread mail.,New mail since [setq(9,first(get(%0/NEW_LIST)))][convsecs(first(get([first(%q9,-)]/S-[rest(%q9,-)])))].)]
&CREATE_MBOX_FN Mail Funcs=[setq(%1,create(Mail Data for %0,10,t))][command(@parent,r(%1),v(MBOX_OBJ))][set(%0,MBOX:[r(%1)])][set(r(%1),PLAYER:%0)][set(r(%1),Dark)][tel(r(%1),v(STORAGE_OBJ))]
&SEND_MSG_FN Mail Funcs=[set(%1,P-%2:%4)][set(%1,R-%2:[map(EXP_PA_FN,get(%1/MSG_TO))]![map(EXP_PA_FN,get(%1/MSG_CC))]![map(EXP_PA_FN,get(%1/MSG_BCC))]![words(%4)])][set(%1,S-%2:[secs()]![get(%1/MSG_SUBJECT)])][set(%1,M-%2:[get(%1/MSG_TEXT)][switch(get(%0/MAIL_SIG),,,%r[u(%0/MAIL_SIG)])])][wipe(%1/MSG_*)][u(DELIVER_FN,%0,%1,%2,%3,%4,%5)]
&DELIVER_FN Mail Funcs=[null(iter(%4,[set(##,RECV_LIST:[get(##/RECV_LIST)] %1-%2)][set(##,NEW_LIST:[get(##/NEW_LIST)] %1-%2)]))][switch(match([v(HAVEN_MAIL)] [get(%5/MAIL-HAVEN)],yes),0,remit(%5,u(u(NFY_MAIL_FN,%0,%5,SEND),%0)),pemit(%0,u(u(NFY_MAIL_FN,%0,%5,SEND),%0)))][null(iter(%3,switch([match([v(HAVEN_MAIL)] [get(loc(##)/MAIL-HAVEN)],yes)]:[hasflag(##,Connect)],0:1,remit(loc(##),u(u(NFY_MAIL_FN,%0,loc(##),DELIVER),##,%0)),*:1,pemit(##,u(u(NFY_MAIL_FN,%0,loc(##),DELIVER),##,%0)))))]
&BOUNCE_MSG_FN Mail Funcs=[set(%1,P-%2:[trim([get(%1/P-%2)] %4)])][set(%1,R-%2:[setq(5,get(%1/R-%2))][extract(%q5,1,2,!)]![trim([extract(%q5,3,1,!)] [map(EXP_PA_FN,%6)])]![add(extract(%q5,4,1,!),words(%4))])][u(DELIVER_FN,%0,%1,%2,%3,%4,%5)]
&RESEND_MSG_FN Mail Funcs=[set(%1,P-%2:[trim([get(%1/P-%2)] %4)])][set(%1,R-%2:[setq(5,get(%1/R-%2))][first(%q5,!)]![trim([extract(%q5,2,1,!)] [map(EXP_PA_FN,%6)])]![extract(%q5,3,1,!)]![add(extract(%q5,4,1,!),words(%4))])][u(DELIVER_FN,%0,%1,%2,%3,%4,%5)]
&DEL_MSGS_FN Mail Funcs=[null(iter(%1,[set(%0,RECV_LIST:[remove(get(%0/RECV_LIST),##)])][wipe([setq(3,first(##,-))][setq(4,rest(##,-))][switch(strmatch(get(%q3/P-%q4),%q0),0,#-1,%q3)]/?-%q4)][set(%q3,P-%q4:[remove(get(%q3/P-%q4),%q0)])]))][set(%q0,NEW_LIST:[setq(5,get(%q0/RECV_LIST))][setinter(get(%q0/NEW_LIST),%q5)])][set(%q0,DEL_LIST:[setinter(get(%q0/DEL_LIST),%q5)])][set(%q0,MARK_LIST:[setinter(get(%q0/MARK_LIST),%q5)])]
@set Mail Funcs=SAFE


=================================+++++================================

@@DBC> Now working with object #13, name: Mail_Storage
@create Mail Storage=10
@set Mail Storage=DARK
@set Mail Storage=OPAQUE


=================================+++++================================

@@DBC> Now working with object #14, name: Parent_Mailbox
@create Parent Mailbox=10
&CURR_NUM Parent Mailbox=1
&MAX_READ Parent Mailbox=75
&MAX_UNREAD Parent Mailbox=50
@set Parent Mailbox=DARK


=================================+++++================================

@@DBC> Now working with object #15, name: Guest_Connection_Object
@create Guest Connection Object=10
@Startup Guest Connection Object=@drain me; @notify me; @trigger me/INIT_GUESTS
&INIT_GUESTS Guest Connection Object=@wait me={@name *Guest=get(*Guest/MYNAME); @name [setq(0,v(GUEST_DBREFS))][first(%q0)]=Guest; @dolist rest(%q0)=@newpassword ##=lock_me_out; @newpassword first(%q0)=guest; @notify me}
@Aconnect Guest Connection Object=@switch/first [member(v(GUEST_DBREFS),%#)]:[strmatch(v(FULL_DBREF),%#)]=0:0,,*:0, {@wait me={@name %#=get(%#/MYNAME); @newpassword %#=lock_me_out; @name [setq(0,setdiff(v(GUEST_DBREFS),lwho()))][first([extract(%q0,add(rand(words(%q0)),1),1)] [v(FULL_DBREF)])]=Guest; @newpassword Guest=guest; @pemit %#=u(WELCOME_MSG,%#); @pemit/list setinter(OrgWho(STF),lwho())=u(H_CONNECT_MSG,%#); @notify me}}, {@pemit %#=u(FULL_MSG); @boot/quiet %#}
@Adisconnect Guest Connection Object=@wait me={@name [setq(0,switch(num(*Guest),#-1,%#,v(FULL_DBREF),%#,#-1))][v(FULL_DBREF)]=get(v(FULL_DBREF)/MYNAME); @name %q0=Guest; @newpassword Guest=guest; @tel %#=home; @pemit/list setinter(OrgWho(STF),lwho())=u(H_DISCONNECT_MSG,%#); @notify me}
&FULL_MSG Guest Connection Object=%r%rThere are no free guests at this time. Please try again when things are less busy (fifteen minutes to half an hour is recommended).%r%r
&WELCOME_MSG Guest Connection Object=%r%rWelcome to [mudname()], [name(%0)]. Feel free to look around. Please consult 'news', '+help', and 'help' for more information.%r%r
&GUEST_DBREFS Guest Connection Object=#18 #19
&FULL_DBREF Guest Connection Object=#16
&IS_GUEST Guest Connection Object=[neq(member([v(GUEST_DBREFS)] [v(FULL_DBREF)],%#),0)]
@lock/UseLock Guest Connection Object=IS_GUEST/1
&H_DISCONNECT_MSG Guest Connection Object=GUEST=> [name(%0)] disconnected from [get(%0/LastSite)] at [extract(time(),4,1)].
&H_CONNECT_MSG Guest Connection Object=GUEST=> [name(%0)] connected from [get(%0/LastSite)] at [extract(time(),4,1)].
@set Guest Connection Object=INHERIT
@set Guest Connection Object=HALTED
@set Guest Connection Object=SAFE
@set Guest Connection Object=STOP
@set Guest Connection Object=COMMANDS


=================================+++++================================

@@DBC> Now working with object #16, name: Guest
@lock me=*Guest
@lock/EnterLock me=*Guest
@lock/UseLock me=*Guest
@Desc me=I'm a guest. Be nice.
@Sex me=neuter
@Adisconnect me=home
@Aconnect me=think %r[repeat(-,78)]%rWelcome to [mudname()], %N.%rPlease feel free to look around, and if you need help, type 'g <message>'.%rTo talk to someone specific, type 'p <person> = <message>'.%r%rTo get a character, type '+request <character name>=<your email address>'.%r[repeat(-,78)]%r
@set me=HAVEN
@set me=OPAQUE


=================================+++++================================

@@DBC> Now working with object #17, name: WizTool_Funcs
@create WizTool Funcs=10
&MOTD WizTool Funcs=%rPlease read 'news' and '+help' for more information.
&NAME_FN WizTool Funcs=[name(%0)](%0[flags(%0)])
&FNAME_FN WizTool Funcs=[name(%0)] \(%0[flags(%0)]/[name(owner(%0))]\)
&COMMENT_FN WizTool Funcs=%1 ([u(SHORTNAME_FN,%0)], [u(SLASHTIME_FN,time())])
&SLASHTIME_FN WizTool Funcs=[member(v(MONTH_LIST),extract(%0,2,1))]/[extract(%0,3,1)]/[reverse(mid(reverse(%0),0,2))]
&MONTH_LIST WizTool Funcs=Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec
&SHORTNAME_FN WizTool Funcs=[switch([get(%0/ALIAS)]:[lt(strlen(get(%0/ALIAS)),strlen(name(%0)))],:*,name(%0),?*:0,name(%0),get(%0/ALIAS))]
&LOCK_DISP_FN WizTool Funcs=[switch(lock(%q0/%0),,,%r%0Lock: [lock(%q0/%0)])]
&LNAME_FN WizTool Funcs=[fullname(%0)] (%0[flags(%0)]/[name(owner(%0))])
@set WizTool Funcs=HALTED


=================================+++++================================

@@DBC> Now working with object #18, name: Guest-1
@lock me=*Guest-1
@Desc me=I'm a guest. Be nice.
@Sex me=neuter
@Adisconnect me=home
&MYNAME me=Guest-1
@lock/EnterLock me=*Guest-1
@lock/UseLock me=*Guest-1
&LASTLOGOUT me=879879995
@set me=HAVEN


=================================+++++================================

@@DBC> Now working with object #19, name: Guest-2
@lock me=*Guest-2
@Desc me=I'm a guest. Be nice.
@Sex me=neuter
@Adisconnect me=home
&MYNAME me=Guest-2
@lock/EnterLock me=*Guest-2
@lock/UseLock me=*Guest-2
@set me=HAVEN


=================================+++++================================

@@DBC> Now working with object #20, name: Global_Place_Object
@create Global Place Object=10
&PLACESCLEANUP1 Global Place Object=^* has left.: placescleanup(%#)
&PLACESCLEANUP2 Global Place Object=^* has disconnected.: placescleanup(%#)
&PLACESCLEANUPCMD Global Place Object=$placescleanup(*): &PLACENUMS [setq(0,u(WHICHPLACE,%#,%0))][switch(%q0,0,#-1,%#)]=[setq(1,get(%#/PLACENUMS))][replace(%q1,%q0,remove(extract(%q1,%q0,1,|),%0),|)]
@Desc Global Place Object=The code to handle tables, rugs, beds, ladders, rafters etc...
&DO_CONFIGURE Global Place Object=$configure * places: @switch/first [controls(%#,%l)]:[isnum(%0)]:%0=0:*:*, {@pemit %#=You do not control [name(%l)].},*:0:*, {@pemit %#=The number of places needs to be a number!},*:*:0, {@dolist rest(lnum(add(get(%l/PLACESMAX),1)))={@unlock %l/PLACE##; &PLACE## %l}; @unlock %l/PLACESCLEANUP1; @unlock %l/PLACESCLEANUP2; @unlock %l/PLACESMAX; @unlock %l/PLACENUMS; &PLACESCLEANUP1 %l; &PLACESCLEANUP2 %l; &PLACESMAX %l; &PLACENUMS %l; @set %l=!MONITOR; @pemit %#=Places removed from [name(%l)].}, {&PLACESMAX %l=%0; @dolist rest(lnum(add(%0,1)))={@unlock %l/PLACE##; &PLACE## %l=u(SETUP_FN,##,add(rand(9),1))}; @unlock %l/PLACESCLEANUP1; @unlock %l/PLACESCLEANUP2; @unlock %l/PLACESMAX; &PLACESCLEANUP1 %l; &PLACESCLEANUP2 %l; @mvattr %l=ALeave,OLD_ALEAVE; @aleave %l=placescleanup\(\%#\); &PLACENUMS %l=[repeat(|,%0)]; @pemit %#=Configuration for %0 places complete.}
&DO_UPDATE Global Place Object=$update */*=*: @switch/first [controls(%#,%l)]:[and(isnum(%0),lte(%0,get(%l/PLACESMAX)))]:[member(NAME MAXPLACES CURPLACES FIXED FULL EMPTY JOIN OJOIN DEPART ODEPART PREFIX,ucstr(%1))]=0:*:*, {@pemit %#=Permission denied.},*:0:*, {@pemit %#=I'm sorry, but '%0' isn't a valid place number.},*:*:0, {@pemit %#=I'm sorry, but '%1' isn't a valid configuration option.}, {@unlock %l/PLACE%0; &PLACE%0 %l=u(UPDATEINFO,%l,%0,%1,%2); @pemit %#=The %1 for [u(GETINFO,%l,%0,NAME)] is now set to:%r[space(5)][u(GETINFO,%l,%0,%1)]}
&DO_TT Global Place Object=$tt *: @pemit/list [setq(0,u(WHICHPLACE,%l,%#))][switch(%q0,0,%#[setq(1,Please join a place first.)],[extract(get(%l/PLACENUMS),%q0,1,|)][setq(1,\{[u(GETINFO,%l,%q0,PREFIX)], [speak(%#,%0)]\})])]=%q1
&DO_PLACES Global Place Object=$places: @pemit %#=switch(get(%l/PLACESMAX),,There are no special places here.,0,There are no special places here.,map(PLACES_FN,rest(lnum(add(get(%l/PLACESMAX),1)))))
&DO_PLACE Global Place Object=$place *: @pemit %#=switch(get(%l/PLACESMAX),,There are no special places here.,0,There are no special places here.,map(PLACES_FN,edit(%0,#,)))
&DO_MV Global Place Object=$mv from * to *: @switch/first 0=and(gt(%0,0),lte(%0,get(%l/PLACESMAX))), {@pemit %#='%0' is not a valid place number.},and(gt(%1,0),lte(%1,get(%l/PLACESMAX))), {@pemit %#='%1' is not a vaild place number.},not(words(u(GETINFO,%l,%0,FIXED))), {@pemit %#=u(GETINFO,%l,%0,FIXED)},not(words(u(GETINFO,%l,%1,FIXED))), {@pemit %#=u(GETINFO,%l,%1,FIXED)},sub(u(GETINFO,%l,%0,CURPLACES),words(extract(get(%l/PLACENUMS),%0,1,|))), {@pemit %#=u(GETINFO,%l,%0,EMPTY)},neq(u(GETINFO,%l,%1,CURPLACES),u(GETINFO,%l,%1,MAXPLACES)), {@pemit %#=u(GETINFO,%l,%1,FULL)}, {@unlock %l/PLACE%0; @unlock %l/PLACE%1; &PLACE%0 %l=u(UPDATEINFO,%l,%0,CURPLACES,sub(u(GETINFO,%l,%0,CURPLACES),1)); &PLACE%1 %l=u(UPDATEINFO,%l,%1,CURPLACES,add(u(GETINFO,%l,%1,CURPLACES),1)); @pemit %#=You move a place from [u(GETINFO,%l,%0,NAME)] to [u(GETINFO,%l,%1,NAME)].}
&DO_PLOOK Global Place Object=$plook: @pemit %#=[setq(9,get(%l/PLACENUMS))][setq(0,edit(%q9,|,))][fold(PLOOK_FOLD_FN,rest(lnum(add(get(%l/PLACESMAX),1))),-----)]%r[u(PLOOK_NOPLACE_FN,%l)]%r-----
&DO_DEPART Global Place Object=$depart:@switch [setq(1, U(WHICHPLACE, %l, %#))][setq(0,U(GETINFO,%l,%q1,NAME))]%q1=0, {@pemit %#=You aren't placed anywhere.}, {&PLACENUMS %l=[replace(get(%l/PLACENUMS), %q1, [remove(extract(get(%l/PLACENUMS), %q1, 1, |), %#)], |)]; @verb v(eval_obj)=%#,eval_msg,,oeval_msg,,,{[edit([U(GETINFO, %l, %q1, DEPART)] %q0.,%,,%%%,)],[edit([U(GETINFO, %l, %q1, ODEPART)] %q0.,%,,%%%,)]}; @pemit/list [extract(get(%l/PLACENUMS),%q1,1,|)]=%N has departed.}
&DO_JOIN Global Place Object=$join *: @switch/first [not(u(WHICHPLACE,%l,%#))] [lcstr(%0)]=0 *, {@pemit %#=Don't you think you should 'depart' first?},1 at #*, {@trig me/PLACEFUNCTION=%l,%#,[delete(rest(%0),0,1)]},1 #*, {@trig me/PLACEFUNCTION=%l,%#,[delete(%0,0,1)]},1 with *, {@pemit [setq(1,locate(%#,rest(%0),niPT))][setq(0,u(WHICHPLACE,%l,%q1))]%#=switch(%q0,0,There isn't anyone named '[capstr(rest(%0))]' at a special place.,You go over to join [name(%q1)].); @trig me/[switch(%q0,0,-,PLACEFUNCTION)]=%l,%#,%q0}, {@trig me/PLACEFUNCTION=%l,%#,[match(iter(rest(lnum(add(get(%l/PLACESMAX),1))),[u(GETINFO,%l,##,NAME)]|),*%0*,|)]}
&DO_PLACES_CONFIG Global Place Object=$places config *: @pemit %#=switch([controls(%#,%l)]:[and(gt(%0,0),lte(%0,get(%l/PLACESMAX)))],0:*,Permission denied.,1:0,There is no such place here.,Configuration for Place #%0:[iter(NAME MAXPLACES CURPLACES FIXED FULL EMPTY JOIN OJOIN DEPART ODEPART PREFIX,%r[ljust(##:,12)] [u(GETINFO,%l,%0,##)])])
&DO_PLOOK_BRIEF Global Place Object=$plook/brief: @pemit %#=[setq(9,get(%l/PLACENUMS))][setq(0,edit(%q9,|,))][setq(8,u(OCC_PLACE_FN,%l))][switch(%q8,,-----,fold(PLOOK_FOLD_FN,%q8,-----))]%r[u(PLOOK_NOPLACE_FN,%l)]%r-----
&DO_PLACES_BRIEF Global Place Object=$places/brief: @pemit %#=switch(get(%l/PLACESMAX),,There are no special places here.,0,There are no special places here.,[setq(9,get(%l/PLACENUMS))][setq(8,u(OCC_PLACE_FN,%l))][switch(%q8,,There is no one at a place.,map(PLACES_FN,%q8))])
&DO_RESET Global Place Object=$places reset: @switch controls(%#,%l)=0, {@pemit %#=Permission denied.}, {&PLACENUMS %l=repeat(|,get(%l/PLACESMAX)); @pemit %#=Places reset.}
@Adisconnect Global Place Object=&PLACENUMS [setq(0,u(WHICHPLACE,%l,%#))][switch(%q0,0,#-1,%l)]=[setq(1,get(%l/PLACENUMS))][replace(%q1,%q0,remove(extract(%q1,%q0,1,|),%#),|)]
@set Global Place Object=INHERIT
@set Global Place Object=SAFE
@set Global Place Object=STOP
@set Global Place Object=COMMANDS
@parent Global Place Object=#22


=================================+++++================================

@@DBC> Now working with object #21, name: Nonpriv_Evaluator
@create Nonpriv Evaluator=10
@Desc Nonpriv Evaluator=This evaluator can be used with @verb to send literal messages with correct substitutions. To use it, go @verb [num(me)]=<actor>,eval_msg,,oeval_msg,,%{<msg>,<omsg>%}%rExtra arguments may be passed via setq(), and recovered in msg, omsg via %[r(X)%].
&EVAL_MSG Nonpriv Evaluator=[s(%0)]
&OEVAL_MSG Nonpriv Evaluator=[s(%1)]
@set Nonpriv Evaluator=SAFE


=================================+++++================================

@@DBC> Now working with object #22, name: Place_Funcs
@create Place Funcs=10
&ATPLACE Place Funcs=[extract(get(%0/PLACENUMS), %1, 1, |)]
&EVAL_OBJ Place Funcs=#21
&FUNC_ATPLACE Place Funcs=[switch(or(controls(%#,%0),match(rloc(%l,100),rloc(%0,100))),1,extract(get(%0/PLACENUMS), %1, 1, |),PERMISSION DENIED)]
&FUNC_PLACEINFO Place Funcs=[switch(or(controls(%#,%0),match(rloc(%l,100),rloc(%0,100))),1,extract(get(%0/PLACE%1),match(NAME MAXPLACES CURPLACES FIXED FULL EMPTY JOIN OJOIN DEPART ODEPART PREFIX,%2),1,|),PERMISSION DENIED)]
&FUNC_WHICHPLACE Place Funcs=[switch(or(controls(%#,%0),match(rloc(%l,100),rloc(%0,100))),1,match(get(%0/PLACENUMS), *%1%b*, |),PERMISSION DENIED)]
&GETINFO Place Funcs=[extract(get(%0/PLACE%1),match(NAME MAXPLACES CURPLACES FIXED FULL EMPTY JOIN OJOIN DEPART ODEPART PREFIX,%2),1,|)]
&NAME_3AUX_FN Place Funcs=%0[switch(mod(words(%0),4),0,%r[space(33)][ljust(mid(%1,0,14),15)],[ljust(mid(%1,0,14),15)])]
&NAME_3COL_FN Place Funcs=[fold(NAME_3AUX_FN,rest(%0),%r[space(33)][ljust(mid(first(%0),0,14),15)])]
&OCCUPIED_FN Place Funcs=[neq(words(extract(%q9,%0,1,|)),0)]
&OCC_PLACE_FN Place Funcs=[trim(filter(OCCUPIED_FN,rest(lnum(add(get(%0/PLACESMAX),1)))))]
&PLACEFUNCTION Place Funcs=@switch/first 0= [lte(%2, get(%0/PLACESMAX))], @pemit %1=Invalid Place Number '%2'.,[setq(1, extract(get(%0/PLACENUMS), %2, 1, |))][gt(u(GETINFO, %0, %2, CURPLACES), words(%q1))], {@pemit %1=There aren't any free spaces there.},{@verb v(eval_obj)=[setq(0,u(getinfo,%0,%2,NAME))]%1,eval_msg,,oeval_msg,,,{[edit([U(GETINFO, %0, %2, JOIN)] %q0.,%,,%%%,)],[edit([U(GETINFO, %0, %2, OJOIN)] %q0.,%,,%%%,)]}; @pemit/list %q1=[name(%1)] joins you.; &PLACENUMS %0=[replace(get(%0/PLACENUMS), %2, %q1%1%b, |)]}
&PLACENAME Place Funcs=[U(GETINFO, %0, %1, NAME)]
&PLACES_FN Place Funcs=%r[setq(0,u(GETINFO,%l,%0,CURPLACES))][setq(1,extract(get(%l/PLACENUMS),%0,1,|))][capstr(u(GETINFO,%l,%0,NAME))] (#%0) has [setq(2,sub(%q0,words(%q1)))][switch(%q2,0,no empty places,1,1 empty place,%q2 empty places)].[switch(words(%q1),0,,1,%r%tPresent is: %b[name(%q1)].,%r%tPresent are: %b[u(PLACE_LOOK_FN,%q1)])]
&PLOOK_FOLD_FN Place Funcs=%0%r[setq(1,extract(%q9,%1,1,|))]Place #[ljust(%1,5)] [rjust([sub(u(GETINFO,%l,%1,CURPLACES),words(%q1))] empty places,15)] [space(3)] [setq(2,sort(iter(%q1,name(##))))][ljust(mid(extract(%q2,1,1),0,14),14)] [ljust(mid(extract(%q2,2,1),0,14),14)] [ljust(mid(extract(%q2,3,1),0,14),14)][switch(gt(words(%q2),3),1,u(NAME_3COL_FN,extract(%q2,4,3999)))]
&PLOOK_NOPLACE_FN Place Funcs=No place [space(3)] [setq(3,setdiff(setinter(lcon(%0),lwho()),%q0))][rjust([words(%q3)] at no places,15)] [space(3)] [setq(4,sort(iter(%q3,name(##))))][ljust(mid(extract(%q4,1,1),0,14),14)] [ljust(mid(extract(%q4,2,1),0,14),14)] [ljust(mid(extract(%q4,3,1),0,14),14)][switch(gt(words(%q4),3),1,u(NAME_3COL_FN,extract(%q4,4,3999)))]
&SETUP_FN Place Funcs=Table %0|%1|[add(rand(%1),1)]||I'm sorry, there's no room to add a place there.|I'm sorry, there's no place to move there.|You sit down at|sits down at|You stand and leave|stands and leaves|At your table
&UPDATEINFO Place Funcs=[replace(get(%0/PLACE%1),match(NAME MAXPLACES CURPLACES FIXED FULL EMPTY JOIN OJOIN DEPART ODEPART PREFIX,%2),%3,|)]
&WHICHPLACE Place Funcs=[match(get(%0/PLACENUMS), *%1%b*, |)]
&PLACE_LOOK_FN Place Funcs=[setq(9,words(%0))][switch(%q9,0,,1,name(%0),2, [name(first(%0))] and [name(rest(%0))],[iter(extract(%0,1,sub(%q9,1)),{name(##),})] and [name(extract(%0,%q9,1))])]
@set Place Funcs=INHERIT
@set Place Funcs=SAFE


=================================+++++================================

@@DBC> Now working with object #23, name: MailAdmin
&LASTLOGOUT me=797977553
@set me=WIZARD


=================================+++++================================

@@DBC> Now working with object #24, name: BBoard_Functions
@create BBoard Functions=10
&SELECT_FN BBoard Functions=[switch(%0,/*,v(BB_[delete(%0,0,1)]),v(BB_[default(%1/BB_CURRENT,global)]))]
&DASH_LINE BBoard Functions=------------------------------------------------------------------------------
&WHICH_FN BBoard Functions=[switch(%2,all,%1,author:*,[setq(4,num(*[rest(%2,:)]))][filter(AUTHOR_FILT_FN,%1)],from:*,extract(%1,rest(%2,:),%3),last:*,switch(gt(rest(%2,:),%3),1,%1,extract(%1,add(sub(%3,rest(%2,:)),1),rest(%2,:))),new,extract(%1,u(NEXT_NEW_FN,%1,rest(grab(default(%#/BB_LAST,%0:0),%0:*),:),%3),%3),subject:*,[setq(4,rest(%2,:))][filter(SUBJECT_FILT_FN,%1)],text:*,[setq(4,rest(%2,:))][filter(TEXT_FILT_FN,%1)],time:*,[setq(4,u(TIMECVT_FN,rest(%2,:)))][filter(TIME_FILT_FN,%1)],*-*,extract(%1,first(%2,-),add(sub(rest(%2,-),first(%2,-)),1)),extract(%1,%2,1))]
&DOT_LINE BBoard Functions=............................................................................
&CAN_POST_FN BBoard Functions=[or(hasflag(%0,Wizard),Authorized(get(%1/POST_LIST),%0))]
&CAN_READ_FN BBoard Functions=[or(hasflag(%0,Wizard),Authorized(get(%1/READ_LIST),%0))]
&PERMIT_DEL_FN BBoard Functions=[or(hasflag(%#,Wizard),strmatch(first(get(%q0/HDR_%0)),%#),Authorized(get(%1/ADMIN_LIST),%0))]
&SCAN_FN BBoard Functions=%r[setq(5,get(%q0/HDR_%0))][ljust(member(%q1,%0),5)][ljust(name(first(%q5)),18)][left(convsecs(extract(%q5,2,1)),20)] %b[rest(rest(%q5))]
&READ_FN BBoard Functions=[setq(5,get(%0/HDR_%2))][ljust(member(%1,%2),5)][ljust(name(first(%q5)),18)][left(convsecs(extract(%q5,2,1)),20)] %b[rest(rest(%q5))]%r%r[get(%0/MSG_%2)]%r[v(DOT_LINE)]
&CAN_USE BBoard Functions=[and(match(type(%#),PLAYER),not(match(%N,Guest*)))]
&BOARD_DATA0_FN BBoard Functions=%r[setq(0,v(%0))][setq(1,get(%q0/DATA_MLIST))][setq(2,words(%q1))][switch([u(CAN_READ_FN,%#,%q0)]:[u(CAN_POST_FN,%#,%q0)],0:0,*,1:0,-,0:1,+,%b)] %b[ljust(capstr(lcstr(rest(%0,_))),15)]\[[ljust([words(extract(%q1,u(NEXT_NEW_FN,%q1,rest(grab(default(%#/BB_LAST,%q0:0),%q0:*),:),%q2),%q2))]/%q2,6)][mid(convsecs(extract(get(%q0/HDR_[last(%q1)]),2,1)),4,12)]\] %b%b[get(%q0/PURPOSE)]
&BOARD_DATA1_FN BBoard Functions=%r[setq(0,v(%0))][setq(1,get(%q0/DATA_MLIST))][setq(2,words(%q1))][ljust(capstr(lcstr(rest(%0,_))),15)]\[[ljust([words(extract(%q1,u(NEXT_NEW_FN,%q1,rest(grab(default(%#/BB_LAST,%q0:0),%q0:*),:),%q2),%q2))]/%q2,6)][mid(convsecs(extract(get(%q0/HDR_[last(%q1)]),2,1)),4,12)]\] %b[ljust(get(%q0/PURPOSE),30)] (%q0)
&AUTHOR_FILT_FN BBoard Functions=[strmatch(%q4,first(get(%q0/HDR_%0)))]
&USELOCK_FN BBoard Functions=[match(%c,+bb*)]
&TIMECVT_FN BBoard Functions=[sub(secs(),switch(%0,*d,mul(86400,first(%0,d)),*h,mul(3600,first(%0,h)),*m,mul(60,first(%0,m)),0))]
&TIME_FILT_FN BBoard Functions=[gte(extract(get(%q0/HDR_%0),2,1),%q4)]
&NEXT_NEW_FN BBoard Functions=[switch(gt(%1,last(%0)),0,member(%0,first(sort(setdiff(%0,lnum(1,%1))))),add(%2,1))]
&SUBJECT_FILT_FN BBoard Functions=[strmatch(rest(rest(get(%q0/HDR_%0))),*%q4*)]
&TEXT_FILT_FN BBoard Functions=[strmatch(get(%q0/MSG_%0),*%q4*)]
&BOARD_CHECK_FN BBoard Functions=[setq(0,first(%0,:))][setq(1,get(%q0/DATA_MLIST))][setq(2,words(%q1))][setq(3,words(extract(%q1,u(NEXT_NEW_FN,%q1,rest(%0,:),%q2),%q2)))][switch(%q3,0,,[first(name(%q0))] <%q3>)]
&BB_ANNOUNCE BBoard Functions=#51
@set BBoard Functions=HALTED
@set BBoard Functions=SAFE


=================================+++++================================

@@DBC> Now working with object #25, name: Bulletin_Board
@create Bulletin Board=10
@lock/UseLock Bulletin Board=USELOCK_FN/1
@Startup Bulletin Board=@drain me; @notify me
@Vd Bulletin Board=#24
&DO_BB Bulletin Board=$+bb *: @switch/first hasattr(%vd,BB_%0)=0, {@pemit %#=That is not a valid bulletin board.}, {&BB_CURRENT %#=lcstr(trim(secure(%0))); @pemit %#=Default bulletin board set.}
&DO_POST Bulletin Board=$+bbpost* *=*: @switch/first [setq(0,u(SELECT_FN,%0,%#))]%q0:[u(CAN_POST_FN,%#,%q0)]=:*, {@pemit %#=No such bulletin board.},*:0, {@pemit %#=Permission denied.}, {@wait me={&DATA_MLIST %q0=[get(%q0/DATA_MLIST)] [setq(1,add(get(%q0/DATA_MTOP),1))][r(1)]; &HDR_%q1 %q0=%# [secs()] [mid(%1,0,31)]; &MSG_%q1 %q0=%2; &DATA_MTOP %q0=%q1; @pemit %#=You post a note on the bulletin board.; @notify me}}
&DO_READ Bulletin Board=$+bbread* *: @switch/first [setq(0,u(SELECT_FN,%0,%#))]%q0:[u(CAN_READ_FN,%#,%q0)]:[setq(1,get(%q0/DATA_MLIST))][setq(2,sort(iter(%1,u(WHICH_FN,%q0,%q1,##,words(%q1)))))]%q2=:*:*, {@pemit %#=No such bulletin board.},*:0:*, {@pemit %#=\([first(name(%q0))]\) Permission denied.},*:*:, {@pemit %#=\([first(name(%q0))]\) No messages match.}, {&BB_LAST %#=[setq(9,get(%#/BB_LAST))][setq(8,match(%q9,%q0:*))][setq(7,rest(extract(%q9,%q8,1),:))][switch(gt(last(%q2),%q7),0,%q9,sort(switch(%q8,0,%q9 %q0:[last(%q2)],replace(%q9,%q8,%q0:[last(%q2)]))))]; @pemit %#=\([first(name(%q0))]\) Reading [words(%q2)] message\(s\).; @dolist %q2=@pemit %#=u(READ_FN,%q0,%q1,##)}
&DO_DELETE Bulletin Board=$+bbdel* *: @switch/first [setq(0,u(SELECT_FN,%0,%#))]%q0:[u(CAN_POST_FN,%#,%q0)]:[setq(1,get(%q0/DATA_MLIST))][setq(2,filter(PERMIT_DEL_FN,iter(%1,u(WHICH_FN,%q0,%q1,##,words(%q1)))))]%q2=:*:*, {@pemit %#=No such bulletin board.},*:0:*, {@pemit %#=Permission denied.},*:*:, {@pemit %#=No permitted messages match.}, {@wait me={@dolist %q2={&HDR_## %q0; &MSG_## %q0}; @wait 1={&DATA_MLIST %q0=sort(setdiff(%q1,%q2),n); @pemit %#=You remove [words(%q2)] notes from the bulletin board.; @notify me}}}
&DO_SCAN Bulletin Board=$+bbscan*: @switch/first [switch(%0,/* *,[setq(9,delete(first(%0),0,1))][setq(8,rest(%0))],/*,[setq(9,delete(first(%0),0,1))][setq(8,all)],,[setq(9,default(%#/BB_CURRENT,global))][setq(8,all)],[setq(9,default(%#/BB_CURRENT,global))][setq(8,%0)])][setq(0,v(BB_%q9))]%q0:[u(CAN_READ_FN,%#,%q0)]=:*,{@pemit %#=No such bulletin board.},*:0, {@pemit %#=\([first(name(%q0))]\) Permission denied.}, {@pemit %#=[setq(1,get(%q0/DATA_MLIST))][setq(2,sort(iter(%q8,u(WHICH_FN,%q0,%q1,##,words(%q1)))))][setq(3,words(%q2))][setq(4,[center( \( [ucstr(first(name(%q0)))] \) ,78,-)]%r[space(5)]Name[space(14)]Time[space(18)]Subject%r[v(DASH_LINE)]%r)][switch(%q3:[lt(%q3,41)],0:*,([capstr(lcstr(%q9))]) No messages match.,*:0, %q4[map(SCAN_FN,extract(%q2,1,40))],*:1,%q4[after(map(SCAN_FN,%q2),%r)]%r[v(DASH_LINE)])]; @dolist [setq(5,switch(lt(%q3,41),1,,rest(lnum(add(div(%q3,40),1)))))][setq(6,last(%q5))]%q5={@pemit %#=[after(map(SCAN_FN,extract(%q2,add(mul(##,40),1),40)),%r)][switch(##,%q6,%r[v(DASH_LINE)])]}}
&DO_LIST Bulletin Board=$+bblist: @pemit %#=[v(DASH_LINE)]%r[center(Bulletin Boards,78)]%r[v(DASH_LINE)]%r[u(#10/FMT_5COL_FN,iter(sort(lattr(parent(me)/BB_*)),capstr(first(name(get(parent(me)/##))))))]%r[v(DASH_LINE)]
&DO_CREATE Bulletin Board=$+bbcreate/* *: @switch/first [hasflag(%#,Wizard)]:[get(%vd/BB_%0)]=0:*, {@pemit %#=Permission denied.} ,*:?*,{@pemit %#=That board already exists.} , {@create %0 BB Data; @tel [setq(0,locate(me,%0 BB Data,iT))]%q0=me; @set %q0=halt; &BBNAME %q0=%0; &PURPOSE %q0=%1; &POST_LIST %q0=any; &READ_LIST %q0=any; &ADMIN_LIST %q0=org=WIZ; &DATA_MTOP %q0=1; &BB_%0 %vd=%q0; @pemit %#=Bboard created.}
&DO_LIST_LONG Bulletin Board=$+bblist/l: @pemit %#=[v(DASH_LINE)]%r[center(Bulletin Boards,78)]%r[v(DASH_LINE)]%r[map(BOARD_DATA[hasflag(%#,Wizard)]_FN,sort(lattr(parent(me)/BB_*)))]%r%r[v(DASH_LINE)]
&DO_CLEAR Bulletin Board=$+bbclear: &BB_LAST %#=iter(lattr(parent(me)/BB_*),[v(##)]:[get(v(##)/DATA_MTOP)]); @pemit %#=Bulletin board messages marked read.
&DO_CHECK Bulletin Board=$+bbcheck: @pemit %#=[setq(0,get(%#/BB_LAST))][switch(%q0,,You have not previously read any bulletin boards.,Bulletin boards: [setq(1,edit(%q0,%b,@))][setq(2,sort(trim(squish(map(BOARD_CHECK_FN,%q1,@),@),b,@),a,@))][switch(%q2,,There are no new messages.,new messages on [edit(%q2,@,\\\\,%b)].)])]
@Mailcurf Bulletin Board=-1 -1 51 -1
@set Bulletin Board=INHERIT
@set Bulletin Board=SAFE
@set Bulletin Board=STOP
@set Bulletin Board=COMMANDS
@parent Bulletin Board=#24


=================================+++++================================

@@DBC> Now working with object #26, name: Inspection_Widget
@create Inspection Widget=10
&DO_INSPECT Inspection Widget=$+inspect: @pemit %#=switch(controls(%#,%l),0,Permission denied.,[setq(0,trim(map(BACKLINK_FN,lexits(%l))))][setq(1,trim(map(UNLINK_FN,lexits(%l))))][setq(2,u(OUT_EXIT_FN,locate(%l,out,c)))][setq(3,trim(map(EXIT_ATTRS_FN,lexits(%l))))][setq(4,u(ROOM_ATTRS_FN,%l))][setq(5,trim(map(EXIT_ALIAS_FN,lexits(%l))))]Inspection of [u(FULL_UNP_FN,%l)]:%r%rBacklink problems: [switch(trim(%q0),,None.,%q0)]%rLinkage problems: [switch(trim(%q1),,None.,%q1)]%rAlias problems: [switch(trim(%q5),,None.,%q5)]%r[switch(isdbref(%q2),1,Out exit [u(UNP_FN,%q2)] to [u(FULL_UNP_FN,loc(%q2))].,%q2)]%rExit attribute problems: [switch(%q3,,None.,%q3)]%rRoom attribute problems: [switch(%q4,,None.,%q4)])
&DO_SCOPE Inspection Widget=$+scope: @pemit %#=switch(controls(%#,%l),0,Permission denied.,u(SCOPE_FN,%l))
@set Inspection Widget=INHERIT
@set Inspection Widget=SAFE
@set Inspection Widget=STOP
@set Inspection Widget=COMMANDS
@parent Inspection Widget=#27


=================================+++++================================

@@DBC> Now working with object #27, name: Inspection_Functions
@create Inspection Functions=10
&BACKLINK_FN Inspection Functions=[setq(9,extract(lexits(loc(%0)),member(iter(lexits(loc(%0)),loc(##)),where(%0)),1))][switch(%q9,,No backlink for [u(UNP_FN,%0)].,u(SANE_DIR_FN,%0,%q9))]
&UNP_FN Inspection Functions=[name(%0)]\(%0[flags(%0)]\)
&UNLINK_FN Inspection Functions=[switch(loc(%0),#-1,No link for [u(UNP_FN,%0)].)]
&OUT_EXIT_FN Inspection Functions=[switch(%0,#-1,No out exit.,#-2,More than one out exit.,%0)]
&EXIT_ATTRS_FN Inspection Functions=[setq(3,iter(Desc [switch(lock(%0),,Succ Osucc Odrop,Fail)],switch(words(get(%0/##)),0,##)))][switch(trim(%q3),,,Missing [trim(%q3)] on [u(UNP_FN,%0)].)]
&ROOM_ATTRS_FN Inspection Functions=[setq(4,iter(Desc [switch(lock(%0),,Succ,Fail)],switch(words(get(%0/##)),0,##)))][switch(trim(%q4),,,Missing [trim(%q4)] on [u(UNP_FN,%0)].)]
&FULL_UNP_FN Inspection Functions=[name(%0)] (%0[flags(%0)]/[name(owner(%0))])
&EXIT_ALIAS_FN Inspection Functions=[setq(8,lcstr(edit(iter(name(%0),mid(##,0,1)),%b,)))][setq(7,u(FIND_DIR_FN,%0))][setq(6,member(n ne e se s sw w nw u d l i,%q8))][switch([strmatch(locate(where(%0),%q8,c),%0)]:[neq(%q6,0)]:[eq(member(north northeast east southeast south southwest west northwest up down @@ @@,%q7),%q6)],0:0:*,No acronym alias for [u(UNP_FN,%0)].,0:1:0,No acronym alias <but '%q8' conflicts with dir/cmd> for [u(UNP_FN,%0)].,0:1:1,No acronym alias <and '%q8' should also be an abbrev. for '%q7'> for [u(UNP_FN,%0)].,1:0:*,,1:1:0,Conflict between dir/cmd and acronym alias '%q8' for [u(UNP_FN,%0)].,1:1:1,)]
&DISP_EXIT_FN Inspection Functions=%r[ljust(u(UNP_FN,%0),30)]--> [u(FULL_UNP_FN,loc(%0))]
&NEXTROOM_FN Inspection Functions=[strmatch(v(R[loc(%0)]),)]
&ADD_FOLD_FN Inspection Functions=[add(%0,%1)]
&CAN_INSPECT Inspection Functions=[or(controls(%#,%l),strmatch(first(revwords(name(me))),owner(%l)))]
&SANE_DIR_FN Inspection Functions=[setq(8,u(FIND_DIR_FN,%0))][switch(%q8,,No directional alias on [u(UNP_FN,%0)].,[setq(7,u(REV_DIR_FN,%q8))][switch(locate(loc(%0),%q7,c),#-1,No %q7 backlink for %q8 exit [u(UNP_FN,%0)].,#-2,Ambiguous %q7 backlink for %q8 exit [u(UNP_FN,%0)].)])]
&FIND_DIR_FN Inspection Functions=[extract(north northeast east southeast south southwest west northwest up down,member(iter(north northeast east southeast south southwest west northwest up down,locate(where(%0),##,c)),%0),1)]
&REV_DIR_FN Inspection Functions=[switch(%0,north,south,northeast,southwest,east,west,southeast,northwest,south,north,southwest,northeast,west,east,northwest,southeast,down,up,up,down)]
&SCOPE_FN Inspection Functions=Data for [u(FULL_UNP_FN,%0)]:%r%r[ljust(Attributes:,13)] [words(lattr(%0))] \(total size [fold(ADD_FOLD_FN,iter(lattr(%0),strlen(get(%0/##))))]\)%r[ljust(Views:,13)] [words(lattr(%0/VIEW_*))]%r[ljust(Exits:,13)] [words(lexits(%0))] \([words(filter(IS_DARK_FN,lexits(%0)))] dark\)%r[ljust(Objects:,13)] [words(lcon(%0))] \([words(filter(IS_DARK_FN,lcon(%0)))] dark\)%r[ljust(Parent:,13)] [switch(parent(%0),#-1,None,u(FULL_UNP_FN,parent(%0)))]%r[ljust(Out Exit:,13)] [setq(0,locate(%0,out,c))][switch(%q0,#-1,None,leads to [switch(loc(%q0),#-1,Nothing,#-3,Home,u(FULL_UNP_FN,loc(%q0)))])]
&IS_DARK_FN Inspection Functions=[hasflag(%0,Dark)]
@lock/UseLock Inspection Functions=#0
@set Inspection Functions=INHERIT
@set Inspection Functions=HALTED
@set Inspection Functions=SAFE


=================================+++++================================

@@DBC> Now working with object #28, name: Inspector_Parent
@create Inspector Parent=10
&DO_INSPECT Inspector Parent=$+inspect: &R%l me=[setq(0,trim(map(BACKLINK_FN,lexits(%l))))][setq(1,trim(map(UNLINK_FN,lexits(%l))))][setq(2,u(OUT_EXIT_FN,locate(%l,out,c)))][setq(3,trim(map(EXIT_ATTRS_FN,lexits(%l))))][setq(4,u(ROOM_ATTRS_FN,%l))][setq(5,trim(map(EXIT_ALIAS_FN,lexits(%l))))][trim(%q0 %q1 [switch(isdbref(%q2),0,%q2,)] %q3 %q4 %q5)]; &B_DONE me=sort(setunion(v(B_DONE),%l)); &B_LEFT me=sort(setdiff(v(B_ROOMS),v(B_DONE))); @pemit %#=Inspection of [u(FULL_UNP_FN,%l)]:%r%rBacklink problems: [switch(trim(%q0),,None.,%q0)]%rLinkage problems: [switch(trim(%q1),,None.,%q1)]%rAlias problems: [switch(trim(%q5),,None.,%q5)]%r[switch(isdbref(%q2),1,Out exit [u(UNP_FN,%q2)] to [u(FULL_UNP_FN,loc(%q2))].,%q2)]%rExit attribute problems: [switch(%q3,,None.,%q3)]%rRoom attribute problems: [switch(%q4,,None.,%q4)]; @pemit %#=%r[setq(6,filter(NEXTROOM_FN,lexits(%l)))][switch(%q6,,There are no uninspected rooms linked here.,Possible next rooms:[map(DISP_EXIT_FN,%q6)])]
&DO_NEXTROOM Inspector Parent=$+nextroom: @pemit %#=[setq(0,filter(NEXTROOM_FN,lexits(%l)))][switch(%q0,,There are no uninspected rooms linked here.,Possible next rooms:[map(DISP_EXIT_FN,%q0)])]
&DO_COMMENT Inspector Parent=$+comment *: &R%l me=[v(R%l)] |*| %0; @pemit %#=Inspection comment set.
&DO_COMMENTS Inspector Parent=$+comments: @pemit %#=[center(Inspection for [u(FULL_UNP_FN,%l)],78)]%rComments: [v(R%l)]%rRemarks: [v(N%l)]
&DO_SCOPE Inspector Parent=$+scope: @pemit %#=u(SCOPE_FN,%l)
@Desc Inspector Parent=Commands on the Inspection Board:%r%r[ljust(+scope,20)] Summarizes information about current room.%r[ljust(+inspect,20)] Inspects and marks current room.%r[ljust(+inspect all,20)] Teleports to all rooms in a loop and does an inspection.%r[ljust(+comment <text>,20)] Notes commentary about current room.%r[ljust(+remark <text>,20)] Notes a remark (suggestion) about current room.%r[ljust(+comments,20)] Review current room's inspection.%r[ljust(+nextroom,20)] Print linked uninspected next rooms.%r[ljust(+exit <exit>,20)] Print messages for that exit.%r[ljust(+done,20)] Marks a room as done (adds it to a list, nothing else).%r[ljust(+finish,20)] Finish the inspection. @chowns the board to the builder.%r%rWarning: the Inspection Board will ONLY work if you are standing in a room owned by the builder that this inspection is supposed to be for, or control the room.
&DO_EXIT Inspector Parent=$+exit *: @pemit %#=[setq(0,locate(%l,%0,c))][switch(%q0,#-1,No such exit.,#-2,I'm not sure which one you mean.,Messages on [u(UNP_FN,%q0)]:[iter(Desc [switch(lock(%q0),,Succ Osucc Odrop,Fail)],%r##: [get(%q0/##)])])]
&DO_REMARK Inspector Parent=$+remark *: &N%l me=[v(N%l)] |*| %0; @pemit %#=Inspection remark set.
&DO_INSPECT_ALL Inspector Parent=$+inspect all: @trig me/INSPECT_LOOP_TRIG=%#,v(B_ROOMS)
&INSPECT_LOOP_TRIG Inspector Parent=@tel %0=first(%1); @fo %0=+qinspect; @wait 10={@trig me/INSPECT_[switch(rest(%1),,DONE,LOOP)]_TRIG=%0,rest(%1)}
&INSPECT_DONE_TRIG Inspector Parent=@pemit %0=Inspection of all building done.
&DO_QINSPECT Inspector Parent=$+qinspect: &R%l me=[setq(0,trim(map(BACKLINK_FN,lexits(%l))))][setq(1,trim(map(UNLINK_FN,lexits(%l))))][setq(2,u(OUT_EXIT_FN,locate(%l,out,c)))][setq(3,trim(map(EXIT_ATTRS_FN,lexits(%l))))][setq(4,u(ROOM_ATTRS_FN,%l))][setq(5,trim(map(EXIT_ALIAS_FN,lexits(%l))))][trim(%q0 %q1 [switch(isdbref(%q2),0,%q2,)] %q3 %q4 %q5)]; @pemit %#=Inspection of [u(FULL_UNP_FN,%l)]:%r%rBacklink problems: [switch(trim(%q0),,None.,%q0)]%rLinkage problems: [switch(trim(%q1),,None.,%q1)]%rAlias problems: [switch(trim(%q5),,None.,%q5)]%r[switch(isdbref(%q2),1,Out exit [u(UNP_FN,%q2)] to [u(FULL_UNP_FN,loc(%q2))].,%q2)]%rExit attribute problems: [switch(%q3,,None.,%q3)]%rRoom attribute problems: [switch(%q4,,None.,%q4)]; &B_DONE me=sort(setunion(v(B_DONE),%l)); &B_LEFT me=sort(setdiff(v(B_ROOMS),v(B_DONE)))
&DO_FINISH Inspector Parent=$+finish: &OTHER_ROOMS me=setdiff(search([first(revwords(name(me)))] type=ROOM),iter(lattr(me/R*),rest(##,R))); @parent me; @set me=Visual; @pemit %#=Inspection finished.; @chown me=[first(revwords(name(me)))]
&NOT_GLOBAL Inspector Parent=[strmatch(loc(me),#2)]
@lock/UseLock Inspector Parent=NOT_GLOBAL/0
&DO_DONE Inspector Parent=$+done: &B_DONE me=sort(setunion(v(B_DONE),%l)); &B_LEFT me=sort(setdiff(v(B_ROOMS),v(B_DONE))); @pemit %#=Marked room as done.
&CAN_INSPECT Inspector Parent=[strmatch(first(revwords(name(me))),%#)]
@set Inspector Parent=INHERIT
@set Inspector Parent=HALTED
@set Inspector Parent=SAFE
@set Inspector Parent=COMMANDS
@parent Inspector Parent=#27


=================================+++++================================

@@DBC> Now working with object #29, name: Ambience_Manager
@create Ambience Manager=10
&IS_ROOM Ambience Manager=[strmatch(type(%#),ROOM)]
@lock/UseLock Ambience Manager=IS_ROOM/1
@Startup Ambience Manager=@wipe me/ROOM_Q_*; @wipe me/MSG_Q_*; @wait v(ISECS)=@trig me/LOOP_TRIG=0
&MON_START Ambience Manager=^amb start: &ROOM_Q_[setq(0,get(%#/AMBIENTDELAY))][setq(1,switch(1,lte(%q0,10),1,lte(%q0,20),2,3))]%q1 me=setunion(v(ROOM_Q_%q1),%#); @remit %#=[setq(9,u(SETMSG_FN,%#,v(MSG_Q_%#)))][u(get(%#/AMBIENTREF)/[first(%q9)])]; &MSG_Q_%# me=rest(%q9)
&MON_STOP Ambience Manager=^amb stop: @dolist 1 2 3=&ROOM_Q_## me=setdiff(v(ROOM_Q_##),%#); &MSG_Q_%# me
&SETMSG_FN Ambience Manager=[switch(%1,,[setq(5,lattr(get(%0/AMBIENTREF)/AMBIENT_*))][fold(SHUFFLE_FN,rest(%q5),first(%q5))],%1)]
&SHUFFLE_FN Ambience Manager=[insert(%0,add(rand(words(%0)),1),%1)]
&LISTEN_FN Ambience Manager=[neq(words(setinter(lcon(%0),%q9)),0)]
&PICK_Q_FN Ambience Manager=[switch(mod(%0,6),0,1 2 3,1,1,2,1 2,3,1 3,4,1 2,5,1)]
&ISECS Ambience Manager=600
&LOOP_TRIG Ambience Manager=@dolist [setq(9,lwho())][setq(0,u(PICK_Q_FN,%0))][iter(%q0,setq(##,filter(LISTEN_FN,v(ROOM_Q_##))))]%q0=&ROOM_Q_## me=r(##); @dolist iter(%q0,r(##))={@remit ##=ulocal([get(##/AMBIENTREF)]/[setq(8,v(MSG_Q_##))][first(%q8)]); &MSG_Q_## me=u(SETMSG_FN,##,rest(%q8))}; @wait v(ISECS)=@trig me/LOOP_TRIG=add(mod(%0,6),1)
&CLEAN_TRIG Ambience Manager=@dolist setdiff(lattr(me/MSG_Q_*),iter([v(ROOM_Q_1)] [v(ROOM_Q_2)] [v(ROOM_Q_3)],MSG_Q_##))=&## me
@set Ambience Manager=INHERIT
@set Ambience Manager=MONITOR
@set Ambience Manager=SAFE


=================================+++++================================

@@DBC> Now working with object #30, name: north
@open north;n;northeast;ne;east;e;southeast;se;south;s;southwest;sw;west;w;northwest;nw;up;u;down;d
@lock north=#0
@Desc north=[udefault(%l/DESC_[u(DIR_FN,rest(%c))],There's nothing special in that direction.)]
&DIR_FN north=[switch(%0,n,north,ne,northeast,e,east,se,southeast,s,south,switch(%0,sw,southwest,w,west,nw,northwest,u,up,d,down,%0))]
@Fail north=[udefault(%l/FAIL_[u(DIR_FN,%c)],There is no exit in that direction.)]
@set north=INHERIT


=================================+++++================================

@@DBC> Now working with object #31, name: Descer_Code
@create Descer Code=10
&DO_SET_DESCER Descer Code=$+ds set descer *: @switch/first [setq(0,get(%#/PROPLOC))]%q0:[setq(1,locate(%#,%0,*))]%q1:[controls(%#,%q1)]=:*:*, {@pemit %#=You currently do not have a proploc set up. You must begin chargen first.},*:#-1:*, {@pemit %#=I don't see that here.},*:#-2:*, {@pemit %#=I'm not sure which one you mean.},*:*:0, {@pemit %#=You do not control [name(%q1)] (%q1).}, {&DS_DEF %q0=%q1; &DS_LIST %q0=setunion(get(%q0/DS_LIST),%q1); @pemit %#=Current descer set to [name(%q1)] (%q1).}
&DO_ADD_DESCER Descer Code=$+ds add descer *: @switch/first [setq(0,get(%#/PROPLOC))]%q0:[setq(1,locate(%#,%0,*))]%q1:[controls(%#,%q1)]=:*:*, {@pemit %#=You currently do not have a proploc set up. You must begin chargen first.},*:#-1:*, {@pemit %#=I don't see that here.},*:#-2:*, {@pemit %#=I'm not sure which one you mean.},*:*:0, {@pemit %#=You do not control [name(%q1)] (%q1).}, {&DS_LIST %q0=setunion(get(%q0/DS_LIST),%q1); @pemit %#=Descer [name(%q1)] (%q1) added to list.}
&DO_DEL_DESCER Descer Code=$+ds del descer *: @switch/first [setq(0,get(%#/PROPLOC))][setq(1,get(%q0/DS_LIST))][setq(2,member(%q1,%0))]%q2=0, {@pemit %#=That object is not in your list of descers.}, {&DS_LIST %q0=ldelete(%q1,%q2); @pemit %#=Removed object from your list of descers.}
&DO_DEFAULTS Descer Code=$+ds defaults: @pemit %#=switch([setq(0,get(%#/PROPLOC))]%q0,,You do not have any descer defaults set up.,Dbref %b Name[space(21)]Props %b State[iter(sort(get(%q0/DS_LIST)),%r[ljust(##,7)] [ljust(mid(name(##),0,22),24)] [rjust(words(lattr(##/DS_*)),5)] %b [get(##/DS_DEFAULT)])]%r%rCurrent descer: [get(%q0/DS_DEF)])
&DO_LIST Descer Code=$+ds list: @pemit %#=switch([setq(0,get(%#/PROPLOC))][setq(1,get(%q0/DS_DEF))]%q0:[visible(%#,%q1)],:*,You do not have any descers.,*:,You do not have a current valid descer.,Categories for [name(%q1)] \(%q1\)%r%r[u(FMT_4COL_FN,u(LIST_CAT_FN,%q1))])
&DO_LIST_ONE Descer Code=$+ds list *: @pemit %#=switch([setq(0,get(%#/PROPLOC))][setq(1,get(%q0/DS_DEF))][setq(2,lattr(%q1/DS_%0+*))]%q0:[visible(%#,%q1)]:%q2,:*:*,You do not have any descers.,*::*,You do not have a current valid descer.,*:*:,There are no items in that category.,Items in category '[capstr(lcstr(%0))]' on [name(%q1)] \(%q1\)%r%r[u(FMT_4COL_FN,u(LIST_ITEMS_FN,%q2))])
&DO_VIEW Descer Code=$+ds view *-*: @pemit %#=switch([setq(0,get(%#/PROPLOC))][setq(1,get(%q0/DS_DEF))]%q0:[visible(%#,%q1)],:*,You do not have any descers.,*:,You do not have a current valid descer.,default(%q1/DS_%0+%1,No such item in that category.))
&DO_PREVIEW Descer Code=$+ds preview *: @pemit %#=switch([setq(0,get(%#/PROPLOC))][setq(1,get(%q0/DS_DEF))]%q0:[visible(%#,%q1)],:*,You do not have any descers.,*:,You do not have a current valid descer.,u(PREVIEW_FN,%q1,%0))
&DO_SET_STATE Descer Code=$+ds set state *: @switch/first [setq(0,get(%#/PROPLOC))][setq(1,get(%q0/DS_DEF))]%q0:%q1:[controls(%#,%q1)]=:*:*, {@pemit %#=You do not have any descers.},*::*, {@pemit %#=You do not have a current valid descer.},*:*:0, {@pemit %#=You do not control [name(%q1)] \(%q1\).}, {&DS_DEFAULT %q1=secure(capstr(lcstr(%0))); @pemit %#=Default state set.}
&DO_EDIT Descer Code=$+ds edit *-*: @fo %#={+ed begin [get(get(%#/PROPLOC)/DS_DEF)]/DS_%0+%1}
&IS_DS Descer Code=[strmatch(%c,+ds *)]
@lock/UseLock Descer Code=IS_DS/1
&DO_WEAR Descer Code=$+ds wear *: @desc %#=\[[setq(0,get(get(%#/PROPLOC)/DS_DEF))][switch(%q0,,descer\\(%0\\),descer\\(%q0,%0\\))]\]; @pemit %#=Worn.
&DO_SAVE Descer Code=$+ds save *: &DS_SAVED+%0 [get(get(%#/PROPLOC)/DS_DEF)]=get_eval(%#/Desc); @pemit %#=Your current description is now '%0' in the 'Saved' category of your default descer.
&DO_RESTORE Descer Code=$+ds restore *: @desc %#=[setq(0,get(get(%#/PROPLOC)/DS_DEF))]\[descer\(%q0,[iter(%0,saved=##)]\)\]; @pemit %#=Restored.
&DO_DELETE Descer Code=$+ds delete *: @switch/first [setq(0,get(get(%#/PROPLOC)/DS_DEF))][hasattr(%q0,DS_SAVED+%0)]=0, {@pemit %#=You do not have '%0' as an item in the 'Saved' category of your default descer.}, {&DS_SAVED+%0 %q0; @pemit %#=You delete '%0' from the 'Saved' category of your default descer.}
@set Descer Code=INHERIT
@set Descer Code=SAFE
@set Descer Code=STOP
@set Descer Code=COMMANDS
@parent Descer Code=#32


=================================+++++================================

@@DBC> Now working with object #32, name: Descer_Funcs
@create Descer Funcs=10
&DESCER_GFUN Descer Funcs=[switch([visible(me,%0)]:%1,0:*,,1:,iter(edit(get(%0/DS_STATE+[get(%0/DS_DEFAULT)]),=,+),u(EVAL_FN,%#,%0,##)),iter(edit(%1,=,+),u(EVAL_FN,%#,%0,##)))]
&PREVIEW_FN Descer Funcs=[iter(edit(%1,=,+),u(EVAL_FN,%#,%0,##))]
&EVAL_FN Descer Funcs=[switch(%2,*+*,u(%1/DS_%2),iter(edit(get(%1/DS_STATE+%2),=,+),u(EVAL_FN,%0,%1,##)))]
&LIST_CAT_FN Descer Funcs=[setunion(iter(lattr(%0/DS_*+*),capstr(lcstr(first(rest(##,_),+)))),)]
&LIST_ITEMS_FN Descer Funcs=[sort(iter(%0,capstr(lcstr(rest(##,+)))))]
&FMT_4COL_FN Descer Funcs=[fold(FMT_4AUX_FN,rest(%0),ljust(first(%0),19))]
&FMT_4AUX_FN Descer Funcs=%0[switch(mod(words(%0),4),0,%r[ljust(%1,19)],[ljust(%1,19)])]
@set Descer Funcs=INHERIT
@set Descer Funcs=HALTED
@set Descer Funcs=SAFE


=================================+++++================================

@@DBC> Now working with object #33, name: Editor_Code
@create Editor Code=10
&IS_ED Editor Code=[strmatch(%c,+ed *)]
@lock/UseLock Editor Code=IS_ED/1
&DO_ED Editor Code=$+ed begin */*: @pemit %#=[setq(0,get(%#/PROPLOC))][setq(1,locate(%#,%0,*))][switch(%q0:[cor(writable(%#,%q1/%1),[set(%q0,%1:[get(%q0/%1)])][writable(%#,%q1/%1)])]:[setr(2,get(%q0/ED_SAVE))],:*:*,You do not have a proploc. You need to begin character set-up first.,*:0:*,Permission denied.,*:*:?*,You are already editing '[rest(%q2)]' on [name(first(%q2))] \([first(%q2)]\).,[set(%q0,ED_SAVE:%q1 [ucstr(%1)])][set(%q0,ED_BUFF:[get(%q1/%1)])]\\['+ed -<text>'\, '+ed edit <old>/<new>'\, '+ed proof'\, '+ed save'\, '+ed abort'\\])]
&DO_ED_DASH Editor Code=$+ed -*: @pemit %#=[setq(0,get(%#/PROPLOC))][setq(1,get(%q0/ED_BUFF))][ifelse(get(%q0/ED_SAVE),[set(%q0,ED_BUFF:[setr(2,switch(%q1,,%0,%q1 %0))])]\\[[strlen(%q2)] characters in editor buffer.\\],You are not editing anything.)]
@set Editor Code/DO_ED_DASH = no_parse
&DO_ED_PROOF Editor Code=$+ed proof: @pemit %#=[setq(0,get(%#/PROPLOC))][setq(1,get(%q0/ED_SAVE))][setq(2,get(%q0/ED_BUFF))][switch(%q1,,You are not editing anything.,[center(%b %b[first(%q1)]/[rest(%q1)]%b %b,78,-)]%r%q2%r[center(\\[ [strlen(%q2)] characters \\],78,-)])]
&DO_ED_EDIT Editor Code=$+ed edit */*: @pemit %#=[setq(0,get(%#/PROPLOC))][setq(1,get(%q0/ED_BUFF))][ifelse(get(%q0/ED_SAVE),[set(%q0,ED_BUFF:[setr(2,edit(%q1,%0,%1))])]\\[[strlen(%q2)] characters in editor buffer.\\],You are not editing anything.)]
@set Editor Code/DO_ED_EDIT = no_parse
&DO_ED_SAVE Editor Code=$+ed save: @pemit %#=[setq(0,get(%#/PROPLOC))][setq(1,get(%q0/ED_SAVE))][setq(2,first(%q1))][setq(3,rest(%q1))][switch(%q0:%q1:[writable(%#,%q2/%q3)],:*:*,You are not editing anything.,*::*,You are not editing anything.,*:*:0,You cannot set that attribute on that object.,[set(%q2,%q3:[get(%q0/ED_BUFF)])][set(%q0,ED_BUFF:)][set(%q0,ED_SAVE:)]Editor exited. Saved as '%q3' on [name(%q2)] \(%q2\).)]
&DO_ED_ABORT Editor Code=$+ed abort: @pemit %#=[setq(0,get(%#/PROPLOC))][setq(1,get(%q0/ED_SAVE))][switch(%q0:%q1,:*,You are not editing anything.,*:,You are not editing anything.,[set(%q0,ED_BUFF:)][set(%q0,ED_SAVE:)]Exited editor without saving.)]
@set Editor Code=INHERIT
@set Editor Code=SAFE
@set Editor Code=STOP
@set Editor Code=COMMANDS


=================================+++++================================

@@DBC> Now working with object #34, name: Org_Parent_Object
@create Org Parent Object=10
&DEFAULT_RAW Org Parent Object=_NAME:16 _ONFOR:6 _IDLE:6 _QUIET:3 _LAST:6 _STATUS:30
&DEFAULT_TP Org Parent Object=%r[setq(9,get(%q0/D_%0))][ljust([name(%0)],16)] [ljust([u(ONFOR_FMT_FN,%0)],6)] [ljust([u(IDLE_FMT_FN,%0)],6)] [ljust([u(Q_FMT_FN,%0)],3)] [ljust([u(LAST_FMT_FN,%0)],6)] [ljust([u(STS_FMT_FN,%0)],30)]
&DEFAULT_HDR Org Parent Object=Name             OnFor  Idle   Q   Last   Status                        
@set Org Parent Object=HALTED
@set Org Parent Object=SAFE


=================================+++++================================

@@DBC> Now working with object #35, name: Organization_System
@create Organization System=10
&DO_ROSTER Organization System=$+roster/??? *: @pemit %#=switch([setq(5,%0%1%2)][setq(0,get(%vd/%q5_ORG))]%q0:[u(ISMEMBER_FN,%#,%q0)]:[switch(%3,*=*/*,1[setq(1,first(%3,=))][setq(2,first(rest(%3,=),/))][setq(3,rest(%3,/))],u(MACRO_ROST_FN,%q0,%3))]:[u(TP_EXISTS_FN,%q1)],:*:*:*,That is not a valid organization.,*:0:*:*,Permission denied.,*:*:0:*,[setq(6,u(SORTNUMS_FN,setinter(get(%q0/PLAYERS),objeval(%#,lwho()))))][setq(7,words(%q6))][get(%q0/%q1_HDR)]%r[v(DASH_LINE)],*:*:1:*,[setq(6,iter(u(SORTED_FN,filter([switch(%q2,_CONN,CONN_FILTER_FN,_NAME,NAME_FILTER_FN,SEARCH_FILT_FN)],lattr(%q0/D_*))),num(*##)))][setq(7,words(%q6))][get(%q0/%q1_HDR)]%r[v(DASH_LINE)],Invalid roster specification.); @dolist [switch(%q7,,,0,,lnum(add(div(%q7,30),1)))]=@pemit %#=after([map(%q0/%q1_TP,extract(%q6,add(mul(##,30),1),30))][switch(lte(%q7,mul(add(##,1),30)),1,%r[center(%b\\( %q7 players \\)%b,78,-)])],%r)
&DO_RWHO Organization System=$+rwho *: @pemit %#=switch([setq(5,first(%0,=))][setq(0,get(%vd/%q5_ORG))]%q0:[switch(%0,*=*/*,1[setq(2,first(rest(%0,=),/))][setq(3,rest(%0,/))],*=*,u(MACRO_RWHO_FN,%q0,rest(%0,=)),0)],:*,That is not a valid organization.,*:0,[setq(6,u(SORTNUMS_FN,setinter(u(PLAYERS_FN,%#,%q0,get(%q0/PLAYERS)),objeval(%#,lwho()))))][setq(7,words(%q6))][get(%q0/DEFAULT_HDR)]%r[v(DASH_LINE)],*:1,[setq(6,iter(u(SORTED_FN,filter([switch(%q2,_CONN,CONN_FILTER_FN,_NAME,NAME_FILTER_FN,SEARCH_FILT_FN)],lattr(%q0/D_*))),num(*##)))][setq(7,words(%q6))][get(%q0/DEFAULT_HDR)]%r[v(DASH_LINE)],Invalid roster specification.); @dolist [switch(%q7,,,0,,lnum(add(div(%q6,30),1)))]=@pemit %#=after([map(%q0/DEFAULT_TP,extract(%q6,add(mul(##,30),1),30))][switch(lte(%q7,mul(add(##,1),30)),1,%r[center(%b\\( %q7 players \\)%b,78,-)])],%r)
&DO_QUIET Organization System=$+quiet/??? *: @switch/first [setq(0,get(%vd/%0%1%2_ORG))]%q0:[member(get(%q0/PLAYERS),%#)]:[member(get(%q0/CWHO),%#)]:%3=:*:*:*, {@pemit %#=That organization does not exist.},*:0:*:*, {@pemit %#=You are not part of that organization.},*:*:0:on, {@pemit %#=You are already quiet on %0%1%2.},*:*:*:on, {&CWHO %q0=setdiff(get(%q0/CWHO),%#); @pemit %#=You are now quiet on %0%1%2.},*:*:0:off, {&CWHO %q0=setunion(get(%q0/CWHO),%#); @pemit %#=You are no longer quiet on %0%1%2.},*:*:*:off, {@pemit %#=You are not currently quiet on %0%1%2.}, {@pemit %#=Quiet status must be 'on' or 'off'.}
&DO_CHAT Organization System=$+chat ???=*: @pemit/list u(CHAT_TO_FN,%0%1%2)=u(CHAT_FMT_FN,%3)
&DO_ORGS Organization System=$+orgs: @pemit %#=Org[space(4)]Use[space(16)]Org[space(4)]Use[space(16)]Org[space(4)]Use%r[edit(u(%vg/FMT_3CMUL_FN,rest(iter(sort(lattr(%vd/*_ORG)),@[first(##,_)][repeat(.,4)][get(%vd/[first(##,_)]_USE)]),@)),@,%b)]
&DO_ROSTERS Organization System=$+rosters/???: @pemit %#=[setq(0,get(%vd/%0%1%2_ORG))][switch(%q0,,That organization does not exist.,Rosters available:%r%r[u(%vg/FMT_5COL_FN,iter(lattr(%q0/*_TP),capstr(lcstr(first(##,_)))))])]
&DO_RWHO_ALL Organization System=$+rwho/all ???: @pemit %#=switch([setq(5,%0%1%2)][setq(0,get(%vd/%q5_ORG))]%q0,,That is not a valid organization.,[setq(6,u(SORTNUMS_FN,u(PLAYERS_FN,%#,%q0,get(%q0/PLAYERS))))][setq(7,words(%q6))][get(%q0/DEFAULT_HDR)]%r[v(DASH_LINE)]); @switch %q7=0,,@dolist [lnum(add(div(sub(%q7,1),30),1))]=@pemit %#=after([map(%q0/DEFAULT_TP,extract(%q6,add(mul(##,30),1),30))][switch(lte(%q7,mul(add(##,1),30)),1,%r[center(%b\\( %q7 players \\)%b,78,-)])],%r)
&DO_CHAT_ABBREV Organization System=$=??? *: @pemit/list u(CHAT_TO_FN,%0%1%2)=u(CHAT_FMT_FN,%3)
&DO_MACROS Organization System=$+macros/???: @pemit %#=[setq(0,get(%vd/%0%1%2_ORG))][setq(1,get(%q0/MACROS))][switch(%q0:%q1,:*,That organization does not exist.,*:,No macros exist for that organization.,Macros available:%r%r[u(%vg/FMT_5COL_FN,iter(%q1,capstr(lcstr(first(##,|)))))])]
&DO_RWHO_COLS Organization System=$+rwho: @pemit %#=[setq(0,objeval(%#,lwho()))][setq(1,sort(setunion(iter(%q0,get(##/ORGS)),),d))]Organization[space(36)]Players[iter(extract(%q1,1,15),%r[u(FMT_3RWHO_FN,##)])]; @pemit %#=[switch(gt(words(%q1),15),1,after(iter(extract(%q1,16,15),%r[u(FMT_3RWHO_FN,##)]),%r))]; @pemit %#=[switch(gt(words(%q1),30),1,after(iter(extract(%q1,31,15),%r[u(FMT_3RWHO_FN,##)]),%r))]
&DO_RWHO_STATS Organization System=$+rwho/stats: @pemit %#=[setq(0,objeval(%#,lwho()))][setq(1,sort(setunion(iter(%q0,get(##/ORGS)),),d))][iter(%q1,%r[ljust(mid(name(##),0,24),25)]|[setq(2,words(setinter(%q0,get(##/PLAYERS))))][repeat(=,%q2)]> (%q2))]
@Aconnect Organization System=@dolist get(%#/ORGS)=&CWHO ##=setunion(get(##/CWHO),%#)
@Adisconnect Organization System=@dolist get(%#/ORGS)=&CWHO ##=setdiff(get(##/CWHO),%#)
&DO_RINFO Organization System=$+rinfo/??? */*: @pemit %#=switch([setq(5,%0%1%2)][setq(0,get(%vd/%q5_ORG))]%q0:[u(ISMEMBER_FN,%#,%q0)]:[setq(1,num(*%3))]%q1:[setq(9,get(%q0/D_%q1))][words(%q9)],:*:*:*,That is not a valid organization.,*:0:*:*,Permission denied.,*:*:*:0,[name(%q1)] is not part of that organization.,[name(%q1)]'s [setq(2,ucstr(%4))]%q2 field: [setq(9,get(%q0/D_%q1))][u(GET_DATA_FN,%q0,%q2)])
@Startup Organization System=@switch/first restarts()=0, {think [iter(lattr(%vd/*_ORG),set(get(%vd/##),CWHO:))]}, {think [iter(lattr(%vd/*_ORG),set(setr(0,get(%vd/##)),CWHO:[setinter(get(%q0/CWHO),lwho())]))]}
@set Organization System=INHERIT
@set Organization System=SAFE
@set Organization System=COMMANDS
@parent Organization System=#37


=================================+++++================================

@@DBC> Now working with object #36, name: Organization_Admin_Object
@create Organization Admin Object=10
&DO_ADD_KEY Organization Admin Object=$+org/??? add key *=*: @switch/first [setq(0,get(%vd/%0%1%2_ORG))]%q0:[u(KEYS_POS_FN,%q0,%3)]:[u(VALID_RULE_FN,%4)]:[u(CAN_MOD_KEY_FN,%#,%q0,%3)]=:*:*:*, {@pemit %#=That is not a valid organization.},*:*:0:*, {@pemit %#=That is not a valid key rule.},*:*:*:0, {@pemit %#=Permission denied.},*:0:1:1, {&KEYS %q0=[get(%q0/KEYS)] [ucstr(%3)]:[lcstr(%4)]; @pemit %#=New key added.}, {@pemit %#=That key is already defined.}
&DO_DEL_KEY Organization Admin Object=$+org/??? del key *: @switch/first [setq(0,get(%vd/%0%1%2_ORG))][setq(1,u(KEYS_POS_FN,%q0,%3))]%q0:%q1:[u(CAN_MOD_KEY_FN,%#,%q0,%3)]=:*:*, {@pemit %#=That is not a valid organization.},:0:*, {@pemit %#=That key does not exist.},:*:0, {@pemit %#=Permission denied.}, {@dolist lattr(%q0/D_*)=&## %q0=ldelete(get(%q0/##),match(get(%q0/##),%3:*)); @wait 1={&KEYS %q0=ldelete(get(%q0/KEYS),%q1); @pemit %#=Key and associated data deleted.}}
&DO_FIX_KEY Organization Admin Object=$+org/??? fix key *=*: @switch/first [setq(0,get(%vd/%0%1%2_ORG))][setq(1,u(KEYS_POS_FN,%q0,%3))]%q0:%q1:[u(CAN_MOD_KEY_FN,%#,%q0,%3)]:[u(VALID_RULE_FN,%4)]=:*:*:*, {@pemit %#=That is not a valid organization.},*:0:*:*, {@pemit %#=That key does not exist.},*:*:0:*, {@pemit %#=Permission denied.},*:*:*:0, {@pemit %#=That is not a valid key rule.}, {&KEYS %q0=replace(get(%q0/KEYS),%q1,[ucstr(%3)]:[lcstr(%4)]); @pemit %#=Key rule modified.}
&DO_ORG_NEW Organization Admin Object=$+org/??? new *: @switch/first [setq(0,get(%vd/%0%1%2_ORG))][setq(1,num(*%3))]%q0:%q1:[u(CAN_MOD_FN,%#,%q0)]:[member(get(%q0/PLAYERS),%q1)]=:*:*:*, {@pemit %#=That is not a valid organization.},*:#-1:*:*, {@pemit %#=That is not a valid player.},*:*:0:*, {@pemit %#=Permission denied.},*:*:*:0, {&ORGS %q1=setunion(get(%q1/ORGS),%q0); &PLAYERS %q0=setunion(get(%q0/PLAYERS),%q1); &CWHO %q0=setunion(get(%q0/CWHO),%q1); &D_%q1 %q0=QUOTA:0; @quota/fix %q1; @trig me/NEW_QUOTA[lt(first(get(%q1/Quota)),6)]_TRIG=%#,%q1; @pemit %#=Player added to organization.}, {@pemit %#=That player is already in that organization.}
&DO_ORG_EDIT Organization Admin Object=$+org/??? edit */*=*/*: @switch/first [setq(0,get(%vd/%0%1%2_ORG))][setq(1,num(*%3))][setq(2,u(KEYS_POS_FN,%q0,%4))][setq(3,rest(extract(get(%q0/KEYS),%q2,1),:))][setq(4,get(%q0/D_%q1))][setq(5,match(%q4,%4:*))][setq(6,edit(u(UNSCRAW_FN,rest(extract(%q4,%q5,1),:)),%5,%6))]%q0:%q1:[u(CAN_MOD_FN,%#,%q0)]:%q2:%q5:[u(OK_DATA_FN,%q3,%q6)]:[strmatch(QUOTA,%4)]=:*:*:*:*:*:*, {@pemit %#=That is not a valid organization.},*:#-1:*:*:*:*:*, {@pemit %#=That is not a valid player.},*:*:0:*:*:*:*, {@pemit %#=Permission denied.},*:*:*:0:*:*:*, {@pemit %#=That key does not exist.},*:*:*:*:0:*:*, {@pemit %#=That data field does not exist for that player.},*:*:*:*:*:0:*, {@pemit %#The resulting data does not fit the key rule.}, *:*:*:*:*:*:1, {@pemit %#=You cannot modify the QUOTA key.}, {&D_%q1 %q0=replace(%q4,%q5,[ucstr(%4)]:[u(MUNGE_DATA_FN,%q3,%q6)]); @pemit %#=Data edited.}
&DO_ORG_MOD Organization Admin Object=$+org/??? mod */*=*: @switch/first [setq(0,get(%vd/%0%1%2_ORG))][setq(1,num(*%3))][setq(2,u(KEYS_POS_FN,%q0,%4))][setq(3,rest(extract(get(%q0/KEYS),%q2,1),:))]%q0:%q1:[u(CAN_MOD_FN,%#,%q0)]:%q2:[u(OK_DATA_FN,%q3,%5)]:[member(get(%q0/PLAYERS),%q1)]:[strmatch(QUOTA,%4)]=:*:*:*:*:*:*, {@pemit %#=That is not a valid organization.},*:#-1:*:*:*:*:*, {@pemit %#=That is not a valid player.},*:*:0:*:*:*:*, {@pemit %#=Permission denied.},*:*:*:0:*:*:*, {@pemit %#=That key does not exist.},*:*:*:*:0:*:*, {@pemit %#=That data does not fit the key rule.},*:*:*:*:*:0:*, {@pemit %#=That player is not part of this organization.},*:*:*:*:*:*:1, {@pemit %#=You cannot modify the QUOTA key.}, {&D_%q1 %q0=[setq(7,u(MUNGE_DATA_FN,%q3,%5))][setq(8,get(%q0/D_%q1))][setq(9,match(%q8,%4:*))][switch(%q9:%5,*:,ldelete(%q8,%q9),0:*,%q8 [ucstr(%4)]:%q7,replace(%q8,%q9,[ucstr(%4)]:%q7))]; @pemit %#=Data modified.}
&DO_ORG_ADD_TEMPLATE Organization Admin Object=$+org/??? add template *=*: @switch/first [setq(0,get(%vd/%0%1%2_ORG))]%q0:[u(CAN_MOD_FN,%#,%q0)]:[u(VALID_TP_FN,%4)]:[member(lattr(%q0/*_RAW),[ucstr(%3)]_RAW)]=:*:*:*, {@pemit %#=That is not a valid organization.},*:0:*:*, {@pemit %#=Permission denied.},*:*:0:*, {@pemit %#=That template format is not valid.},*:*:*:0, {&%3_RAW %q0=trim(ucstr(%4)); &%3_TP %q0=\%r\[setq(9,get(\%q0/D_\%0))\][map(RAW2TP_FN,get(%q0/%3_RAW))]; &%3_HDR %q0=[map(RAW2HDR_FN,get(%q0/%3_RAW))]; @pemit %#=New template added. [squish(map(TP_WARN_FN,get(%q0/%3_RAW)))]}, {@pemit %#=That template already exists.}
&DO_ORG_EDIT_TEMPLATE Organization Admin Object=$+org/??? edit template *=*/*: @switch/first [setq(0,get(%vd/%0%1%2_ORG))][setq(1,edit(get(%q0/%3_RAW),%4,%5))]%q0:[u(CAN_MOD_FN,%#,%q0)]:[u(VALID_TP_FN,%q1)]:[member(lattr(%q0/*_RAW),[ucstr(%3)]_RAW)]=:*:*:*, {@pemit %#=That is not a valid organization.},*:0:*:*, {@pemit %#=Permission denied.},*:*:0:*, {@pemit %#=That template format is not valid.},*:*:*:0, {@pemit %#=That template does not exist.}, {&%3_RAW %q0=trim(ucstr(%q1)); &%3_TP %q0=\%r\[setq(9,get(\%q0/D_\%0))\][map(RAW2TP_FN,get(%q0/%3_RAW))]; &%3_HDR %q0=[map(RAW2HDR_FN,get(%q0/%3_RAW))]; @pemit %#=Template edited. [squish(map(TP_WARN_FN,get(%q0/%3_RAW)))]}
&DO_ORG_DEL_TEMPLATE Organization Admin Object=$+org/??? del template *: @switch/first [setq(0,get(%vd/%0%1%2_ORG))]%q0:[u(CAN_MOD_FN,%#,%q0)]:[member(lattr(%q0/*_RAW),[ucstr(%3)]_RAW)]=:*:*, {@pemit %#=That is not a valid organization.},*:0:*, {@pemit %#=Permission denied.},*:*:0, {@pemit %#=That template does not exist.}, {&%3_RAW %q0; &%3_TP %q0; &%3_HDR %q0; @pemit %#=Template deleted.}
&DO_ORG_ADD_LIST Organization Admin Object=$+org/??? add list *=*: @switch/first [setq(0,get(%vd/%0%1%2_ORG))]%q0:[u(CAN_MOD_FN,%#,%q0)]:[member(lattr(%q0/*_LIST),[ucstr(%3)]_LIST)]=:*:*, {@pemit %#=That is not a valid organization.},*:0:*, {@pemit %#=Permission denied.},*:*:0, {&%3_LIST %q0=%4; @pemit %#=New list added.}, {@pemit %#=That list already exists.}
&DO_ORG_DEL_LIST Organization Admin Object=$+org/??? del list *: @switch/first [setq(0,get(%vd/%0%1%2_ORG))]%q0:[u(CAN_MOD_FN,%#,%q0)]:[member(lattr(%q0/*_LIST),[ucstr(%3)]_LIST)]=:*:*, {@pemit %#=That is not a valid organization.},*:0:*, {@pemit %#=Permission denied.},*:*:0, {@pemit %#=That list does not exist.}, {&%3_LIST %q0; @pemit %#=List deleted.}
&DO_ORG_EDIT_LIST Organization Admin Object=$+org/??? edit list *=*/*: @switch/first [setq(0,get(%vd/%0%1%2_ORG))]%q0:[u(CAN_MOD_FN,%#,%q0)]:[member(lattr(%q0/*_LIST),[ucstr(%3)]_LIST)]=:*:*, {@pemit %#=That is not a valid organization.},*:0:*, {@pemit %#=Permission denied.},*:*:0, {@pemit %#=That list does not exist.}, {&%3_LIST %q0=edit(get(%q0/%3_LIST),%4,%5); @pemit %#=List edited.}
&DO_ORG_LISTS Organization Admin Object=$+org/??? lists: @pemit %#=[setq(0,get(%vd/%0%1%2_ORG))][switch(%q0:[u(CAN_MOD_FN,%#,%q0)],:*,That is not a valid organization.,*:0,Permission denied.,Lists available:%r%r[u(%vg/FMT_5COL_FN,iter(sort(lattr(%q0/*_LIST)),capstr(lcstr(first(##,_)))))])]
&DO_ORG_PREFIX Organization Admin Object=$+org/??? prefix *: @switch/first [setq(0,get(%vd/%0%1%2_ORG))][setq(1,secure(%3))]%q0$[u(CAN_MOD_FN,%#,%q0)]$%q1=$*$*, {@pemit %#=That organization does not exist.},*$0$*, {@pemit %#=Permission denied.},*$*$, {@pemit %#=Null prefixes aren't allowed.}, {@prefix %q0=%q1; @pemit %#=Prefix set.}
&DO_ORG_KEYS Organization Admin Object=$+org/??? keys: @pemit %#=[setq(0,get(%vd/%0%1%2_ORG))][switch(%q0:[or(member(get(%q0/PLAYERS),%#),hasflag(%#,Wizard))],:*,That is not a valid organization.,*:0,Permission denied.,Keys:%r%r[u(%vg/FMT_3COL_FN,sort(get(%q0/KEYS)))])]
&DO_ORG_SHOW_TEMPLATE Organization Admin Object=$+org/??? show template *: @pemit %#=switch([setq(0,get(%vd/%0%1%2_ORG))]%q0:[u(CAN_MOD_FN,%#,%q0)]:[member(lattr(%q0/*_RAW),[ucstr(%3)]_RAW)],:*:*,That is not a valid organization.,*:0:*,Permission denied.,*:*:0,That template does not exist.,Template: [get(%q0/%3_RAW)])
&DO_ORG_TEMPLATES Organization Admin Object=$+org/??? templates: @pemit %#=[setq(0,get(%vd/%0%1%2_ORG))][switch(%q0:[u(CAN_MOD_FN,%#,%q0)],:*,That is not a valid organization.,*:0,Permission denied.,Templates available:%r%r[u(%vg/FMT_5COL_FN,iter(sort(lattr(%q0/*_RAW)),capstr(lcstr(first(##,_)))))])]
&DO_ORG_CREATE Organization Admin Object=$+org/??? create * for *=*: @switch/first [setq(5,%0%1%2)][setq(0,get(%vd/%q5_ORG))]%q0:[hasflag(%#,Wizard)]=?*:*, {@pemit %#=That organization already exists.},*:0, {@pemit %#=Permission denied.}, {@clone/parent/inventory %vp=%4; @tel [setq(1,locate(me,%4,iT))]%q1=%vd; &%q5_ORG %vd=%q1; &%q5_USE %vd=%4; &ADMIN_DBREFS %q1=iter(%5,num(*##)); &KEYS %q1=QUOTA:num; @prefix %q1=<%q5>; &EMAIL %q1=%3; @pemit %#=Organization created.}
&DO_ORG_SHOW_LIST Organization Admin Object=$+org/??? show list *: @pemit %#=[switch([setq(0,get(%vd/%0%1%2_ORG))][setq(1,get(%q0/%3_LIST))]%q0:[member(get(%q0/PLAYERS),%#)]:%q1,:*:*,{That is not a valid organization.},*:0:*,{Permission denied.},*:*:,{No such list for that organization.}, {Valid words:%r%r[u(%vg/FMT_5COL_FN,%q1)]})]
&DO_ADD_ADMIN Organization Admin Object=$+org/??? add admin *: @switch/first [setq(0,get(%vd/%0%1%2_ORG))]%q0:[u(CAN_MOD_FN,%#,%q0)]:[setq(1,num(*%3))]%q1:[u(CAN_MOD_FN,%q1,%q0)]=:*:*:*, {@pemit %#=That is not a valid organization.},*:0:*:*, {@pemit %#=Permission denied.},*:*:#-1:*, {@pemit %#=No such player.},*:*:*:1, {@pemit %#=That player is already an admin for that organization.}, {&ADMIN_DBREFS %q0=[get(%q0/ADMIN_DBREFS)] %q1; @pemit %#=Admin added.}
&DO_DEL_ADMIN Organization Admin Object=$+org/??? del admin *: @switch/first [setq(0,get(%vd/%0%1%2_ORG))][setq(1,num(*%3))]%q0:[u(CAN_MOD_FN,%#,%q0)]:%q1:[u(CAN_MOD_FN,%q1,%q0)]=:*:*:*, {@pemit %#=That is not a valid organization.},*:0:*:*, {@pemit %#=Permission denied.},*:*:#-1:*, {@pemit %#=No such player.},*:*:*:0, {@pemit %#=That player is not an admin for that organization.}, {&ADMIN_DBREFS %q0=[remove(get(%q0/ADMIN_DBREFS),%q1)]; @pemit %#=Admin deleted.}
&DO_ORG_ADMINS Organization Admin Object=$+org/??? admins: @pemit %#=[setq(0,get(%vd/%0%1%2_ORG))][switch(%q0:[or(member(get(%q0/PLAYERS),%#),hasflag(%#,Wizard))],:*,That is not a valid organization.,*:0,Permission denied.,Admins:%r%r[u(%vg/FMT_5COL_FN,sort(iter(get(%q0/ADMIN_DBREFS),name(##))))])]
&DO_ORG_DELETE Organization Admin Object=$+org/??? delete *: @switch/first [setq(0,get(%vd/%0%1%2_ORG))][setq(1,num(*%3))]%q0:[u(CAN_MOD_FN,%#,%q0)]:[setq(2,get(%q0/PLAYERS))][member(%q2,%q1)]=:*:*, {@pemit %#=That is not a valid organization.},*:0:*, {@pemit %#=Permission denied.},*:*:0, {@pemit %#=No such player in that organization.}, {&D_%q1 %q0; &CWHO %q0=[remove(get(%q0/CWHO),%q1)]; &PLAYERS %q0=[remove(%q2,%q1)]; &ORGS %q1=[remove(get(%q1/ORGS),%q0)]; @pemit %#=Player removed from organization.}
&DO_ORG_HUSH Organization Admin Object=$+org/??? hush *: @switch [setq(0,get(%vd/%0%1%2_ORG))]%q0:[u(CAN_MOD_FN,%#,%q0)]:%3=:*:*, {@pemit %#=That is not a valid organization.},*:0:*, {@pemit %#=Permission denied.},*:*:on, {@set %q0=opaque; @pemit %#=Organization chat system disabled.},*:*:off, {@set %q0=!opaque; @pemit %#=Organization chat system enabled.}, {@pemit %#=hush on or off, please.}
&DO_ORG_ADD_MACRO Organization Admin Object=$+org/??? add macro * for *=*/*: @switch/first [setq(0,get(%vd/%0%1%2_ORG))]%q0:[u(CAN_MOD_FN,%#,%q0)]:[u(VALID_MACRO_FN,%q0,%3)]=:*:*, {@pemit %#=That is not a valid organization.},*:0:*, {@pemit %#=Permission denied.},*:*:0, {@pemit %#=That is not valid new macro name.}, {&MACROS %q0=[get(%q0/MACROS)] [ucstr(%3)]|[lcstr(trim(%4))]=[lcstr(trim(%5))]/[lcstr(trim(%6))]; @pemit %#=Macro defined.}
&DO_ORG_DEL_MACRO Organization Admin Object=$+org/??? del macro *: @switch/first [setq(0,get(%vd/%0%1%2_ORG))]%q0:[u(CAN_MOD_FN,%#,%q0)]:[setq(9,get(%q0/MACROS))][setq(1,match(%q9,%3|*))]%q1=:*:*, {@pemit %#=That is not a valid organization.},*:0:*, {@pemit %#=Permission denied.},*:*:0, {@pemit %#=That macro does not exist.}, {&MACROS %q0=ldelete(%q9,%q1); @pemit %#=Macro removed.}
&DO_ORG_PRIVATE Organization Admin Object=$+org/??? private *: @switch [setq(0,get(%vd/%0%1%2_ORG))]%q0:[u(CAN_MOD_FN,%#,%q0)]:%3=:*:*, {@pemit %#=That is not a valid organization.},*:0:*, {@pemit %#=Permission denied.},*:*:off, {@set %q0=haven; @pemit %#=Organization private membership lists disabled.},*:*:on, {@set %q0=!haven; @pemit %#=Organization private membership lists enabled.}, {@pemit %#=private on or off, please.}
&DO_ORG_STATUS Organization Admin Object=$+org/??? status: @pemit %#=[setq(0,get(%vd/%0%1%2_ORG))][switch(%q0:[u(CAN_MOD_FN,%#,%q0)],:*,That is not a valid organization.,*:0,Permission denied.,u(STATUS_FN,%q0))]
@lock/UseLock Organization Admin Object=USELOCK_FN/1
@set Organization Admin Object=INHERIT
@set Organization Admin Object=SAFE
@set Organization Admin Object=STOP
@set Organization Admin Object=COMMANDS
@parent Organization Admin Object=#37


=================================+++++================================

@@DBC> Now working with object #37, name: Organization_Functions
@create Organization Functions=10
&RAW2TP_FN Organization Functions=\[ljust([u(RAW_SW_FN,first(%0,:))],[rest(%0,:)])\]
&KEYS_POS_FN Organization Functions=[match(get(%0/KEYS),%1:*)]
&VALID_RULE_FN Organization Functions=[or(strmatch(PLAYER,%0),strmatch(DBREF,%0),strmatch(NUM,%0),and(strmatch(%0,TEXT-*),isnum(rest(%0,-))),strmatch(%0,LIST-*))]
&CAN_MOD_FN Organization Functions=[neq(or(member(get(%1/ADMIN_DBREFS),%0),hasflag(%0,WIZARD)),0)]
&OK_DATA_FN Organization Functions=[switch(%0:%1,*:,,PLAYER:*,isdbref(num(*%1)),DBREF:*,isdbref(%1),NUM:*,isnum(%1),TEXT-*:*,1,LIST-*:*,neq(match(get(%q0/[rest(%0,-)]_LIST),%1),0),0)]
&MUNGE_DATA_FN Organization Functions=[switch(%0:%1,*:,,PLAYER:*,num(*%1),DBREF:*,trim(%1),NUM:*,trunc(%1),TEXT-*:*,edit(trim(mid(%1,0,rest(%0,-))),%b,~),LIST-*:*,trim(%1),ERROR)]
&UNSCRAW_FN Organization Functions=[switch(isdbref(%0),1,name(%0),edit(%0,~,%b))]
&VALID_TP_FN Organization Functions=[eq(member(map(OK_TP_FIELD_FN,%0),0),0)]
&OK_TP_FIELD_FN Organization Functions=[or(member(_CONN _IDLE _LAST _LOC _NAME _ONFOR _QUIET _SEX _STATUS,first(%0,:)),match(get(%q0/KEYS),[first(%0,:)]:*))]
&TP_WARN_FN Organization Functions=[switch(0,gt(rest(%0,:),0),Warning: Non-positive field length for %0.,gte(rest(%0,:),u(FIELD_LEN_FN,first(%0,:))),Warning: field length for %0 is less than maximum key data length.)]
&FIELD_LEN_FN Organization Functions=[switch(%0,_CONN,1,_IDLE,4,_LAST,4,_LOC,30,_ONFOR,5,_NAME,16,_QUIET,1,_SEX,3,_STATUS,5,rest(extract(get(%q0/KEYS),match(get(%q0/KEYS),%0:*),1),:))]
&RAW2HDR_FN Organization Functions=[ljust(switch(first(%0,:),_CONN,,_IDLE,Idle,_LAST,Last,_ONFOR,OnFor,_LOC,Location,_NAME,Name,_QUIET,Q,_SEX,Sex,_STATUS,Status,capstr(lcstr(first(%0,:)))),rest(%0,:))]
&CONN_FMT_FN Organization Functions=[switch(objeval(%#,hasflag(%0,Connect)),0,%b,*)]
&ONFOR_FMT_FN Organization Functions=[switch(objeval(%#,hasflag(%0,Conn)),1,[rjust(div(conn(%0),3600),2,0)]:[rjust(div(mod(conn(%0),3600),60),2,0)])]
&IDLE_FMT_FN Organization Functions=%b[switch(objeval(%#,hasflag(%0,Conn)),1,[setq(8,div(idle(%0),3600))][switch(gte(%q8,1),1,[rjust(%q8,2)]h,[setq(8,div(idle(%0),60))][switch(gte(%q8,1),1,[rjust(%q8,2)]m,[rjust(idle(%0),2)]s)])])]
&SEX_FMT_FN Organization Functions=\([switch(get(%0/Sex),F*,F,M*,M,-)]\)
&GET_DATA_FN Organization Functions=[u(UNSCRAW_FN,rest(extract(%q9,match(%q9,%1:*),1),:))]
&RAW_SW_FN Organization Functions=switch(%0,_CONN,\\\[u(CONN_FMT_FN,\\\%0)\\\],_IDLE,\\\[u(IDLE_FMT_FN,\\\%0)\\\],_LAST,\\\[u(LAST_FMT_FN,\\\%0)\\\],_LOC,\\\[u(LOC_FMT_FN,\\\%0)\\\],_ONFOR,\\\[u(ONFOR_FMT_FN,\\\%0)\\\],_NAME,\\\[name(\\\%0)\\\],_QUIET,\\\[u(Q_FMT_FN,\\\%0)\\\],_SEX,\\\[u(SEX_FMT_FN,\\\%0)\\\],_STATUS,\\\[u(STS_FMT_FN,\\\%0)\\\],\\\[u(GET_DATA_FN,\\\%0,%0)\\\])
&SORTED_FN Organization Functions=[sort(iter(%0,name(rest(##,_))))]
&TP_EXISTS_FN Organization Functions=[words(lattr(%q0/%0_TP))]
&CONN_FILT_FN Organization Functions=[objeval(%#,hasflag(rest(%0,_),Conn))]
&SEARCH_FILT_FN Organization Functions=[neq(match(rest(grab(get(%q0/%0),%q2:*),:),%q3),0)]
&DASH_LINE Organization Functions=------------------------------------------------------------------------------
&Q_FMT_FN Organization Functions=[switch(and(not(hasflag(%0,DARK)),member(get(%q0/CWHO),%0)),0,-,%b)]
&STS_FMT_FN Organization Functions=[mid(get(%0/%q5_STATUS),0,40)]
&SORTDB_FN Organization Functions=[sort(iter(%0,name(*##)))]
&LAST_FMT_FN Organization Functions=[rjust(switch([setq(8,sub(secs(),convtime(get(%0/Last))))]1,objeval(%#,hasflag(%0,Conn)),On,gte(%q8,604800),[div(%q8,604800)]w,gte(%q8,86400),[div(%q8,86400)]d,gte(%q8,3600),[div(%q8,3600)]h,gte(%q8,60),[div(%q8,60)]m,%q8s),4)]
&CAN_MOD_KEY_FN Organization Functions=[and(u(CAN_MOD_FN,%0,%1),not(strmatch(QUOTA,%2)))]
&ORGWHO_GFUN Organization Functions=[u(PLAYERS_FN,%#,get(%vd/%0_ORG),get(get(%vd/%0_ORG)/PLAYERS))]
&ORGINFO_GFUN Organization Functions=[switch(member(get(owner(%#)/ORGS),get(%vd/%0_ORG)),0,#-1 NO MATCH,edit(rest(grab(get(get(%vd/%0_ORG)/D_%1),%2:*),:),~,%b))]
&ORGSEARCH_GFUN Organization Functions=[switch([get(%vd/%0_ORG)]:[before(%1,/)]:[after(%1,/)],:*,#-1 NO MATCH,*::*,#-1 NO MATCH, *:*:, #-1 NO MATCH, ulocal(%vf/ORGSEARCH_AUX_FN, %0, %1))]
&ORGKEYS_GFUN Organization Functions=[switch(member(get(owner(%#)/ORGS),get(%vd/%0_ORG)),0,#-1 NO MATCH,get(get(%vd/%0_ORG)/D_%1))]
&LOC_FMT_FN Organization Functions=[switch(findable(%#,%0),1,mid(name(loc(%0)),0,30))]
&ORGADMIN_GFUN Organization Functions=[not(not(member(get(get(%vd/%0_ORG)/ADMIN_DBREFS),%1)))]
&SORTNUMS_FN Organization Functions=[sortby(NAME_SORT_FN,%0)]
&NUMNAME_FN Organization Functions=[sort(%0)]
&CONN_FILTER_FN Organization Functions=[eq(objeval(%#,hasflag(rest(%0,_),Conn)),%q3)]
&NAME_FILTER_FN Organization Functions=[match(name(rest(%0,_)),%q3)]
&CHAT_FMT_FN Organization Functions=[switch(%q2,0:*,You are not on that channel.,*:1,That channel is disabled,[get(%q0/PREFIX)] [switch(%0,:*,%N [delete(%0,0,1)],;*,%N[delete(%0,0,1)],|*,<%N> [delete(%0,0,1)],"*,{%N says\\\, "[delete(%0,0,1)]"},{%N says\\\, "%0"})])]
&CHAT_TO_FN Organization Functions=[setq(0,get(%vd/%0_ORG))][setq(1,get(%q0/CWHO))][setq(2,[member(%q1,%#)]:[hasflag(%q0,Opaque)])][switch(%q2,0:*,%#,*:1,%#,%q1)]
&MACRO_RWHO_FN Organization Functions=[setq(9,get(%0/MACROS))][setq(9,extract(%q9,match(%q9,%1|default=*/*),1))][switch(%q9,,0,1[setq(2,first(rest(%q9,=),/))][setq(3,rest(%q9,/))])]
&MACRO_ROST_FN Organization Functions=[setq(9,get(%0/MACROS))][setq(9,extract(%q9,match(%q9,%1|*),1))][switch(%q9,,0[setq(1,%1)],1[setq(1,rest(first(%q9,=),|))][setq(2,first(rest(%q9,=),/))][setq(3,rest(%q9,/))])]
&VALID_MACRO_FN Organization Functions=[not(or(neq(words(%1),1),strmatch(%1,*=*),strmatch(%1,*|*),strmatch(%1,*/*),strmatch(%1,*:*),match(get(%0/MACROS),[trim(%1)]|*)))]
&ORGSEARCH_AUX_FN Organization Functions=[setq(2,before(%1,/))][setq(3,after(%1,/))][setq(0,get(%vd/%0_ORG))][switch([setq(6,iter(filter(%vf/SEARCH_FILT_FN,lattr(%q0/D_*)),num(*[after(##,_)])))]%q6,,#-1 NO MATCH,%q6)]
&DARK_WIZ_FIX Organization Functions=[not(hasflag(%0,DARK))]
&USELOCK_FN Organization Functions=[match(%c,+org/*)]
@lock/UseLock Organization Functions=#0
&FMT_3RWHO_FN Organization Functions=[ljust(name(%0),47)] [setq(2,sort(iter(setinter(orgwho(ulocal(DBREF2ORG_FN,%0)),%q0),name(##))))][ljust(mid(extract(%q2,1,1),0,9),9)] [ljust(mid(extract(%q2,2,1),0,9),9)] [ljust(mid(extract(%q2,3,1),0,9),9)][switch(gt(words(%q2),3),1,u(%vg/NAME_3COL_FN,extract(%q2,4,3999)))]
&AUTH_LIST_FN Organization Functions=[iter(%0,switch(##,any,%1,#*/*,get(##),#*,##,org=*:*/*,OrgSearch(first(rest(##,=),:),rest(##,:)),org=*,OrgWho(rest(##,=)),num(*##)))]
&AUTHORIZED_GFUN Organization Functions=[neq(member(u(AUTH_LIST_FN,%0,%1),%1),0)]
&XNEW_QUOTA0_TRIG Organization Functions=@pemit %0={[name(%1)] already has an extended quota; no quota added.}
&XNEW_QUOTA1_TRIG Organization Functions=@quota %1=6; @quota/room %1=1; @quota/exit %1=3; @quota/thing %1=5; @quota/player %1=2; @quota/fix %1; @pemit %0={[name(%1)]'s quota extended to standard player quota.}
&ISMEMBER_FN Organization Functions=[or(member(get(%1/PLAYERS),%0),hasflag(%0,Wizard))]
&PLAYERS_FN Organization Functions=[switch(or(hasflag(%1,Haven),member(%2,%0),visible(%0,%1)),0,,%2)]
&STATUS_FN Organization Functions=[name(%0)] \(%0\)%rEmail: [get(%0/EMAIL)]%rMembership: [words(lattr(%0/D_#*))]%rChat System: [switch(hasflag(%0,Opaque),0,Enabled,Disabled)]%rPrivate: [switch(hasflag(%0,Haven),0,Yes,No)]
@Vp Organization Functions=#34
@Vd Organization Functions=#38
@Vf Organization Functions=#37
@Vg Organization Functions=#10
&NAME_SORT_FN Organization Functions=[comp(name(%0),name(%1))]
&DBREF2ORG_FN Organization Functions=[setq(0,lattr(%vd/*_ORG))][setq(1,iter(%q0,get(%vd/##)))][elements(iter(%q0,first(##,_)),iter(%0,member(%q1,##)))]
@set Organization Functions=INHERIT
@set Organization Functions=HALTED
@set Organization Functions=SAFE


=================================+++++================================

@@DBC> Now working with object #38, name: General_Organization_Data
@create General Organization Data=10
&STF_ORG General Organization Data=#39
&STF_USE General Organization Data=Staff
&WIZ_ORG General Organization Data=#48
&WIZ_USE General Organization Data=Wizards
&MON_ORG General Organization Data=#49
&MON_USE General Organization Data=Login Monitor
@set General Organization Data=OPAQUE
@set General Organization Data=HALTED


=================================+++++================================

@@DBC> Now working with object #39, name: Staff
@create Staff=10
&ADMIN_DBREFS Staff=#3
&KEYS Staff=QUOTA:num
@Prefix Staff=<Staff>
&EMAIL Staff=staff@void.org
&PLAYERS Staff= #3
&D_#3 Staff=QUOTA:0
@set Staff=HAVEN
@set Staff=HALTED
@set Staff=SAFE
@parent Staff=#34


=================================+++++================================

@@DBC> Now working with object #40, name: Watch_Control
@create Watch Control=10
&DO_GO Watch Control=$+go *: @switch/first [setq(0,u(PLACE2NUM_FN,%0))]%q0:[Authorized(default(%q0/GO_LIST,any),%#)]=#-1:*, {@pemit %#=u(INVL_ERROR_FN)},*:0, {@pemit %#=You are not authorized to go there.}, {@tel %#=%q0; @verb %q0=%#,GO,,OGO,,AGO}
&DO_WATCH_ON Watch Control=$+watch on *: @switch/first [setq(0,u(PLACE2NUM_FN,%0))]%q0:[Authorized(default(%q0/WATCH_LIST,any),%#)]:[member(get(%#/WATCHED),%q0)]=#-1:*:*, {@pemit %#=u(INVL_ERROR_FN)},*:0:*, {@pemit %#=You are not authorized to watch that place.},*:*:0, {&L_%q0 #41=setinter([get(#41/L_%q0)] %#,lwho()); &WATCHED %#=setunion(get(%#/WATCHED),%q0); @pemit %#=Watch added.}, {@pemit %#=You are already watching that.}
&DO_WATCH_OFF Watch Control=$+watch off *: @switch/first [setq(0,u(PLACE2NUM_FN,%0))]%q0:[member(get(%#/WATCHED),%q0)]=#-1:*, {@pemit %#=u(INVL_ERROR_FN)},*:0, {@pemit %#=You are not watching that.}, {&L_%q0 #41=remove(setinter(get(#41/L_%q0),lwho()),%#); &WATCHED %#=setdiff(get(%#/WATCHED),%q0); @pemit %#=Watch removed.}
&DO_WATCH_ADD_PLACE Watch Control=$+watch add place */*=*: @switch/first [setq(0,u(PLACE2NUM_FN,%0))]%q0:[hasflag(%#,Wizard)]:[isdbref(%1)]=*:0:*, {@pemit %#=Permission denied.},*:*:0, {@pemit %#=That is not a valid dbref.},#-1:*:*, {@clone/parent/inventory #42=Watcher at %1; &P_%1 #41=%2; @lock Watcher at %1=#0; @listen Watcher at %1=*; @link Watcher at %1=%1; @tel Watcher at %1=home; &PLACE_LIST #41=[get(#41/PLACE_LIST)] %0:%1; @pemit %#=Watch place added.}, {@pemit %#=That place is already in the watch list.}
&DO_WATCH_DEL_PLACE Watch Control=$+watch del place *: @switch/first [setq(0,u(PLACE2NUM_FN,%0))]%q0:[hasflag(%#,Wizard)]=*:0, {@pemit %#=Permission denied.},#-1:*, {@pemit %#=That place is not in the watch list.}, {@pemit/list [setinter(lwho(),get(#41/L_%q0))]=[get(#41/P_%q0)]> (Watch place removed by %N.); @dolist get(#41/L_%q0)=&WATCHED ##=remove(get(##/WATCHED),%q0); &P_%q0 #41; &L_%q0 #41; &PLACE_LIST #41=[setq(1,match(get(#41/PLACE_LIST),*:%q0))][ldelete(get(#41/PLACE_LIST),%q1)]; @dest [locate(%q0,Watcher at %q0,iT)]; @pemit %#=Watch place deleted.}
&DO_WATCHLIST Watch Control=$+watchlist: @pemit %#=Valid locations are:%r[u(#10/FMT_5COL_FN,sort(iter(v(PLACE_LIST),first(##,:))))]
&DO_GO_ERR Watch Control=$+go: @pemit %#=Valid locations for +go are:%r[u(#10/FMT_5COL_FN,sort(iter(v(PLACE_LIST),first(##,:))))]
&DO_WATCH Watch Control=$+watch:@pemit %#=This command name has been changed to '+watching'.
&DO_WATCHES Watch Control=$+watches: @pemit %#=switch(get(%#/WATCHED),,You are not currently watching anything.,You are currently watching:%r[edit(u(#10/FMT_2COL_FN,sort(iter(get(%#/WATCHED),edit(name(##),%b,@)))),@,%b)])
@Aconnect Watch Control=@dolist get(%#/WATCHED)=&L_## #41=setunion(get(#41/L_##),%#)
@Adisconnect Watch Control=@dolist get(%#/WATCHED)=&L_## #41=setdiff(get(#41/L_##),%#)
&DO_WATCHLOOK Watch Control=$+watchlook *: @pemit %#=switch([setq(0,u(PLACE2NUM_FN,first(%0,/)))]%q0:[setq(1,rest(%0,/))][setq(2,locate(%q0,%q1,i))]%q2:%q1,#-1:*:*,u(INVL_ERROR_FN),*:*:,{[name(%q0)](%q0[flags(%q0)])%r[ulocal(%q0/DESC)]%rContents:[iter(filter(#10/SEE_OBJ_FN,lcon(%q0)),%r[name(##)])]},*:#-?:*,{I'm not sure what you want to look at.},[setq(3,ulocal(%q2/DESC))][switch(%q3,,You see nothing special.,%q3)])
&DO_WATCHING Watch Control=$+watching *: @pemit %#=switch([setq(0,u(PLACE2NUM_FN,%0))]%q0:[setq(1,get(#41/L_%q0))]%q1,#-1:*,{u(INVL_ERROR_FN)},*:,{No one is currently watching [name(%q0)].}, {People watching [name(%q0)]:%r[u(#10/FMT_4COL_FN, sort(iter(%q1,name(*##))))]})
&DO_WATCHING_HERE Watch Control=$+watching: @pemit %#=[setq(0,get(#41/L_[room(%#)]))][switch(%q0,,No watchers in this room.,Watchers in this room:%r[u(#10/FMT_4COL_FN,sort(iter(%q0,name(*##))))])]
@lock/UseLock Watch Control=IS_CMD/1
@set Watch Control=INHERIT
@set Watch Control=SAFE
@set Watch Control=STOP
@set Watch Control=COMMANDS
@parent Watch Control=#41


=================================+++++================================

@@DBC> Now working with object #41, name: Watch_Functions
@create Watch Functions=10
&PLACE2NUM_FN Watch Functions=[setq(9,match(v(PLACE_LIST),%0:#*))][switch(%q9,0,#-1,rest(extract(v(PLACE_LIST),%q9,1),:))]
&INVL_ERROR_FN Watch Functions=That is not a valid location. Valid locations are:%r[u(#10/FMT_5COL_FN,sort(iter(v(PLACE_LIST),first(##,:))))]
@Startup Watch Functions=@switch/first restarts()=0, {@wipe me/L_#*}
&IS_CMD Watch Functions=[or(strmatch(%c,),strmatch(%c,+watch*),strmatch(%c,+go*))]
@set Watch Functions=SAFE


=================================+++++================================

@@DBC> Now working with object #42, name: Watcher_Parent
@create Watcher Parent=10
@lock Watcher Parent=#0
@Ahear Watcher Parent=@pemit/list [setq(0,room(me))][setinter(objeval(#3,lwho()),setdiff(get(#41/L_%q0),lcon(%q0)))]=[get(#41/P_%q0)]> %0
@set Watcher Parent=DARK
@set Watcher Parent=QUIET


=================================+++++================================

@@DBC> Now working with object #43, name: Birthplace_Setup_Object
@create Birthplace Setup Object=10
@lock Birthplace Setup Object=#0
@lock/UseLock Birthplace Setup Object=IS_GUEST/0
&IS_GUEST Birthplace Setup Object=[haspower(%#,Guest)]
&RETURNING_MSG Birthplace Setup Object=Welcome back.
&NEWBIE_MSG Birthplace Setup Object=Welcome, new player! Your character is being set up.
&DESC_DEFAULT Birthplace Setup Object=A new character.
&ADESC_DEFAULT Birthplace Setup Object=@pemit me=GAME: %N just looked at you.
&ACONNECT_DEFAULT Birthplace Setup Object=+skim u; +bbcheck
&ADISCONNECT_DEFAULT Birthplace Setup Object=+flush
&CONNECT_LISTEN Birthplace Setup Object=^* has connected.: @pemit %#=[ifelse(setr(0,get(%#/FIRST_LOGIN)),v(RETURNING_MSG),[v(NEWBIE_MSG)][set(%#,FIRST_LOGIN:[secs()])][set(%#,Uninspected)][null(iter(Desc ADesc AConnect ADisconnect,set(%#,##:[v(##_DEFAULT)])))][force(%#,addcom \\=new=Newbie)][trigger(me/LOCK_TRIG,%#)])][pemit(OrgWho(STF),<Newbie> %N \(%#\) connected at [extract(time(),4,1)][ifelse(%q0,.,%b\(first login\).)])]
&LOCK_TRIG Birthplace Setup Object=@lock %0=#0; @lock/enter %0=#0; @lock/use %0==%0
@set Birthplace Setup Object=DARK
@set Birthplace Setup Object=INHERIT
@set Birthplace Setup Object=MONITOR
@set Birthplace Setup Object=SAFE


=================================+++++================================

@@DBC> Now working with object #44, name: Generic_Door_Parent
@open Generic Door Parent;gdp;door parent
@lock Generic Door Parent=#0
@Desc Generic Door Parent=[ifelse(u(IS_DOOR_FN),[ifelse(%0,%0,You see a door to [name(loc(me))].)] [switch(lock(me),,edefault(me/UNLOCKED,It is unlocked.),edefault(me/LOCKED,It is locked.))],ifelse(%0,%0,This exit leads to [name(loc(me))].))]
@set Generic Door Parent/Desc = no_inherit
@Fail Generic Door Parent=[edefault(me/LOCKED,It is locked.)]
@Succ Generic Door Parent=You walk towards [name(me)].
@Osucc Generic Door Parent=walks towards [name(me)].
@Odrop Generic Door Parent=enters from [name(home(me))].
&STD Generic Door Parent=You see a door.
&LOCK_FAIL Generic Door Parent=You are not able to lock that door.
&LOCK_MSG Generic Door Parent=You lock the door to [name(loc(me))].
&LOCK_OMSG Generic Door Parent=locks the door to [name(loc(me))].
&UNLOCK_FAIL Generic Door Parent=You are not able to unlock that door.
&UNLOCK_MSG Generic Door Parent=You unlock the door to [name(loc(me))].
&UNLOCK_OMSG Generic Door Parent=unlocks the door to [name(loc(me))].
&IS_DOOR_FN Generic Door Parent=[or(hasattr(me,LOCK_LIST),hasattr(me,UNLOCK_LIST))]
@set Generic Door Parent=DARK
@set Generic Door Parent=VISUAL
@set Generic Door Parent=PARENT_OK


=================================+++++================================

@@DBC> Now working with object #45, name: New_Player_Room
@dig/teleport New Player Room
@lock/TeloutLock here=#0
&EXITS here=When you are done reading, please type 'out' and follow the directions. You will be asked to set some attributes on yourself, before you can leave to explore the rest of the MUSH.
@Desc here=Welcome to [mudname()]. Please begin by typing 'news'. This will give you a bit of information about what this MUSH is about, and how you can get involved. If you are new to MUSH, you might to type 'help' (for built-in MUSH commands) and '+help' (for commands specific to this MUSH). If you don't know how to talk, read 'help say', 'help pose', and 'help page'.
@parent here=#5


=================================+++++================================

@@DBC> Now working with object #46, name: Out
@open Out;o;continue;leave
@lock Out=IS_OK/1
&IS_OK Out=[or(hasflag(%#,Wizard),and(neq(member(Male male Female female,get(%#/SEX)),0),strmatch(default(%#/EMAIL,get(%#/PRIVATE_EMAIL)),*@*)))]
@Desc Out=This exit leads out.
@Succ Out=You are now ready to venture out into the world.
@Osucc Out=ventures out into the world.
@Odrop Out=enters from the New Player Room.
@Fail Out=[switch(0,member(Male Female male female,get(%#/SEX)),You must be either Male or Female. Type '@sex me = <Male or Female>' in order to fix this.,[setq(0,default(%#/EMAIL,get(%#/PRIVATE_EMAIL)))][words(%q0)],You must set an Email address.%rIf you wish this information to be public: &EMAIL me = <Your email address>%rTo keep this information private: &PRIVATE_EMAIL me = <Your email address>,strmatch(%q0,*@*),An email address must be of the format 'userid@machine'.,Something odd has happened. Please inform a Wizard that the 'out' exit in the New Player Room is broken.)]
@Asucc Out=@link switch(home(%#),#45,%#)=[v(PLAYER_DEFAULT_HOME)]
&PLAYER_DEFAULT_HOME Out=#0
@set Out=DARK
@set Out=FREE
@set Out=INHERIT


=================================+++++================================

@@DBC> Now working with object #47, name: New_Player_Room
@open New Player Room;npr;new player;np
@lock New Player Room=#0
@set New Player Room=DARK
@parent New Player Room=#44


=================================+++++================================

@@DBC> Now working with object #48, name: Wizards
@create Wizards=10
&ADMIN_DBREFS Wizards=#3
&KEYS Wizards=QUOTA:num
@Prefix Wizards=<Wiz>
&EMAIL Wizards=wiz@void.org
&PLAYERS Wizards= #3
&D_#3 Wizards=QUOTA:0
@set Wizards=HAVEN
@set Wizards=HALTED
@set Wizards=SAFE
@parent Wizards=#34


=================================+++++================================

@@DBC> Now working with object #49, name: Login_Monitor
@create Login Monitor=10
&ADMIN_DBREFS Login Monitor=#3
&KEYS Login Monitor=QUOTA:num
@Prefix Login Monitor=<Login Monitoring>
&EMAIL Login Monitor=monitor@void.org
&PLAYERS Login Monitor= #3
&D_#3 Login Monitor=QUOTA:0
@set Login Monitor=HALTED
@set Login Monitor=SAFE
@parent Login Monitor=#34


=================================+++++================================

@@DBC> Now working with object #50, name: Storage_Room
@dig/teleport Storage Room


=================================+++++================================

@@DBC> Now working with object #51, name: Announce_BB_Data
@create Announce BB Data=10
&BBNAME Announce BB Data=Announce
&PURPOSE Announce BB Data=General Announcements
&POST_LIST Announce BB Data=org=STF
&READ_LIST Announce BB Data=any
&ADMIN_LIST Announce BB Data=org=WIZ
&DATA_MTOP Announce BB Data=2
&DATA_MLIST Announce BB Data= 2
&HDR_2 Announce BB Data=#3 879880175 Welcome to a MUDcore-based MUSH
&MSG_2 Announce BB Data=Welcome. This MUSH is using a core database called MudCore. Please read '+help MudCore' for details.
@set Announce BB Data=HALTED


=================================+++++================================

@@DBC> Now working with object #52, name: Webster
@lock me=#0
@lock/PageLock me==Main Global Commands
@lock/UseLock me==*Webster
@Reject me=This is the dictionary robot. You can't page it directly. Try '+help spell'.
@Away me=The dictionary robot is not connected.
&FIRST_LOGIN me=912246313
@Desc me=The dictionary robot.
@lock/EnterLock me=#0
@Adisconnect me=home
@Sex me=Neuter
@Timeout me=2592000
@set me=DARK
@set me=OPAQUE
@set me=WIZARD


=================================+++++================================

@@DBC> Now working with object #53, name: Placeholder_Object
@create Placeholder Object=10
@Desc Placeholder Object=This object prevents privileged attributes from being cleaned from the database.
&FIRST_LOGIN Placeholder Object=-
&LASTLOGOUT Placeholder Object=-
&MBOX Placeholder Object=-
&PROPLOC Placeholder Object=-
&ORGS Placeholder Object=-
&WATCHED Placeholder Object=-
@set Placeholder Object=HALTED
@set Placeholder Object=CONSTANT
@set Placeholder Object=SAFE


=================================+++++================================

@@DBC> Now working with object #54, name: Registration_Data
@create Registration Data=10
@set Registration Data=HALTED
@set Registration Data=SAFE


=================================+++++================================

@@DBC> Now working with object #55, name: Added_Commands
@create Added Commands=10
&DO_SAY Added Commands=$say *: @emit [TN()] says, "[s(%0)]"
&DO_POSE Added Commands=$pose *: @emit [TN()] [s(%0)]
&DO_POSE_NOSP Added Commands=$pose/n* *: @emit [TN()][s(%1)]
&DO_QUOTE Added Commands=$"*: @emit [TN()] says, "[s(%0)]"
&DO_COLON Added Commands=$?*: @emit [switch(%1,%b*,[TN()][s(delete(%1,0,1))],[TN()] [s(%1)])]
&DO_SEMI Added Commands=$;*: @emit [TN()][s(%0)]
&TN_GFUN Added Commands=default(%#/TN,%N)
@set Added Commands=INHERIT
@set Added Commands=SAFE
@set Added Commands=STOP
@set Added Commands=COMMANDS
@parent Added Commands=#10


=================================+++++================================

@@DBC> Now working with object #56, name: Online_Commands
@create Online Commands=10
@lock/UseLock Online Commands=IS_ONL/1
&IS_ONL Online Commands=[strmatch(%c,+online*)]
@set Online Commands/IS_ONL = no_command
&DO_ON_ACTIVE Online Commands=$+online/active *: @eval [setq(0,sort(iter(%0,switch(ulocal(PARSE_TIME_FN,##),-1,pemit(%#,Invalid time syntax: ##),#$)),n))][pemit(%#,switch(%q0,,No valid active times to record.,Online active times registered.[set(%vd,TIMES_%#:[setq(1,get(%vd/TIMES_%#))]%q0|[sort(setdiff(extract(%q1,2,1,|),%q0),n)]|[sort(setdiff(last(%q1,|),%q0),n)])]))]
&DO_ON_FREE Online Commands=$+online/free *: @eval [setq(0,sort(iter(%0,switch(ulocal(PARSE_TIME_FN,##),-1,pemit(%#,Invalid time syntax: ##),#$)),n))][pemit(%#,switch(%q0,,No valid free times to record.,Online free times registered.[set(%vd,TIMES_%#:[setq(1,get(%vd/TIMES_%#))][sort(setdiff(first(%q1,|),%q0),n)]|%q0|[sort(setdiff(last(%q1,|),%q0),n)])]))]
&DO_ON_IDLE Online Commands=$+online/idle *: @eval [setq(0,sort(iter(%0,switch(ulocal(PARSE_TIME_FN,##),-1,pemit(%#,Invalid time syntax: ##),#$)),n))][pemit(%#,switch(%q0,,No valid idle times to record.,Online idle times registered.[set(%vd,TIMES_%#:[setq(1,get(%vd/TIMES_%#))][sort(setdiff(first(%q1,|),%q0),n)]|[sort(setdiff(extract(%q1,2,1,|),%q0),n)]|%q0)]))]
&DO_ONLINE Online Commands=$+online: @pemit %#=u(SHOW_ONLINE_FN,%#)
&DO_ONLINE_ONE Online Commands=$+online *: @pemit %#=ifelse(setr(9,num(*%0)),u(SHOW_ONLINE_FN,%q9),No such player.)
&DO_ON_FIND Online Commands=$+online/find *: @eval [setq(8,%vt)][setq(0,squish(iter(%0,ifelse(setr(9,u(%q8_PEOPLE_FN,##)),%q9,pemit(%#,Invalid player/group: ##)))))][setq(5,%vd)][pemit(%#,ifelse(%q0,ifelse(setr(1,filter(HAS_ONL_FN,%q0)),[words(%q1)] of [words(%q0)] players have online times registered.%r%r[u(ONL_FIND_FN,%q1)],None of those players have online times registered.),No players to check.))]
@set Online Commands=SAFE
@set Online Commands=STOP
@set Online Commands=COMMANDS
@parent Online Commands=#57


=================================+++++================================

@@DBC> Now working with object #57, name: Online_Funcs
@create Online Funcs=10
@Vd Online Funcs=#58
@Vt Online Funcs=ORG
&WEEKDAYS Online Funcs=Sunday Monday Tuesday Wednesday Thursday Friday Saturday
&TIME_TO_ZONE_FN Online Funcs=[add(sub(mul(member(v(WEEKDAYS),%0),48),47),mul(%1,2),ifelse(%2,1,0))]
&GET_HOUR_FN Online Funcs=[switch(%0 %1,12 am,0,12 pm,12,switch(1,lt(%0,1),-1,gt(%0,12),-1,add(%0,switch(%1,pm,12))))]
&GET_ZONE_FN Online Funcs=[setq(9,switch(%1,*:30am,u(GET_HOUR_FN,first(%1,:),am),*am,u(GET_HOUR_FN,first(%1,a),am),*:30pm,u(GET_HOUR_FN,first(%1,:),pm),*pm,u(GET_HOUR_FN,first(%1,p),pm),-1))][switch(%0:%q9,:*,-1,*:-1,-1,u(TIME_TO_ZONE_FN,%0,%q9,switch(%1,*:*,30,0)))]
&PARSE_TIME_FN Online Funcs=[setq(0,grab(v(WEEKDAYS),[first(%0,/)]*))][setq(1,lcstr(rest(%0,/)))][setq(2,u(GET_ZONE_FN,%q0,first(%q1,-)))][setq(3,dec(switch(%0,*/*-12am,u(GET_ZONE_FN,extract([v(WEEKDAYS)] Sunday,inc(member(v(WEEKDAYS),%q0)),1),12am),u(GET_ZONE_FN,%q0,rest(%q1,-)))))][case(1,gte(%q3,%q2),lnum(%q2,%q3),eq(%q3,0),lnum(%q2,336),pemit(%#,End time must be after start time: %0))]
&HEADER_FN Online Funcs=[space(13)] AM [space(20)] PM%r[space(13)] 1 [space(17)] 1 1 1 [space(17)] 1 1%r[space(13)] 2 1 2 3 4 5 6 7 8 9 0 1 2 1 2 3 4 5 6 7 8 9 0 1
&GEN_ZONES_FN Online Funcs=[lnum(setr(8,sub(mul(member(v(WEEKDAYS),%0),48),47)),add(%q8,47))]
&SHOW_ONLINE_FN Online Funcs=[setq(0,get(%vd/TIMES_%0))][ifelse(%q0,[u(HEADER_FN)][iter(v(WEEKDAYS),%r[ljust(##,13)] [u(SHOW_INDIV_FN,u(GEN_ZONES_FN,##),first(%q0,|),extract(%q0,2,1,|),last(%q0,|))])],[name(%0)] has not noted any online times.)]
&SHOW_INDIV_FN Online Funcs=[iter(%0,case(1,t(member(%1,##)),%xRA%xn,t(member(%2,##)),%xBf%xn,t(member(%3,##)),%xgi%xn,.),,@@)]
&COMM_SEEK_FN Online Funcs=[setq(0,first(%0,/))][setq(1,first(rest(%0,/),:))][setq(2,last(%0,:))][filter(COMM_EQ_FN,CommSearch(%q0))]
&COMM_EQ_FN Online Funcs=[strmatch(CommField(%0,%q0,%q1),%q2)]
&COMM_PEOPLE_FN Online Funcs=[switch(%0,.*/*:*,ulocal(COMM_SEEK_FN,rest(%0,.)),.*,CommSearch(rest(%0,.)),num(*##))]
&ORG_SEEK_FN Online Funcs=[OrgSearch(first(%0,:),rest(%0,:))]
&ORG_PEOPLE_FN Online Funcs=[switch(%0,org=???:*/*,ulocal(ORG_SEEK_FN,rest(%0,=)),org=???,OrgWho(rest(%0,=)),num(*%0))]
&HAS_ONL_FN Online Funcs=[hasattr(%q5,TIMES_%0)]
&ONL_FIND_FN Online Funcs=[u(HEADER_FN)][iter(v(WEEKDAYS),%r[ljust(##,13)] [u(SHOW_MANY_FN,u(GEN_ZONES_FN,##),%0)])]
&ACTV_FOLD_FN Online Funcs=[setinter(%0,first(get(%q5/TIMES_%1),|))]
&FREE_FOLD_FN Online Funcs=[setinter(%0,elements(get(%q5/TIMES_%1),1 2,|,))]
&IDLE_FOLD_FN Online Funcs=[setinter(%0,edit(get(%q5/TIMES_%1),|,%b))]
&SHOW_MANY_FN Online Funcs=[setq(0,sort(fold(ACTV_FOLD_FN,%1,%0),n))][setq(1,sort(fold(FREE_FOLD_FN,%1,%0),n))][setq(2,sort(fold(IDLE_FOLD_FN,%1,%0),n))][u(SHOW_INDIV_FN,%0,%q0,%q1,%q2)]
@set Online Funcs=HALTED
@set Online Funcs=SAFE


=================================+++++================================

@@DBC> Now working with object #58, name: Online_Data
@create Online Data=10
&TIMES_#3 Online Data=45 46 47 48 135 136 137 138 139 140 141 142 143 144 191 192 231 232 233 234 235 236 237 238 239 240|21 22 23 24 83 84 85 86 87 88 89 90 91 92 93 94 131 132 133 134 227 228 229 230 309 310 311 312 313 314 315 316|69 70 71 72 73 74 75 76 77 78 79 80 81 82 117 118 119 120 121 122 123 124 125 126 127 128 129 130 165 166 167 168 169 170 171 172 173 174 175 176 177 178 213 214 215 216 217 218 219 220 221 222 223 224 225 226 261 262 263 264 265 266 267 268 269 270 271 272 273 274
&TIMES_#4 Online Data=119 120 121 122 123 124 230 231|89 90|79 80 81 82 83
&TIMES_#1 Online Data=90 91 92 227 228 229 230 231 232 233 331 332 333 334 335 336|81 82 83 84 85 120 121|
@set Online Data=HALTED
@set Online Data=SAFE
