<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en" dir="ltr">
	<head>
		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<meta http-equiv="Content-Style-Type" content="text/css" />
		<meta name="generator" content="MediaWiki 1.15.3" />
		<meta name="robots" content="noindex,nofollow" />
		<meta name="keywords" content="Utilities (used to be &quot;Mylib.tf&quot;),Users" />
		<link rel="next" href="http://www.gwen-morse.com/wiki/index.php/Utilities_(used_to_be_%22Mylib.tf%22)" />
		<link rel="shortcut icon" href="/favicon.ico" />
		<link rel="search" type="application/opensearchdescription+xml" href="/wiki/opensearch_desc.php" title="GwenWiki (en)" />
		<link rel="alternate" type="application/rss+xml" title="GwenWiki RSS Feed" href="/wiki/index.php?title=Special:RecentChanges&amp;feed=rss" />
		<link rel="alternate" type="application/atom+xml" title="GwenWiki Atom Feed" href="/wiki/index.php?title=Special:RecentChanges&amp;feed=atom" />
		<title>View source - GwenWiki</title>
		<link rel="stylesheet" href="/wiki/skins/common/shared.css?207" type="text/css" media="screen" />
		<link rel="stylesheet" href="/wiki/skins/common/commonPrint.css?207" type="text/css" media="print" />
		<link rel="stylesheet" href="/wiki/skins/monobook/main.css?207" type="text/css" media="screen" />
		<!--[if lt IE 5.5000]><link rel="stylesheet" href="/wiki/skins/monobook/IE50Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 5.5000]><link rel="stylesheet" href="/wiki/skins/monobook/IE55Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 6]><link rel="stylesheet" href="/wiki/skins/monobook/IE60Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<!--[if IE 7]><link rel="stylesheet" href="/wiki/skins/monobook/IE70Fixes.css?207" type="text/css" media="screen" /><![endif]-->
		<link rel="stylesheet" href="/wiki/index.php?title=MediaWiki:Common.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" />
		<link rel="stylesheet" href="/wiki/index.php?title=MediaWiki:Print.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" media="print" />
		<link rel="stylesheet" href="/wiki/index.php?title=MediaWiki:Monobook.css&amp;usemsgcache=yes&amp;ctype=text%2Fcss&amp;smaxage=18000&amp;action=raw&amp;maxage=18000" type="text/css" />
		<link rel="stylesheet" href="/wiki/index.php?title=-&amp;action=raw&amp;maxage=18000&amp;gen=css" type="text/css" />
		<!--[if lt IE 7]><script type="text/javascript" src="/wiki/skins/common/IEFixes.js?207"></script>
		<meta http-equiv="imagetoolbar" content="no" /><![endif]-->

		<script type= "text/javascript">/*<![CDATA[*/
		var skin = "monobook";
		var stylepath = "/wiki/skins";
		var wgArticlePath = "/wiki/index.php/$1";
		var wgScriptPath = "/wiki";
		var wgScript = "/wiki/index.php";
		var wgVariantArticlePath = false;
		var wgActionPaths = {};
		var wgServer = "http://www.gwen-morse.com";
		var wgCanonicalNamespace = "";
		var wgCanonicalSpecialPageName = false;
		var wgNamespaceNumber = 0;
		var wgPageName = "Utilities_(used_to_be_\"Mylib.tf\")";
		var wgTitle = "Utilities (used to be \"Mylib.tf\")";
		var wgAction = "edit";
		var wgArticleId = "69";
		var wgIsArticle = false;
		var wgUserName = null;
		var wgUserGroups = null;
		var wgUserLanguage = "en";
		var wgContentLanguage = "en";
		var wgBreakFrames = false;
		var wgCurRevisionId = 720;
		var wgVersion = "1.15.3";
		var wgEnableAPI = true;
		var wgEnableWriteAPI = true;
		var wgSeparatorTransformTable = ["", ""];
		var wgDigitTransformTable = ["", ""];
		var wgRestrictionEdit = [];
		var wgRestrictionMove = [];
		/*]]>*/</script>

		<script type="text/javascript" src="/wiki/skins/common/wikibits.js?207"><!-- wikibits js --></script>
		<!-- Head Scripts -->
		<script type="text/javascript" src="/wiki/skins/common/edit.js?207"></script>
		<script type="text/javascript" src="/wiki/skins/common/ajax.js?207"></script>
		<script type="text/javascript" src="/wiki/index.php?title=-&amp;action=raw&amp;gen=js&amp;useskin=monobook"><!-- site js --></script>
	</head>
<body class="mediawiki ltr ns-0 ns-subject page-Utilities_used_to_be_Mylib_tf skin-monobook">
	<div id="globalWrapper">
		<div id="column-content">
	<div id="content">
		<a name="top" id="top"></a>
				<h1 id="firstHeading" class="firstHeading">View source</h1>
		<div id="bodyContent">
			<h3 id="siteSub">From GwenWiki</h3>
			<div id="contentSub">for <a href="/wiki/index.php/Utilities_(used_to_be_%22Mylib.tf%22)" title="Utilities (used to be &quot;Mylib.tf&quot;)">Utilities (used to be &quot;Mylib.tf&quot;)</a></div>
									<div id="jump-to-nav">Jump to: <a href="#column-one">navigation</a>, <a href="#searchInput">search</a></div>			<!-- start content -->
			<p>You do not have permission to edit this page, for the following reason:
</p>
<div class="permissions-errors">The action you have requested is limited to users in the group: <a href="/wiki/index.php?title=GwenWiki:Users&amp;action=edit&amp;redlink=1" class="new" title="GwenWiki:Users (page does not exist)">Users</a>.</div>
<p>You can view and copy the source of this page:
</p><textarea id="wpTextbox1" name="wpTextbox1" cols="80" rows="25" readonly="readonly">The starting section of this file duplicates [[Galvin's Virtual Array]]. It's Galvin's array code plus so much more.
&lt;pre&gt;
;=========================================================
;utilities.tf (formerly mylib.tf)
;This contains common functions missing in the main tf library
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Virtual Array 
;;;
;;; Originally submitted to the Tinyfugue mailing list by Galvin &lt;kairo at mediaone dot net&gt;
;;; Modfied by Michael Hunger &lt;mh14 at inf.tu-dresden dot de&gt;
;;; Modified by Regan@ Many MU's
;;; Possibly modified by other members of the Tinyfugue mailing list.
;;;
;;; NOTES FROM GALVIN:
;;;
;;; You may store anything to be abbreviated in these lists, e.g. weapons,
;;; friends, npcs, scores etc.
;;;
;;; If you use text not containing other characters than letters, numbers and _
;;; you may also use this as an simple key-value hash list
;;; e.g. /set_array weapon s1 sword_with_a_very_long_id
;;;
;;; /def wield = /get_array weapon %1%;wield %?
;;;
;;; Usage:
;;; instead of: wield sword_with_a_very_long_id
;;; just use: /wield s1
;;;
;;; Some Examples:
;;; /test put_array('test_array', 1, 367382)
;;; /test put_array('test_array', 2, 'a string')
;;; /test echo(get_array('test_array', 1))
;;; /test echo(get_array('test_array', 2))
;;; 
;;; You should see 367382 and a string echoed to your screen.
;;; 
;;; Passing an array to a function
;;; 
;;; /def function_array = \
;;; /test array1 := get_array({*}, 1) %;\
;;; /test array2 := get_array({*}, 2) %;\
;;; /test echo(strcat(array1, ':', array2))
;;; 
;;; /test function_array('test_array')
;;; 
;;; What I wrote here was just some stuff off the top of my head real quick.  Hope it helps.
;;; Oh and /listarray is a real good debuging tool, I use this as well. SO /listarray test_array should return:
;;; test_array[1]:=367382
;;; test_array[2]:=a string
;;; test_array[3]:=
;;;
;;; /listarray only lists up till a blank entry, I thought about using entry 0 as the # of elements but decided 
;;; that some people may want to start arrays from 0 and not 1.
;;;
;;; Some get_array_count examples:
;
; /test put_array('halloween', 1, 'skeleton')
; /test put_array('halloween', 2, 'owls')
; /test put_array('halloween', 3, 'boo!')
; 
; /test echo(get_array_count('halloween', 1))
; returns 3
; /test echo(get_array_count('halloween', 2))
; returns 2
; 
; /test put_2array('double', 1, 1 , 'hmm')
; /test put_2array('double, 1, 2, 'burp!')
; /test put_2array('double, 1, 3, 'damn')
; /test echo(get_2array_count('double', 1, 1) 

;------------------------------------------------------------------------
;Get array / get 2array : A virtual array function to similate a real array
;usage:
;get_array(&quot;Array name here&quot;, I) &amp; get_2array(&quot;array name&quot;, I, I2)
;example get_array(&quot;Dir_Array&quot;, 43) returns the 43rd element from &quot;Dir_Stack&quot;
;
;------------------------------------------------------------------------
/def get_array = \
 /return _array_%1_%2

/def get_2array = \
 /return _array_%1_%2_%3

;------------------------------------------------------------------------
;PUT array / put 2array: A virtual array function to similate a real array
;usage:
;put_array(&quot;Array name here&quot;, I, st) &amp; put_2array(&quot;array name&quot;, I, I2, st)
;example put_array(&quot;Dir_Array&quot;, 43, &quot;sw&quot;) puts &quot;sw&quot; at element 43 in
;&quot;Dir_Array&quot;
;------------------------------------------------------------------------
/def put_array = \
 /IF (strlen({3}) &gt; 0) \
   /set _array_%1_%2=%3%;\
 /ELSE \
   /unset _array_%1_%2%;\
 /ENDIF%;\

/def put_2array = \
 /IF (strlen({4}) &gt; 0) \
   /set _array_%1_%2_%3=%4%;\
 /ELSE \
   /unset _array_%1_%2_%3%;\
 /ENDIF%;\

;------------------------------------------------------------------------
;PURGE array : Purges a virtual array made by get_array &amp; put_array
;usage:
;purge_array(&quot;Array name here&quot;)
;example purge_array(&quot;Dir_Array&quot;), deletes the whole array from memory
;NOTE: Purge array starts from element 0
;NOTE: this can also purge double dimensioned arrays too.
;------------------------------------------------------------------------
/def purge_array = \
 /quote -S /unset `/listvar -s _array_%1_*

;--------------------------------------------------------------------------
;listarray / list2array
;USAGE:
;/listarray array_name &lt;num&gt; &amp; /list2array array_name &lt;num&gt; &lt;num2&gt;
;Will list the whole array of array_name starting from element &lt;num&gt;
;/list2array only lists the second dimension from &lt;start&gt;
;--------------------------------------------------------------------------
/def listarray = \
 /test LA_Count := %2 - 1%;\
 /test LA_Element := &quot; &quot;%;\
 /while (strlen(LA_Element) &gt; 0) \
   /test ++LA_Count%;\
   /test LA_Element := get_array({1}, LA_Count)%;\
   /test echo(strcat({1}, &quot;[&quot;, LA_Count, &quot;]:=&quot;, LA_Element))%;\
 /DONE

/def list2array = \
 /test LA2_Count := -1%;\
 /test LA2_Element := &quot; &quot;%;\
 /while (LA2_Count &lt; 255) \
   /test ++LA2_Count%;\
   /test LA2_Element := get_2array({1}, {2}, LA2_Count)%;\
   /IF (strlen(LA2_Element) &gt; 0) \
     /test echo(strcat({1}, &quot;[&quot;, {2}, &quot;][&quot;, LA2_Count, &quot;]:=&quot;, LA2_Element))%;\
   /ENDIF%;\
 /DONE
;--------------------------------------------------------------------------
;GET array count / GET 2array count
; Written by: Ian Leisk who may actually be &quot;Galvin&quot;, but, may not (kairo at attbi dot com)!
;usage:
;get_array_count(&quot;Array name here&quot;, start)
;get_2array_count(&quot;Array name here&quot;, index, start)
;
;NOTE:
;These will count the number of elements starting at &quot;start&quot; till the first
;empty element.
;Get_array2_count will count the number of elements starting at index
;from &quot;start&quot;
;--------------------------------------------------------------------------

/def get_array_count = \
  /test GA_Name := {1} %;\
  /test GA_Count := {2} - 1 %;\
  /test GA_Element := &quot; &quot; %;\
  /while (strlen(GA_Element) &gt; 0) \
    /test ++GA_Count %;\
    /test GA_Element := get_array(GA_Name, GA_Count) %;\
  /DONE %;\
  /return GA_Count - 1

/def get_2array_count = \
  /test GA2_Name := {1} %;\
  /test GA2_Index := {2} %;\
  /test GA2_Count := {3} -1 %;\
  /test GA2_Element := &quot; &quot; %;\
  /while (strlen(GA2_Element) &gt; 0) \
     /test ++GA2_Count %;\
     /test GA2_Element := get_2array(GA2_Name, GA2_Index, GA2_Count) %;\
  /DONE %;\
  /return GA2_Count - 1

;========================================================================
; tfwrite_array() / tfwrite_2array()
;
; Writes a virtual array to a disk file.
; USAGE:
; tfwrite_array(file_variable, &quot;array_name&quot;, start_index, size)
; tfwrite_2array(file_variable, &quot;array_name&quot;, index, start_index, size)
;
; file_variable : File variable of a tfopened file.
; &quot;array_name&quot;  : Name of the array.
; start_index   : The element you want to start writing from.
; index         : Start_index of index [first dimension] (tfwrite_2array only)
; Size          : Number of elements to write.
;
; NOTES: tfwrite_2array() can't write the whole array to disk.  You must
;        write each dimension at a time.
;========================================================================
/def tfwrite_array = \
  /let file_ %{1} %;\
  /let array_ %{2} %;\
  /let start_ %{3} %;\
  /let size_ %{4} %;\
  /let count_ 0 %;\
  /WHILE (++count_ &lt;= size_) \
    /test tfwrite(file_, get_array(array_, start_)) %;\
    /test ++start_ %;\
  /DONE

/def tfwrite_2array = \
  /let file_ %{1} %;\
  /let array_ %{2} %;\
  /let index_ %{3} %;\
  /let start_ %{4} %;\
  /let size_ %{5} %;\
  /let count_ 0 %;\
  /WHILE (++count_ &lt;= size_) \
    /test tfwrite(file_, get_2array(array_, index_, start_)) %;\
    /test ++start_ %;\
  /DONE

;========================================================================
; tfread_array() / tfread_2array()
;
; reads an array file from disk
; USAGE:
; x := tfread_array(file_variable, &quot;array_name&quot;, start_index, size)
; x := tfread_2array(file_variable, &quot;array_name&quot;, index, start_index, size)
;
; x             : Number of records read.
; file_variable : File variable of a tfopened file.
; &quot;array_name&quot;  : Name of the array.
; start_index   : Starting element you want to read into.
; index         : Start_index of index [first dimension] (tfread_2array only)
; size          : Number of elements to read.
;========================================================================
/def tfread_array = \
  /let file_ %{1} %;\
  /let array_ %{2} %;\
  /let start_ %{3} %;\
  /let size_ %{4} %;\
  /let count_ 0 %;\
  /let done_ 0 %;\
  /let err_ 0 %;\
  /let st_ 0 %;\
  /test st_ := '' %;\
  /WHILE (!done_) \
    /test err_ := tfread(file_, st_) %;\
    /IF ( (err_ != -1) &amp; (count_ &lt; size_) ) \
      /test put_array(array_, start_, st_) %;\
      /test ++count_ %;\
      /test ++start_ %;\
    /ELSE \
      /test done_ := 1 %;\
    /ENDIF %;\
  /DONE %;\
  /RETURN count_

/def tfread_2array = \
  /let file_ %{1} %;\
  /let array_ %{2} %;\
  /let index_ %{3} %;\
  /let start_ %{4} %;\
  /let size_ %{5} %;\
  /let count_ 0 %;\
  /let done_ 0 %;\
  /let err_ 0 %;\
  /let st_ 0 %;\
  /test st_ := '' %;\
  /WHILE (!done_) \
    /test err_ := tfread(file_, st_) %;\
    /IF ( (err_ != -1) &amp; (count_ &lt; size_) ) \
      /test put_2array(array_, index_, start_, st_) %;\
      /test ++count_ %;\
      /test ++start_ %;\
    /ELSE \
      /test done_ := 1 %;\
    /ENDIF %;\
  /DONE %;\
  /RETURN count_

;========================================================================
; strstr_array() / strstr_2array()
;
; Searches for a value in a virtual array and returns what element its found in.
; USAGE:
; x := strstr_array(&quot;array_name&quot;, start_index, size, value)
; x := strstr_2array(&quot;array_name&quot;, index, start_index, size, value)
;
; x             : Element of &quot;array_name&quot; that value was found in.
;                 -1 is returned if value was not found.
; &quot;array_name&quot;  : Name of the array.
; start_index   : Element to start searching at
; index         : Start_index of index [first dimension] (strstr_2arrat only).
; size          : Number of elements to search.
; value         : The item your searching for.
;
; NOTES: Strstr_2array can't search all dimensions, you must search each dimension
;        at a time.
;        If value = &quot;&quot; then it will return the first element that is blank.
;========================================================================
/def strstr_array = \
  /let array_ %{1} %;\
  /let start_ %{2} %;\
  /let size_ %{3} %;\
  /let value_ 0 %;\
  /test value_ := {4} %;\
  /let count_ 0 %;\
  /let pos_ 0 %;\
  /let st_ 0 %;\
  /test st_ := '' %;\
  /let element_ -1 %;\
  /WHILE ( (++count_ &lt;= size_) &amp; (element_ = -1) ) \
    /test st_ := get_array(array_, start_) %;\
    /IF (value_ =~ '') \
      /IF (st_ =~ '') \
        /test element_ := start_ %;\
      /ENDIF %;\
    /ELSE \
      /test pos_ := strstr(st_, value_) %;\
      /IF (pos_ &gt; -1) \
        /test element_ := start_ %;\
      /ENDIF %;\
    /ENDIF %;\
    /test ++start_ %;\
  /DONE %;\
  /RETURN element_

/def strstr_2array = \
  /let array_ %{1} %;\
  /let index_ %{2} %;\
  /let start_ %{3} %;\
  /let size_ %{4} %;\
  /let value_ 0 %;\
  /test value_ := {5} %;\
  /let count_ 0 %;\
  /let pos_ 0 %;\
  /let st_ 0 %;\
  /let element_ -1 %;\
  /test st_ := '' %;\
  /WHILE ( (++count_ &lt;= size_) &amp; (element_ = -1) ) \
    /test st_ := get_2array(array_, index_, start_) %;\
    /IF (value_ =~ '') \
      /IF (st_ =~ '') \
        /test element_ := start_ %;\
      /ENDIF %;\
    /ELSE \
      /test pos_ := strstr(st_, value_) %;\
      /IF (pos_ &gt; -1) \
        /test element_ := start_ %;\
      /ENDIF %;\
    /ENDIF %;\
    /test ++start_ %;\
  /DONE %;\
  /RETURN element_;

========================================================================
; searchstr_2array()
;
; Searches for a value in all dimensions of a virtual array and returns
; each element its found in. Multiple matches are put into a space-delimited
; list
; Modified by Regan @ Many MU's
;
; USAGE:
; x := searchstr_2array(&quot;array_name&quot;, index, start_index, size, value)
;
; x             : Element of &quot;array_name&quot; that value was found in.
;                 -1 is returned if value was not found.
; &quot;array_name&quot;  : Name of the array.
; start_index   : Element to start searching at
; index         : Start_index of index [first dimension] (strstr_2arrat only).
; size          : Number of elements to search.
; value         : The item your searching for.
;
;        If value = &quot;&quot; then it will return the first element that is blank.
;========================================================================

/def searchstr_2array = \
  /let array_ %{1} %;\
  /let index_ %{2} %;\
  /let start_ %{3} %;\
  /let size_ %{4} %;\
  /let value_ 0 %;\
  /test value_ := {5} %;\
  /let count_ 0 %;\
  /let pos_ 0 %;\
  /let st_ 0 %;\
  /let element_ -1 %;\
  /test blank_ := ' ' %;\
  /test list_ := '' %;\
  /test st_ := '' %;\
  /WHILE (++count_ &lt;= size_) \
    /test st_ := get_2array(array_, start_, index_) %;\
    /IF (value_ =~ '') \
      /IF (st_ =~ '') \
        /test element_ := start_ %;\
        /IF (list_ =~ '') \
          /test list_ := element_ %;\
        /ELSE \
          /test temp_ := strcat(list_, blank_) %:\
          /test list_ := strcat(temp_, element_) %;\
        /ENDIF %;\
      /ENDIF %;\
    /ELSE \
      /test pos_ := strstr(st_, value_) %;\
      /IF (pos_ &gt; -1) \
        /test element_ := start_ %;\
        /IF (list_ =~ '') \
          /test list_ := element_ %;\
        /ELSE \
          /test temp_ := strcat(list_, blank_) %;\
          /test list_ := strcat(temp_, element_) %;\
        /ENDIF %;\
      /ENDIF %;\
    /ENDIF %;\
    /test ++start_ %;\
  /DONE %;\
  /RETURN list_

;==============================================================================
; chr2chr()
;
; Changes one character to difference character in a string
; USAGE:
; x := chr2chr(&quot;string&quot;, &quot;searchchar&quot;, &quot;changechar&quot;)
;
; x           : contains &quot;string&quot; with all &quot;.&quot; as &quot;_&quot;.
; &quot;string&quot;    : any string.
; &quot;searchar&quot;  : The character to be changed in &quot;string&quot;.
; &quot;changechar : The character to replace each occrance of &quot;searchar&quot; in
;               &quot;string&quot;.&quot;
;==============================================================================
/def chr2chr = \
  /let st_ 0 %;\
  /test st_ := {1} %;\
  /let searchchar_ 0 %;\
  /test searchchar_ := {2} %;\
  /let changechar_ 0 %;\
  /test changechar_ := {3} %;\
  /let pos_ -1 %;\
  /let pos2_ 0 %;\
  /let done_ 0 %;\
  /WHILE (!done_) \
    /test pos2_ := pos_ %;\
    /test pos_ := strchr(substr(st_, pos_ + 1), searchchar_) %;\
    /IF (pos_ &gt; -1) \
      /test pos_ := pos_ + pos2_ + 1 %;\
      /IF (substr(st_, pos_, 1) =~ searchchar_) \
        /test st_ := strcat(substr(st_, 0, pos_), changechar_, substr(st_, pos_ + 1)) %;\
      /ENDIF %;\
    /ELSE \
      /test done_ := 1 %;\
    /ENDIF %;\
  /DONE %;\
  /RETURN st_

;==============================================================================
; tfwrite_vars()
; Write variables to a disk file.
; USAGE:
; x := tfwrite_vars(&quot;variables&quot;, &quot;matching&quot;, file_variable)
;
; x             : Number of variables written to disk.
; &quot;variables&quot;   : A string matching the variables you want to write to disk.
; &quot;matching&quot;    : &quot;simple&quot;: straightforward string comparison.
;                 &quot;glob&quot;  : shell-like matching (as before version 3.2).
;                 &quot;regexp&quot;: regular expression.
;                 &quot;&quot;      : defaults to &quot;glob&quot;
; file_variable : File variable of a tfopened file.
;
; EXAMPLES:
; /set movie_title lord of the rings
; /set movie_year 2001
; /set movie_length 2 hours 59 min
; /test file_ := tfopen(&quot;movies.dat&quot;, &quot;w&quot;)
; /test tfwrite_vars(&quot;movie_*&quot;, &quot;glob&quot;, file_)
; /test tfclose(file_)
;
; This will write all 3 variables to disk.
;
; NOTES: The variables must be global variables made with /set or
;        /test var := value.
;==============================================================================
/def tfwrite_vars = \
  /let vars_ %{1} %;\
  /let matching_ 0 %;\
  /test matching_ := {2} %;\
  /IF (matching_ =~ '') \
    /test matching_ := &quot;glob&quot; %;\
  /ENDIF %;\
  /let file_ %{3} %;\
  /let count_ 0 %;\
  /def tfwrite_vars2 = \
    /let var_ %%{1} %%;\
    /test ++count_ %%;\
    /test echo(strcat('::',$$[var_],'::')) %%;\
    /test tfwrite(file_, strcat(':',var_,'=',$$[var_], ':')) %;\
  /quote -S /test tfwrite_vars2(&quot;`&quot;/listvar -m$[matching_] -s $[vars_]&quot;&quot;) %;\
  /undef tfwrite_vars2 %;\
  /return count_

;==============================================================================
; tfread_vars()
; Reads variables to a from a disk file that was written by tfwrite_vars()
; USAGE:
; x := tfread_vars(file_variable)
;
; x             : number of variables read.
; file_variable : File variable of a tfopened file.
;
; EXAMPLES:
;
; /test file_ := tfopen(&quot;movies.dat&quot;, &quot;r&quot;)
; /test tfread_vars(file_)
; /test tfclose(file_)
;
; Now the variables will be set to the same values as shown in the
; tfwrite_vars() examples.
;
; NOTE: The variables do not have to exist prior to reading since they're
;       already written in the file by tfwrite_vars()
;==============================================================================
/def tfread_vars = \
  /let file_ %{1} %;\
  /let done_ 0 %;\
  /let st_ 0 %;\
  /let pos_ 0 %;\
  /let var_ 0 %;\
  /let value_ 0 %;\
  /let err_ 0 %;\
  /let count_ 0 %;\
  /WHILE (!done_) \
    /test err_ := tfread(file_, st_) %;\
    /IF (err_ != -1) \
      /test ++count_ %;\
      /test st_ := substr(st_, 1, strlen(st_) - 2) %;\
      /test pos_ := strstr(st_, '=') %;\
      /test var_ := substr(st_, 0, pos_) %;\
      /test value_ := substr(st_, pos_ +1) %;\
      /eval /test $[var_] := value_ %;\
    /ELSE \
      /test done_ := 1 %;\
    /ENDIF %;\
  /DONE %;\
  /RETURN count_

;==============================================================================
; delay()
;
; Delays an X number of seconds before returning.
; USAGE:
; delay(seconds)
;==============================================================================
/def delay = \
  /let seconds_ %{1} %;\
  /let ctime_ 0 %;\
  /test ctime_ := get_time(0) %;\
  /WHILE ( (get_time(0) - ctime_) &lt; seconds_ ) \
  /DONE

;==============================================================================
; get_time()
;
; returns hours, minutes, seconds in integer format
; USAGE:
; x := get_time(0)
; x := get_time(raw_time)
;
; x        : Time in seconds.
; 0        : Current time in seconds returned.
; raw_time : Raw time, raw time gets passed back from tinyfugue's time() function.
;            This will get converted to seconds.
;==============================================================================
/def get_time = \
  /let st_ 0 %;\
  /let hours_ 0 %;\
  /let min_ 0 %;\
  /let sec_ 0 %;\
  /IF ({*} = 0) \
    /test st_ := ftime('%%H:%%M:%%S', time()) %;\
  /ELSE \
    /test st_ := ftime('%%H:%%M:%%S', {*}) %;\
  /ENDIF %;\
  /test hours_ := substr(st_, 0, 2) %;\
  /test min_ := substr(st_, 3, 2) %;\
  /test sec_ := substr(st_, 6, 2) %;\
  /return time2sec(hours_, min_, sec_)

;==============================================================================
; time2sec()
;
; converts hours, min, sec to total seconds
; USAGE:
;
; x := time2sec(hours, min, sec)
;
; x      : The total time in seconds of hours, min, sec.
; hours  : Can range from 0 to 23.
; min    : Can range from 0 to 59.
; sec    : Can range from 0 to 59.
;==============================================================================
/def time2sec = \
  /let h_ %{1} %;\
  /let m_ %{2} %;\
  /let s_ %{3} %;\
  /return h_ * 3600 + m_ * 60 + s_

;==============================================================================
; sec2time()
;
; converts total seconds back into hours, min, sec
; USAGE:
; sec2time(&quot;time_rec&quot;, seconds)
;
; &quot;time_rec&quot; : Contains the hours, min, seconds passed back.
;              get_rec(&quot;time_rec&quot;, &quot;hours&quot;) = hours.
;              get_rec(&quot;time_rec&quot;, &quot;min&quot;) = minutes.
;              get_rec(&quot;time_rec&quot;, &quot;sec&quot;) = seconds.
; seconds    : Value in seconds.
;
; NOTES: &quot;time_rec&quot; can be any record name you want.
;        If &quot;&quot; is specified for &quot;time_rec&quot; then no record gets used. See how this
;        is used in sec2clock.  Local vars are set in calling function to get
;        back the values from this function.
;==============================================================================
/def sec2time = \
  /let rec_ 0 %;\
  /test rec_ := {1} %;\
  /let int_ %{2} %;\
  /IF (rec_ !~ '') \
    /let hours_ 0 %;\
    /let min_ 0 %;\
    /let sec_ 0 %;\
  /ENDIF %;\
  /test hours_ := int_ / 3600 %;\
  /let rem_ $[int_ - (hours_ * 3600)] %;\
  /test min_ := rem_ / 60 %;\
  /test rem_ := rem_ - (min_ * 60) %;\
  /test sec_ := rem_ %;\
  /IF (rec_ !~ '') \
    /test del_rec(rec_, '') %;\
    /test add_rec(rec_, 'hours', hours_) %;\
    /test add_rec(rec_, 'min', min_) %;\
    /test add_rec(rec_, 'sec', sec_) %;\
  /ENDIF

;==============================================================================
; sec2clock()
;
; similar to sec2time except it turns seconds into a clock reading AM/PM
; USAGE:
; x := sec2clock(value)
;
; x     : Time returned formatted in ##:##pm.  Example : &quot;3:04am&quot;
; value : Total seconds of time ranging over a 24 hour period.
;==============================================================================
/def sec2clock = \
  /let rawtime_ %{1} %;\
  /let hours_ 0 %;\
  /let min_ 0 %;\
  /let sec_ 0 %;\
  /let pm_ 0 %;\
  /let st_ 0 %;\
  /test sec2time('', rawtime_) %;\
  /IF (min_ &lt;= 9) \
    /test min_ := strcat('0', min_) %;\
  /ENDIF %;\
  /IF (rawtime_ &gt; 12 * 3600) \
    /test pm_ := 1 %;\
    /test hours_ := hours_ - 12 %;\
  /ELSE \
    /test pm_ := 0 %;\
  /ENDIF %;\
  /test st_ := strcat(hours_, ':', min_) %;\
  /IF (pm_) \
    /test st_ := strcat(st_, 'pm') %;\
  /ELSE \
    /test st_ := strcat(st_, 'am') %;\
  /ENDIF %;\
  /return st_

;==============================================================================
; num2commas()
;
; returns a number formatted with comma's
; USAGE:
; x := num2commas(value)
;
; x     : Value returned with commas. Example 1,345 from 1345.
; value : Any number.
;==============================================================================
/def num2commas = \
  /let st_ %{1} %;\
  /let count_ $[strlen(st_)] %;\
  /let count2_ 0 %;\
  /let st2_ 0 %;\
  /test st2_ := '' %;\
  /WHILE (--count_ &gt;= 0) \
    /IF ( (count2_ = 3) &amp; (substr(st_, count_, 1) !~ '-') ) \
      /test st2_ := strcat(',', st2_) %;\
      /test count2_ := 0 %;\
    /ENDIF %;\
    /test st2_ := strcat(substr(st_, count_, 1), st2_) %;\
    /test ++count2_ %;\
  /DONE %;\
  /return st2_

;==============================================================================
; send_macro()
;
; Sends a macro to tinyfugue
; USAGE:
; send_macro(&quot;macro&quot;)
;
; &quot;macro&quot;   : A tinyfugue macro like &quot;/help&quot;
;
; NOTES: If &quot;macro&quot; doesn't begin with a &quot;/&quot; it will send it to the world you're
;        currently connected to.
;==============================================================================
/def send_macro = \
  /def send_macro2 = \
    %* %;\
  /send_macro2 %;\
  /undef send_macro2

;==============================================================================
; strip_space()
;
; Strips all leading spaces from a string.
; USAGE:
; x := strip_space(&quot;string&quot;)
;
; x        : Returned &quot;string&quot; with no leading spaces.
; &quot;string&quot; : Any string
;==============================================================================
/def strip_space = \
  /let st_ 0 %;\
  /test st_ := {1} %;\
  /let st2_ 0 %;\
  /let count_ -1 %;\
  /test st2_ := '' %;\
  /WHILE (++count_ &lt;= strlen(st_) &amp; substr(st_, count_, 1) =~ ' ') \
  /DONE %;\
  /return substr(st_, count_, 255)

;==============================================================================
; parse_string()
;
; This function will parse a string by the separator you choose and place the
; elements back into an array of your choosing.
; USAGE:
; parse_string(&quot;array&quot;, &quot;sep&quot;, &quot;string&quot;)
;
; &quot;array&quot;  : get_array(&quot;data&quot;, 0) = number of elements returned.
;            get_array(&quot;data&quot;, 1, 2, 3..) = &quot;string&quot; parsed out.
; &quot;sep&quot;    : The divider of elements in string.
; &quot;string&quot; : The string you want parsed.
;
; EXAMPLE:
; parse_string(&quot;data&quot;, &quot; &quot;, &quot;hp(45/100) sp(450/500)&quot;)
;
; get_array(&quot;data&quot;, 0) = 2
; get_array(&quot;data&quot;, 1) = &quot;hp(45/100)&quot;
; get_array(&quot;data&quot;, 2) = &quot;sp(450/500)&quot;
;==============================================================================
/def parse_string = \
  /let array_ %{1} %;\
  /let sep_ 0 %;\
  /test sep_ := {2} %;\
  /let data_ 0 %;\
  /test data_ := {3} %;\
  /let count_ -1 %;\
  /let parcount_ 0 %;\
  /let ch_ 0 %;\
  /let st_ 0 %;\
  /let len_ 0 %;\
  /test ch_ := '' %;\
  /test st_ := '' %;\
  /test len_ := strlen(data_) %;\
  /test purge_array(array_) %;\
  /WHILE (++count_ &lt;= len_) \
    /test ch_ := substr(data_, count_, 1) %;\
    /IF ( (ch_ =~ sep_) | (count_ = len_) ) \
      /test ++parcount_ %;\
      /test put_array(array_, parcount_, st_) %;\
      /test st_ := '' %;\
    /ELSE \
      /test st_ := strcat(st_, ch_) %;\
    /ENDIF %;\
  /DONE %;\
  /test put_array(array_, 0, parcount_)

;==============================================================================
; search_literal()
;
; Search for a character in a string of characters.  Characters will be skipped
; in the string that start with a literal-switch.  The position of the character
; found will be based on the string returned with no literal switches.
; USAGE:
; x := search_literal(&quot;data&quot;, &quot;string&quot;, char, litchar)
;
; x         : Position of char in &quot;string&quot;. -1 returned if nothing found.
; &quot;data&quot;    : Record that contains the following:
;             /rec :data.pos:    = position
;             /rec :data.st:     = &quot;string&quot; with no literal switches.
; &quot;string&quot;  : String being searched.
; char      : Char to search for in &quot;string&quot; skipping literal switches.
; litchar   : The literal-switch of your choosing.
;
; EXAMPLES:
; x := search_literal(&quot;data&quot;, &quot;/A/C/car/rocks&quot;, &quot;c&quot;, &quot;/&quot;)
; RETURNS:
; x := 7
; /rec :data.pos:   = 7
; /rec :data.st:    = &quot;ACcarrocks&quot;
;
; NOTES: To use a literal-switch as data in the &quot;data&quot; use two of them in a row.
;        like &quot;\\&quot; would mean &quot;\&quot;
;==============================================================================
/def search_literal = \
  /let rec_ 0 %;\
  /test rec_ := {1} %;\
  /let string_ 0 %;\
  /test string_ := {2} %;\
  /let char_ 0 %;\
  /test char_ := {3} %;\
  /let litchar_ 0 %;\
  /test litchar_ := {4} %;\
  /let string2_ 0 %;\
  /let lastch_ 0 %;\
  /let ch_ 0 %;\
  /let count_ -1 %;\
  /let pos_ -1 %;\
  /let length_ $[strlen(string_)] %;\
  /test string2_ := '' %;\
  /test lastch_ := '' %;\
  /test ch_ := '' %;\
  /WHILE (++count_ &lt;= length_) \
    /test lastch_ := ch_ %;\
    /test ch_ := substr(string_, count_, 1) %;\
    /IF (ch_ =~ litchar_) \
      /IF (substr(string_, count_ + 1, 1) =~ litchar_) \
        /test string2_ := strcat(string2_, litchar_) %;\
        /test ++count_ %;\
      /ENDIF %;\
    /ELSE \
      /IF ( (lastch_ !~ litchar_) &amp; (ch_ =~ char_) &amp; (pos_ = -1) ) \
        /test pos_ := strlen(string2_) %;\
      /ENDIF %;\
      /test string2_ := strcat(string2_, ch_) %;\
    /ENDIF %;\
  /DONE %;\
  /test del_rec(rec_, '') %;\
  /test add_rec(rec_, 'pos', pos_) %;\
  /test add_rec(rec_, 'st', string2_) %;\
  /RETURN pos_

;==============================================================================
; find_string()
;
; Finds a string within a string and return the starting position, end
; position and length in a virtual array.
; USAGE:
; x := find_string(&quot;pos&quot;, &quot;string&quot;, &quot;search&quot;, stringpos, skip)
;
; x          : -1 no string found, 1 string found.
; &quot;pos&quot;      : Position data returned in a record.
;              /rec :pos.found:        = 1 if string found -1 if not found.
;              /rec :pos.st:           = search data found.
;              /rec :pos.start:        = starting location in &quot;string&quot;.
;              /rec :pos.end:          = ending location in &quot;string&quot;.
;              /rec :pos.len:          = length of sub string found.
; &quot;string&quot;   : String being searched.
; &quot;search&quot;   : String your searching for.
; stringpos  : Position in string to start searching at.
; skip       : Number of matches to skip before returning a real match.
;
; EXAMPLES:
; find_string(&quot;pos&quot;, &quot;Status is currently 45.65 degrees&quot;, &quot;y * d&quot;, 0, 0)
; RETURNS:
; /rec :pos.found:        = 1           {string found}
; /rec :pos.st:           = &quot;y 45.65 d&quot; {actual data found}
; /rec :pos.start:        = 18          {starting position}
; /rec :pos.end:          = 26          {ending position}
; /rec :pos.len:          = 9           {length}
;
; To pull out just the 45.65 in the example above you would need to do:
; find_string(&quot;pos&quot;, &quot;Status is currently 45.65 degrees&quot;, &quot;y (*) d&quot;, 0, 0)
;
; NOTES: Anything in () is returned, you can only have one set of () and
;        one &quot;*&quot; in your search.  Use ~( ~) ~* if you want that as part of
;        your search data. When using () with *, the * must be inside the
;        () or you may get strange results.
;==============================================================================
/def find_string2 = \
  /let string_ 0 %;\
  /test string_ := {1} %;\
  /let search_ := 0 %;\
  /test search_ := {2} %;\
  /let skip_ %{3} %;\
  /let searchl_ $[strlen(search_)] %;\
  /let count_ 0 %;\
  /let count2_ 0 %;\
  /let done_ 0 %;\
  /let pos_ 0 %;\
  /let pos2_ 0 %;\
  /WHILE (!done_) \
    /test pos_ := strstr(string_, search_) %;\
    /IF (pos_ &gt; -1) \
      /test ++count2_ %;\
      /IF (count2_ &gt; skip_) \
        /test pos_ := pos2_ + pos_ %;\
        /test done_ := 1 %;\
      /ELSE \
        /test string_ := substr(string_, pos_ + searchl_) %;\
        /test pos2_ := pos2_ + pos_ + searchl_ %;\
      /ENDIF %;\
    /ELSE \
      /test done_ := 1 %;\
    /ENDIF %;\
  /DONE %;\
  /IF (count2_ &lt;= skip_) \
    /test pos_ := -1 %;\
  /ENDIF %;\
  /RETURN pos_

/def find_string3 = \
  /let string_ 0 %;\
  /test string_ := {1} %;\
  /let searchL_ 0 %;\
  /test searchL_ := {2} %;\
  /let searchR_ 0 %;\
  /test searchR_ := {3} %;\
  /let skip_ %{4} %;\
  /let count_ 0 %;\
  /let count2_ 0 %;\
  /let done_ 0 %;\
  /let posL_ 0 %;\
  /let posR_ 0 %;\
  /let pos2_ 0 %;\
  /WHILE (!done_) \
    /test posL_ := strstr(string_, searchL_) %;\
    /IF (posL_ &gt; -1) \
      /test string_ := substr(string_, posL_ + strlen(searchL_)) %;\
      /test posR_ := strstr(string_, searchR_) %;\
      /IF (posR_ &gt; -1) \
        /test ++count2_ %;\
        /IF (count2_ &gt; skip_) \
          /test length_ := posR_ + strlen(searchL_) + strlen(searchR_) %;\
          /test pos_ := pos2_ + posL_ %;\
          /test done_ := 1 %;\
        /ELSE \
          /test pos2_ := pos2_ + posL_ + strlen(searchL_) %;\
        /ENDIF %;\
      /ELSE \
        /test done_ := 1 %;\
      /ENDIF %;\
    /ELSE \
      /test done_ := 1 %;\
    /ENDIF %;\
  /DONE %;\
  /IF (count2_ &lt;= skip_) \
    /test pos_ := -1 %;\
  /ENDIF %;\
  /RETURN pos_

/def find_string = \
  /let rec_ 0 %;\
  /test rec_ := {1} %;\
  /let string_ 0 %;\
  /test string_ := {2} %;\
  /let search_ 0 %;\
  /test search_ := {3} %;\
  /let stringpos_ %{4} %;\
  /let skip_ 0 %;\
  /test skip_ := {5} %;\
  /let found_ -1 %;\
  /let pos_ -1 %;\
  /let pos2_ 0 %;\
  /let end_ 0 %;\
  /let length_ 0 %;\
  /let left_ 0 %;\
  /let right_ 0 %;\
  /let st_ 0 %;\
  /let searchL_ 0 %;\
  /let searchR_ 0 %;\
  /test right_ := 0 %;\
  /test st_ := '' %;\
  /test searchL_ := '' %;\
  /test searchR_ := '' %;\
  /test string_ := substr(string_, stringpos_) %;\
  /IF (search_ !~ '') \
    /IF ( (search_ =~ '*') | (search_ =~ &quot;(*)&quot;) ) \
      /IF ( (skip_ = 0) &amp; (string_ !~ '') )\
        /test found_ := 1 %;\
        /test pos_ := 0 %;\
        /test end_ := strlen(string_) - 1 %;\
        /test length_ := end_ + 1 %;\
        /test st_ := string_ %;\
      /ENDIF %;\
    /ELSE \
      /test del_rec(rec_, '') %;\
      /test left_ := search_literal(rec_, search_, '(', '~') %;\
      /test right_ := search_literal(rec_, search_, ')', '~') %;\
      /test pos2_ := search_literal(rec_, search_, '*', '~') %;\
      /test search_ := get_rec(rec_, 'st') %;\
      /IF (left_ + right_ &gt; 0) \
        /test search_ := strcat(substr(search_, 0, left_), \
                                  substr(search_, left_ + 1, right_ - left_ - 1), \
                                  substr(search_, right_ + 1)) %;\
        /test right_ := right_ - 2 %;\
        /IF (pos2_ &gt; -1) \
          /test --pos2_ %;\
        /ENDIF %;\
      /ENDIF %;\
      /IF (pos2_ = -1) \
        /test found_ := find_string2(string_, search_, skip_) %;\
        /IF (found_ &gt; -1) \
          /test pos_ := found_ %;\
          /test length_ := strlen(search_) %;\
          /test end_ := pos_ + length_ - 1 %;\
          /test st_ := search_ %;\
          /test found_ := 1 %;\
          /IF (left_ + right_ &gt; 0) \
            /test length_ := right_ - left_ + 1 %;\
            /test pos_ := pos_ + left_ %;\
            /test end_ := pos_ + right_ - 1 %;\
            /test st_ := substr(string_, pos_, length_) %;\
          /ENDIF %;\
        /ENDIF %;\
      /ELSE \
        /test searchL_ := substr(search_, 0, pos2_) %;\
        /test searchR_ := substr(search_, pos2_ + 1) %;\
        /IF (find_string3(string_, searchL_, searchR_, skip_) &gt; -1) \
          /test found_ := 1 %;\
          /test end_ := pos_ + length_ - 1 %;\
          /test st_ := substr(string_, pos_, length_) %;\
          /IF (left_ + right_ &gt; 0) \
            /test pos_ := pos_ + left_ %;\
            /test end_ := end_ - (strlen(search_) - right_) + 1 %;\
            /test length_ := end_ - pos_ +1 %;\
            /test st_ := substr(string_, pos_, length_) %;\
          /ENDIF %;\
        /ENDIF %;\
      /ENDIF %;\
    /ENDIF %;\
  /ENDIF %;\
  /test del_rec(rec_, '') %;\
  /IF (found_ = 1) \
    /test pos_ := pos_ + stringpos_ %;\
    /test end_ := end_ + stringpos_ %;\
  /ENDIF %;\
  /test add_rec(rec_, 'found', found_) %;\
  /test add_rec(rec_, 'st', st_) %;\
  /test add_rec(rec_, 'start', pos_) %;\
  /test add_rec(rec_, 'end', end_) %;\
  /test add_rec(rec_, 'len', length_) %;\
  /RETURN found_

;==============================================================================
; search_replace()
;
; Searches for a string and replaces each occurrence with a new string.
; USAGE
; x := search_replace(&quot;record&quot;, &quot;string&quot;, &quot;search&quot;, &quot;replace&quot;, count, skip)
;
; x         : -1 no searches done, &gt;=1 = how many searches were done.
; &quot;record&quot;  : /rec :record.replace:    = How many replaces were done. -1 = none
;             /rec :record.st:         = New string with replaced parts.
; &quot;string&quot;  : String to have parts to be replaced.
; &quot;search&quot;  : Sub string in &quot;string&quot; to be replaced.
; &quot;replace&quot; : New sub string that will replace each &quot;search&quot; string found.
; count     : How many replacements to do. 0 = unlimited.
; skip      : How many matches you want to skip before replacing. 0 = no skip.
;
; EXAMPLES:
; search_replace(&quot;search&quot;, &quot;Status is currently 45.65 degrees&quot;, &quot;y (*) d&quot;, &quot;34.2&quot;, 0, 0)
; RETURNS:
; /rec :search.replace:      = 1 (1 replacement was done)
; /rec :search.st:           = &quot;Status is currently 32.2 degrees&quot;
;
; NOTES: Anything in () is replaced.  You can only have one set of () and
;        one &quot;*&quot; in your search.  Use ~( ~) ~* if you want that as part of
;        your search data. When using () with *, the * must be inside the
;        () or you may get strange results.
;==============================================================================
/def search_replace = \
  /let rec_ %{1} %;\
  /let string_ 0 %;\
  /test string_ := {2} %;\
  /let search_ 0 %;\
  /test search_ := {3} %;\
  /let replace_ 0 %;\
  /test replace_ := {4} %;\
  /let count_ %{5} %;\
  /let skip_ %{6} %;\
  /let count2_ 0 %;\
  /let pos_ 0 %;\
  /let done_ 0 %;\
  /let start_ 0 %;\
  /let length_ 0 %;\
  /let end_ 0 %;\
  /WHILE (!done_) \
    /IF (find_string(rec_, string_, search_, pos_, skip_) != -1) \
      /IF ( (count2_ &lt; count_) | (count_ = 0) ) \
        /test ++count2_ %;\
        /test skip_ := 0 %;\
        /test start_ := get_rec(rec_, &quot;start&quot;) %;\
        /test length_ := get_rec(rec_, &quot;len&quot;) %;\
        /test end_ := start_ + length_ %;\
        /test string_ := strcat(substr(string_, 0, start_), \
                                replace_, \
                                substr(string_, end_)) %;\
        /test pos_ := start_ + strlen(replace_) %;\
      /ELSE \
        /test done_ := 1 %;\
      /ENDIF %;\
    /ELSE \
      /test done_ := 1 %;\
    /ENDIF %;\
  /DONE %;\
  /test del_rec(rec_, '') %;\
  /IF (count2_ = 0) \
    /test count2_ := -1 %;\
  /ENDIF %;\
  /test add_rec(rec_, 'replace', count2_) %;\
  /test add_rec(rec_, 'st', string_) %;\
  /RETURN count2_
;--------------------------------------------------------------------------
&lt;/pre&gt;</textarea><div class='templatesUsed'>

</div>
<p>Return to <a href="/wiki/index.php/Utilities_(used_to_be_%22Mylib.tf%22)" title="Utilities (used to be &quot;Mylib.tf&quot;)">Utilities (used to be &quot;Mylib.tf&quot;)</a>.</p>
<div class="printfooter">
Retrieved from "<a href="http://www.gwen-morse.com/wiki/index.php/Utilities_(used_to_be_%22Mylib.tf%22)">http://www.gwen-morse.com/wiki/index.php/Utilities_(used_to_be_%22Mylib.tf%22)</a>"</div>
						<!-- end content -->
						<div class="visualClear"></div>
		</div>
	</div>
		</div>
		<div id="column-one">
	<div id="p-cactions" class="portlet">
		<h5>Views</h5>
		<div class="pBody">
			<ul>
	
				 <li id="ca-nstab-main" class="selected"><a href="/wiki/index.php/Utilities_(used_to_be_%22Mylib.tf%22)" title="View the content page [c]" accesskey="c">Page</a></li>
				 <li id="ca-talk" class="new"><a href="/wiki/index.php?title=Talk:Utilities_(used_to_be_%22Mylib.tf%22)&amp;action=edit&amp;redlink=1" title="Discussion about the content page [t]" accesskey="t">Discussion</a></li>
				 <li id="ca-viewsource" class="selected"><a href="/wiki/index.php?title=Utilities_(used_to_be_%22Mylib.tf%22)&amp;action=edit" title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></li>
				 <li id="ca-history"><a href="/wiki/index.php?title=Utilities_(used_to_be_%22Mylib.tf%22)&amp;action=history" title="Past revisions of this page [h]" accesskey="h">History</a></li>			</ul>
		</div>
	</div>
	<div class="portlet" id="p-personal">
		<h5>Personal tools</h5>
		<div class="pBody">
			<ul>
				<li id="pt-login"><a href="/wiki/index.php?title=Special:UserLogin&amp;returnto=Utilities_(used_to_be_%22Mylib.tf%22)" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>
			</ul>
		</div>
	</div>
	<div class="portlet" id="p-logo">
		<a style="background-image: url(/home/public/wiki/guestbook.jpg);" href="/wiki/index.php/Main_Page" title="Visit the main page [z]" accesskey="z"></a>
	</div>
	<script type="text/javascript"> if (window.isMSIE55) fixalpha(); </script>
	<div class='generated-sidebar portlet' id='p-navigation'>
		<h5>Navigation</h5>
		<div class='pBody'>
			<ul>
				<li id="n-mainpage-description"><a href="/wiki/index.php/Main_Page">Main Page</a></li>
				<li id="n-MUSH-Code"><a href="/wiki/index.php/MUSHcode">MUSH Code</a></li>
				<li id="n-Tinyfugue-Client"><a href="/wiki/index.php/Tinyfugue">Tinyfugue Client</a></li>
				<li id="n-Muby-Client"><a href="/wiki/index.php/Muby">Muby Client</a></li>
				<li id="n-Roleplay"><a href="/wiki/index.php/Roleplay">Roleplay</a></li>
				<li id="n-Realms-of-Despair"><a href="/wiki/index.php/Realms_of_Despair">Realms of Despair</a></li>
				<li id="n-Sims"><a href="/wiki/index.php/Sims">Sims</a></li>
				<li id="n-Linux"><a href="/wiki/index.php/Linux">Linux</a></li>
				<li id="n-Health-and-Beauty"><a href="/wiki/index.php/HABA">Health and Beauty</a></li>
			</ul>
		</div>
	</div>
	<div class='generated-sidebar portlet' id='p-Wiki_Help'>
		<h5>Wiki Help</h5>
		<div class='pBody'>
			<ul>
				<li id="n-portal"><a href="/wiki/index.php/GwenWiki:Community_Portal" title="About the project, what you can do, where to find things">Community portal</a></li>
				<li id="n-currentevents"><a href="/wiki/index.php/GwenWiki:Current_events" title="Find background information on current events">Current events</a></li>
				<li id="n-recentchanges"><a href="/wiki/index.php/Special:RecentChanges" title="The list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
				<li id="n-randompage"><a href="/wiki/index.php/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
				<li id="n-help"><a href="/wiki/index.php/Help:Contents" title="The place to find out">Help</a></li>
			</ul>
		</div>
	</div>
	<div id="p-search" class="portlet">
		<h5><label for="searchInput">Search</label></h5>
		<div id="searchBody" class="pBody">
			<form action="/wiki/index.php" id="searchform"><div>
				<input type='hidden' name="title" value="Special:Search"/>
				<input id="searchInput" name="search" type="text" title="Search GwenWiki [f]" accesskey="f" value="" />
				<input type='submit' name="go" class="searchButton" id="searchGoButton"	value="Go" title="Go to a page with this exact name if exists" />&nbsp;
				<input type='submit' name="fulltext" class="searchButton" id="mw-searchButton" value="Search" title="Search the pages for this text" />
			</div></form>
		</div>
	</div>
	<div class="portlet" id="p-tb">
		<h5>Toolbox</h5>
		<div class="pBody">
			<ul>
				<li id="t-whatlinkshere"><a href="/wiki/index.php/Special:WhatLinksHere/Utilities_(used_to_be_%22Mylib.tf%22)" title="List of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
				<li id="t-recentchangeslinked"><a href="/wiki/index.php/Special:RecentChangesLinked/Utilities_(used_to_be_%22Mylib.tf%22)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
<li id="t-specialpages"><a href="/wiki/index.php/Special:SpecialPages" title="List of all special pages [q]" accesskey="q">Special pages</a></li>
			</ul>
		</div>
	</div>
		</div><!-- end of the left (by default at least) column -->
			<div class="visualClear"></div>
			<div id="footer">
				<div id="f-poweredbyico"><a href="http://www.mediawiki.org/"><img src="/wiki/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" /></a></div>
			<ul id="f-list">
					<li id="privacy"><a href="/wiki/index.php/GwenWiki:Privacy_policy" title="GwenWiki:Privacy policy">Privacy policy</a></li>
					<li id="about"><a href="/wiki/index.php/GwenWiki:About" title="GwenWiki:About">About GwenWiki</a></li>
					<li id="disclaimer"><a href="/wiki/index.php/GwenWiki:General_disclaimer" title="GwenWiki:General disclaimer">Disclaimers</a></li>
			</ul>
		</div>
</div>

		<script type="text/javascript">if (window.runOnloadHook) runOnloadHook();</script>
<!-- Served in 0.319 secs. --></body></html>
