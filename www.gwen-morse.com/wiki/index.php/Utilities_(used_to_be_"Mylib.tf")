<!DOCTYPE html>
<html lang="en" dir="ltr" class="client-nojs">
<head>
<meta charset="UTF-8" /><title>Utilities (used to be "Mylib.tf") - Gwen Morse's Wiki</title>
<meta name="generator" content="MediaWiki 1.22.8" />
<link rel="shortcut icon" href="/favicon.ico" />
<link rel="search" type="application/opensearchdescription+xml" href="/wiki/opensearch_desc.php" title="Gwen Morse's Wiki (en)" />
<link rel="EditURI" type="application/rsd+xml" href="http://www.gwen-morse.com/wiki/api.php?action=rsd" />
<link rel="alternate" type="application/atom+xml" title="Gwen Morse's Wiki Atom feed" href="/wiki/index.php?title=Special:RecentChanges&amp;feed=atom" />
<link rel="stylesheet" href="http://www.gwen-morse.com/wiki/load.php?debug=false&amp;lang=en&amp;modules=mediawiki.legacy.commonPrint%2Cshared%7Cskins.vector&amp;only=styles&amp;skin=vector&amp;*" />
<meta name="ResourceLoaderDynamicStyles" content="" />
<style>a:lang(ar),a:lang(ckb),a:lang(kk-arab),a:lang(mzn),a:lang(ps),a:lang(ur){text-decoration:none}
/* cache key: homesitewiki-mw_:resourceloader:filter:minify-css:7:caed6998fab899483c805c3e2c432ff5 */</style>

<script src="http://www.gwen-morse.com/wiki/load.php?debug=false&amp;lang=en&amp;modules=startup&amp;only=scripts&amp;skin=vector&amp;*"></script>
<script>if(window.mw){
mw.config.set({"wgCanonicalNamespace":"","wgCanonicalSpecialPageName":false,"wgNamespaceNumber":0,"wgPageName":"Utilities_(used_to_be_\"Mylib.tf\")","wgTitle":"Utilities (used to be \"Mylib.tf\")","wgCurRevisionId":1978,"wgRevisionId":1978,"wgArticleId":69,"wgIsArticle":true,"wgIsRedirect":false,"wgAction":"view","wgUserName":null,"wgUserGroups":["*"],"wgCategories":[],"wgBreakFrames":false,"wgPageContentLanguage":"en","wgPageContentModel":"wikitext","wgSeparatorTransformTable":["",""],"wgDigitTransformTable":["",""],"wgDefaultDateFormat":"dmy","wgMonthNames":["","January","February","March","April","May","June","July","August","September","October","November","December"],"wgMonthNamesShort":["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],"wgRelevantPageName":"Utilities_(used_to_be_\"Mylib.tf\")","wgIsProbablyEditable":false,"wgRestrictionEdit":[],"wgRestrictionMove":[]});
}</script><script>if(window.mw){
mw.loader.implement("user.options",function(){mw.user.options.set({"ccmeonemails":0,"cols":80,"date":"default","diffonly":0,"disablemail":0,"disablesuggest":0,"editfont":"default","editondblclick":0,"editsection":1,"editsectiononrightclick":0,"enotifminoredits":0,"enotifrevealaddr":0,"enotifusertalkpages":1,"enotifwatchlistpages":0,"extendwatchlist":0,"fancysig":0,"forceeditsummary":0,"gender":"unknown","hideminor":0,"hidepatrolled":0,"imagesize":2,"justify":0,"math":1,"minordefault":0,"newpageshidepatrolled":0,"nocache":0,"noconvertlink":0,"norollbackdiff":0,"numberheadings":0,"previewonfirst":0,"previewontop":1,"rcdays":7,"rclimit":50,"rememberpassword":0,"rows":25,"searchlimit":20,"showhiddencats":0,"shownumberswatching":1,"showtoc":1,"showtoolbar":1,"skin":"vector","stubthreshold":0,"thumbsize":2,"underline":2,"uselivepreview":0,"usenewrc":0,"vector-simplesearch":1,"watchcreations":0,"watchdefault":0,"watchdeletion":0,"watchlistdays":3,"watchlisthideanons":0,"watchlisthidebots":0,
"watchlisthideliu":0,"watchlisthideminor":0,"watchlisthideown":0,"watchlisthidepatrolled":0,"watchmoves":0,"wllimit":250,"useeditwarning":1,"prefershttps":1,"language":"en","variant-gan":"gan","variant-iu":"iu","variant-kk":"kk","variant-ku":"ku","variant-shi":"shi","variant-sr":"sr","variant-tg":"tg","variant-uz":"uz","variant-zh":"zh","searchNs0":true,"searchNs1":false,"searchNs2":false,"searchNs3":false,"searchNs4":false,"searchNs5":false,"searchNs6":false,"searchNs7":false,"searchNs8":false,"searchNs9":false,"searchNs10":false,"searchNs11":false,"searchNs12":false,"searchNs13":false,"searchNs14":false,"searchNs15":false,"variant":"en"});},{},{});mw.loader.implement("user.tokens",function(){mw.user.tokens.set({"editToken":"+\\","patrolToken":false,"watchToken":false});},{},{});
/* cache key: homesitewiki-mw_:resourceloader:filter:minify-js:7:5a69c7e0fa6557851b6dea8a62efaffb */
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.page.startup","mediawiki.legacy.wikibits","mediawiki.legacy.ajax","skins.vector.js"]);
}</script>
<!--[if lt IE 7]><style type="text/css">body{behavior:url("/wiki/skins/vector/csshover.min.htc")}</style><![endif]--></head>
<body class="mediawiki ltr sitedir-ltr ns-0 ns-subject page-Utilities_used_to_be_Mylib_tf skin-vector action-view vector-animateLayout">
		<div id="mw-page-base" class="noprint"></div>
		<div id="mw-head-base" class="noprint"></div>
		<div id="content" class="mw-body" role="main">
			<a id="top"></a>
			<div id="mw-js-message" style="display:none;"></div>
						<h1 id="firstHeading" class="firstHeading" lang="en"><span dir="auto">Utilities (used to be "Mylib.tf")</span></h1>
			<div id="bodyContent">
								<div id="siteSub">From Gwen Morse&#039;s Wiki</div>
								<div id="contentSub"></div>
												<div id="jump-to-nav" class="mw-jump">
					Jump to:					<a href="#mw-navigation">navigation</a>, 					<a href="#p-search">search</a>
				</div>
				<div id="mw-content-text" lang="en" dir="ltr" class="mw-content-ltr"><p>The starting section of this file duplicates <a href="/wiki/index.php/Galvin%27s_Virtual_Array" title="Galvin's Virtual Array">Galvin's Virtual Array</a>. It's Galvin's array code plus so much more.
</p>
<pre>
;=========================================================
;utilities.tf (formerly mylib.tf)
;This contains common functions missing in the main tf library
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;
;;; Virtual Array 
;;;
;;; Originally submitted to the Tinyfugue mailing list by Galvin &lt;kairo at mediaone dot net&gt;
;;; Modfied by Michael Hunger &lt;mh14 at inf.tu-dresden dot de&gt;
;;; Modified by Regan@ Many MU's
;;; Possibly modified by other members of the Tinyfugue mailing list.
;;;
;;; You may store anything to be abbreviated in these lists, e.g. weapons,
;;; friends, npcs, scores etc.
;;;
;;; If you use text not containing other characters than letters, numbers and _
;;; you may also use this as an simple key-value hash list
;;; e.g. /set_array weapon s1 sword_with_a_very_long_id
;;;
;;; /def wield = /get_array weapon&#160;%1%;wield&#160;%?
;;;
;;; Usage:
;;; instead of: wield sword_with_a_very_long_id
;;; just use: /wield s1
;;;
;;; Some Examples:
;;; /test put_array('test_array', 1, 367382)
;;; /test put_array('test_array', 2, 'a string')
;;; /test echo(get_array('test_array', 1))
;;; /test echo(get_array('test_array', 2))
;;; 
;;; You should see 367382 and a string echoed to your screen.
;;; 
;;; Passing an array to a function
;;; 
;;; /def function_array = \
;;; /test array1&#160;:= get_array({*}, 1)&#160;%;\
;;; /test array2&#160;:= get_array({*}, 2)&#160;%;\
;;; /test echo(strcat(array1, ':', array2))
;;; 
;;; /test function_array('test_array')
;;; 
;;; What I wrote here was just some stuff off the top of my head real quick.  Hope it helps.
;;; Oh and /listarray is a real good debuging tool, I use this as well. SO /listarray test_array should return:
;;; test_array[1]:=367382
;;; test_array[2]:=a string
;;; test_array[3]:=
;;;
;;; /listarray only lists up till a blank entry, I thought about using entry 0 as the # of elements but decided 
;;; that some people may want to start arrays from 0 and not 1.
;;;
;;; Some get_array_count examples:
;
; /test put_array('halloween', 1, 'skeleton')
; /test put_array('halloween', 2, 'owls')
; /test put_array('halloween', 3, 'boo!')
; 
; /test echo(get_array_count('halloween', 1))
; returns 3
; /test echo(get_array_count('halloween', 2))
; returns 2
; 
; /test put_2array('double', 1, 1 , 'hmm')
; /test put_2array('double, 1, 2, 'burp!')
; /test put_2array('double, 1, 3, 'damn')
; /test echo(get_2array_count('double', 1, 1) 
;
;;; Notes from Galvin
;
; I made some changes and added some new functions to arrays, 
; I overhauled the code as well.
;
; new functions
;
; tfwrite_array()&#160;: write an array to disk
; tfread_array()&#160;: read an array from disk
; strstr_array()&#160;: search for a string in an array
; list_array() was listarray()&#160;: good for debugging, lists arrays.
;
; changes:
;  strstr_array() replaces get_array_count()
;   x&#160;:= (strstr_array(&quot;my array&quot;, 0, 1000, '&quot;&quot;) -1) will do the same
;   thing as:
;   get_array_count(&quot;my array&quot;, 0)
;   strstr_array() returns -1 if it doesn't find the element
;
;  list_array now uses /listvar to get the data to list, it 
;  reformats it to make it look like the old listarray.
;
;------------------------------------------------------------------------
;Get array / get 2array&#160;: A virtual array function to similate a real array
;usage:
;get_array(&quot;Array name here&quot;, I) &amp; get_2array(&quot;array name&quot;, I, I2)
;example get_array(&quot;Dir_Array&quot;, 43) returns the 43rd element from &quot;Dir_Stack&quot;
;
;------------------------------------------------------------------------
/def get_array = \
 /return _array_%1_%2

/def get_2array = \
 /return _array_%1_%2_%3

;------------------------------------------------------------------------
;PUT array / put 2array: A virtual array function to similate a real array
;usage:
;put_array(&quot;Array name here&quot;, I, st) &amp; put_2array(&quot;array name&quot;, I, I2, st)
;example put_array(&quot;Dir_Array&quot;, 43, &quot;sw&quot;) puts &quot;sw&quot; at element 43 in
;&quot;Dir_Array&quot;
;------------------------------------------------------------------------
/def put_array = \
 /IF (strlen({3}) &gt; 0) \
   /set _array_%1_%2=%3%;\
 /ELSE \
   /unset _array_%1_%2%;\
 /ENDIF%;\

/def put_2array = \
 /IF (strlen({4}) &gt; 0) \
   /set _array_%1_%2_%3=%4%;\
 /ELSE \
   /unset _array_%1_%2_%3%;\
 /ENDIF%;\

;------------------------------------------------------------------------
;PURGE array&#160;: Purges a virtual array made by get_array &amp; put_array
;usage:
;purge_array(&quot;Array name here&quot;)
;example purge_array(&quot;Dir_Array&quot;), deletes the whole array from memory
;NOTE: Purge array starts from element 0
;NOTE: this can also purge double dimensioned arrays too.
;------------------------------------------------------------------------
/def purge_array = \
 /quote -S /unset `/listvar -s _array_%1_*

;--------------------------------------------------------------------------
;listarray / list2array
;USAGE:
;/listarray array_name &lt;num&gt; &amp; /list2array array_name &lt;num&gt; &lt;num2&gt;
;Will list the whole array of array_name starting from element &lt;num&gt;
;/list2array only lists the second dimension from &lt;start&gt;
;--------------------------------------------------------------------------
/def listarray = \
 /test LA_Count&#160;:=&#160;%2 - 1%;\
 /test LA_Element&#160;:= &quot; &quot;%;\
 /while (strlen(LA_Element) &gt; 0) \
   /test ++LA_Count%;\
   /test LA_Element&#160;:= get_array({1}, LA_Count)%;\
   /test echo(strcat({1}, &quot;[&quot;, LA_Count, &quot;]:=&quot;, LA_Element))%;\
 /DONE

/def list2array = \
 /test LA2_Count&#160;:= -1%;\
 /test LA2_Element&#160;:= &quot; &quot;%;\
 /while (LA2_Count &lt; 255) \
   /test ++LA2_Count%;\
   /test LA2_Element&#160;:= get_2array({1}, {2}, LA2_Count)%;\
   /IF (strlen(LA2_Element) &gt; 0) \
     /test echo(strcat({1}, &quot;[&quot;, {2}, &quot;][&quot;, LA2_Count, &quot;]:=&quot;, LA2_Element))%;\
   /ENDIF%;\
 /DONE

;--------------------------------------------------------------------------
; list_array() / list_2array()
;
; List an array in an easy to read format.
; USAGE:
; list_array(&quot;array_name&quot;, startindex)
; list_2array(&quot;array_name&quot;, startindex1, startindex2)
; /list_array &lt;array_name&gt; &lt;startindex&gt;
; /list_2array &lt;array_name&gt; &lt;startindex1&gt; &lt;startindex2&gt;
;
; &quot;array_name&quot;&#160;: Name of the array you want to list. (function form only)
; startindex  &#160;: Starting element you want to list from.
; startindex1 &#160;: Starting element of startindex2 you want to list from.
; startindex2 &#160;: Starting element of startindex1
;--------------------------------------------------------------------------
/def list_array = \
  /def list_array2 = \
    /test la_rawname&#160;:= {1}&#160;%%;\
    /test la_name&#160;:= {2}&#160;%%;\
    /test la_index&#160;:= substr(la_rawname, strlen(la_name) + 8, 256)&#160;%%;\
    /IF (la_index &gt;= {3}) \
      /test echo(strcat(la_name, '[', la_index, ']&#160;:=', get_array(la_name, la_index)))&#160;%%;\
    /ENDIF&#160;%;\
  /quote -S /test list_array2(&quot;`&quot;/listvar -s _%1_array_*&quot;&quot;, {1}, {2})&#160;%;\
  /undef list_array2

/def list_2array = \
  /test la2_i2F&#160;:= 0&#160;%;\
  /def list_2array2 = \
    /test la2_rawname&#160;:= {1}&#160;%%;\
    /test la2_name&#160;:= {2}&#160;%%;\
    /test la2_rawindex&#160;:= substr(la2_rawname, strlen(la2_name) + 8, 256)&#160;%%;\
    /test la2_pos&#160;:= strstr(la2_rawindex, '_')&#160;%%;\
    /test la2_index1&#160;:= substr(la2_rawindex, 0, la2_pos)&#160;%%;\
    /test la2_index2&#160;:= substr(la2_rawindex, la2_pos + 1, 255)&#160;%%;\
    /IF (la2_index1 &gt;= {3}) \
      /IF ( (la2_i2F = 0) &amp; (la2_index2 &gt;= {4}) )\
        /test la2_i2F&#160;:= 1&#160;%%;\
      /ENDIF&#160;%%;\
      /IF (la2_i2F = 1) \
        /test echo(strcat(la2_name, '[', la2_index1, '][', la2_index2, ']&#160;:=', get_2array(la2_name, la2_index1, la2_index2)))&#160;%%;\
      /ENDIF&#160;%%;\
    /ENDIF&#160;%;\
  /quote -S /test list_2array2(&quot;`&quot;/listvar -s _%1_array_*&quot;&quot;, {1}, {2}, {3})&#160;%;\
  /undef list_2array2

;--------------------------------------------------------------------------
;GET array count / GET 2array count
; Written by: Ian Leisk who may actually be &quot;Galvin&quot;, but, may not (kairo at attbi dot com)!
;usage:
;get_array_count(&quot;Array name here&quot;, start)
;get_2array_count(&quot;Array name here&quot;, index, start)
;
;NOTE:
;These will count the number of elements starting at &quot;start&quot; till the first
;empty element.
;Get_array2_count will count the number of elements starting at index
;from &quot;start&quot;
;--------------------------------------------------------------------------

/def get_array_count = \
  /test GA_Name&#160;:= {1}&#160;%;\
  /test GA_Count&#160;:= {2} - 1&#160;%;\
  /test GA_Element&#160;:= &quot; &quot;&#160;%;\
  /while (strlen(GA_Element) &gt; 0) \
    /test ++GA_Count&#160;%;\
    /test GA_Element&#160;:= get_array(GA_Name, GA_Count)&#160;%;\
  /DONE&#160;%;\
  /return GA_Count - 1

/def get_2array_count = \
  /test GA2_Name&#160;:= {1}&#160;%;\
  /test GA2_Index&#160;:= {2}&#160;%;\
  /test GA2_Count&#160;:= {3} -1&#160;%;\
  /test GA2_Element&#160;:= &quot; &quot;&#160;%;\
  /while (strlen(GA2_Element) &gt; 0) \
     /test ++GA2_Count&#160;%;\
     /test GA2_Element&#160;:= get_2array(GA2_Name, GA2_Index, GA2_Count)&#160;%;\
  /DONE&#160;%;\
  /return GA2_Count - 1

;========================================================================
; tfwrite_array() / tfwrite_2array()
;
; Writes a virtual array to a disk file.
; USAGE:
; tfwrite_array(file_variable, &quot;array_name&quot;, start_index, size)
; tfwrite_2array(file_variable, &quot;array_name&quot;, index, start_index, size)
;
; file_variable&#160;: File variable of a tfopened file.
; &quot;array_name&quot; &#160;: Name of the array.
; start_index  &#160;: The element you want to start writing from.
; index        &#160;: Start_index of index [first dimension] (tfwrite_2array only)
; Size         &#160;: Number of elements to write.
;
; NOTES: tfwrite_2array() can't write the whole array to disk.  You must
;        write each dimension at a time.
;========================================================================
/def tfwrite_array = \
  /let file_&#160;%{1}&#160;%;\
  /let array_&#160;%{2}&#160;%;\
  /let start_&#160;%{3}&#160;%;\
  /let size_&#160;%{4}&#160;%;\
  /let count_ 0&#160;%;\
  /WHILE (++count_ &lt;= size_) \
    /test tfwrite(file_, get_array(array_, start_))&#160;%;\
    /test ++start_&#160;%;\
  /DONE

/def tfwrite_2array = \
  /let file_&#160;%{1}&#160;%;\
  /let array_&#160;%{2}&#160;%;\
  /let index_&#160;%{3}&#160;%;\
  /let start_&#160;%{4}&#160;%;\
  /let size_&#160;%{5}&#160;%;\
  /let count_ 0&#160;%;\
  /WHILE (++count_ &lt;= size_) \
    /test tfwrite(file_, get_2array(array_, index_, start_))&#160;%;\
    /test ++start_&#160;%;\
  /DONE

;========================================================================
; tfread_array() / tfread_2array()
;
; reads an array file from disk
; USAGE:
; x&#160;:= tfread_array(file_variable, &quot;array_name&quot;, start_index, size)
; x&#160;:= tfread_2array(file_variable, &quot;array_name&quot;, index, start_index, size)
;
; x            &#160;: Number of records read.
; file_variable&#160;: File variable of a tfopened file.
; &quot;array_name&quot; &#160;: Name of the array.
; start_index  &#160;: Starting element you want to read into.
; index        &#160;: Start_index of index [first dimension] (tfread_2array only)
; size         &#160;: Number of elements to read.
;========================================================================
/def tfread_array = \
  /let file_&#160;%{1}&#160;%;\
  /let array_&#160;%{2}&#160;%;\
  /let start_&#160;%{3}&#160;%;\
  /let size_&#160;%{4}&#160;%;\
  /let count_ 0&#160;%;\
  /let done_ 0&#160;%;\
  /let err_ 0&#160;%;\
  /let st_ 0&#160;%;\
  /test st_&#160;:= ''&#160;%;\
  /WHILE (!done_) \
    /test err_&#160;:= tfread(file_, st_)&#160;%;\
    /IF ( (err_&#160;!= -1) &amp; (count_ &lt; size_) ) \
      /test put_array(array_, start_, st_)&#160;%;\
      /test ++count_&#160;%;\
      /test ++start_&#160;%;\
    /ELSE \
      /test done_&#160;:= 1&#160;%;\
    /ENDIF&#160;%;\
  /DONE&#160;%;\
  /RETURN count_

/def tfread_2array = \
  /let file_&#160;%{1}&#160;%;\
  /let array_&#160;%{2}&#160;%;\
  /let index_&#160;%{3}&#160;%;\
  /let start_&#160;%{4}&#160;%;\
  /let size_&#160;%{5}&#160;%;\
  /let count_ 0&#160;%;\
  /let done_ 0&#160;%;\
  /let err_ 0&#160;%;\
  /let st_ 0&#160;%;\
  /test st_&#160;:= ''&#160;%;\
  /WHILE (!done_) \
    /test err_&#160;:= tfread(file_, st_)&#160;%;\
    /IF ( (err_&#160;!= -1) &amp; (count_ &lt; size_) ) \
      /test put_2array(array_, index_, start_, st_)&#160;%;\
      /test ++count_&#160;%;\
      /test ++start_&#160;%;\
    /ELSE \
      /test done_&#160;:= 1&#160;%;\
    /ENDIF&#160;%;\
  /DONE&#160;%;\
  /RETURN count_

;========================================================================
; strstr_array() / strstr_2array()
;
; Searches for a value in a virtual array and returns what element its found in.
; USAGE:
; x&#160;:= strstr_array(&quot;array_name&quot;, start_index, size, value)
; x&#160;:= strstr_2array(&quot;array_name&quot;, index, start_index, size, value)
;
; x            &#160;: Element of &quot;array_name&quot; that value was found in.
;                 -1 is returned if value was not found.
; &quot;array_name&quot; &#160;: Name of the array.
; start_index  &#160;: Element to start searching at
; index        &#160;: Start_index of index [first dimension] (strstr_2arrat only).
; size         &#160;: Number of elements to search.
; value        &#160;: The item your searching for.
;
; NOTES: Strstr_2array can't search all dimensions, you must search each dimension
;        at a time.
;        If value = &quot;&quot; then it will return the first element that is blank.
;========================================================================
/def strstr_array = \
  /let array_&#160;%{1}&#160;%;\
  /let start_&#160;%{2}&#160;%;\
  /let size_&#160;%{3}&#160;%;\
  /let value_ 0&#160;%;\
  /test value_&#160;:= {4}&#160;%;\
  /let count_ 0&#160;%;\
  /let pos_ 0&#160;%;\
  /let st_ 0&#160;%;\
  /test st_&#160;:= ''&#160;%;\
  /let element_ -1&#160;%;\
  /WHILE ( (++count_ &lt;= size_) &amp; (element_ = -1) ) \
    /test st_&#160;:= get_array(array_, start_)&#160;%;\
    /IF (value_ =~ '') \
      /IF (st_ =~ '') \
        /test element_&#160;:= start_&#160;%;\
      /ENDIF&#160;%;\
    /ELSE \
      /test pos_&#160;:= strstr(st_, value_)&#160;%;\
      /IF (pos_ &gt; -1) \
        /test element_&#160;:= start_&#160;%;\
      /ENDIF&#160;%;\
    /ENDIF&#160;%;\
    /test ++start_&#160;%;\
  /DONE&#160;%;\
  /RETURN element_

/def strstr_2array = \
  /let array_&#160;%{1}&#160;%;\
  /let index_&#160;%{2}&#160;%;\
  /let start_&#160;%{3}&#160;%;\
  /let size_&#160;%{4}&#160;%;\
  /let value_ 0&#160;%;\
  /test value_&#160;:= {5}&#160;%;\
  /let count_ 0&#160;%;\
  /let pos_ 0&#160;%;\
  /let st_ 0&#160;%;\
  /let element_ -1&#160;%;\
  /test st_&#160;:= ''&#160;%;\
  /WHILE ( (++count_ &lt;= size_) &amp; (element_ = -1) ) \
    /test st_&#160;:= get_2array(array_, index_, start_)&#160;%;\
    /IF (value_ =~ '') \
      /IF (st_ =~ '') \
        /test element_&#160;:= start_&#160;%;\
      /ENDIF&#160;%;\
    /ELSE \
      /test pos_&#160;:= strstr(st_, value_)&#160;%;\
      /IF (pos_ &gt; -1) \
        /test element_&#160;:= start_&#160;%;\
      /ENDIF&#160;%;\
    /ENDIF&#160;%;\
    /test ++start_&#160;%;\
  /DONE&#160;%;\
  /RETURN element_;

========================================================================
; searchstr_2array()
;
; Searches for a value in all dimensions of a virtual array and returns
; each element its found in. Multiple matches are put into a space-delimited
; list
; Modified by Regan @ Many MU's
;
; USAGE:
; x&#160;:= searchstr_2array(&quot;array_name&quot;, index, start_index, size, value)
;
; x            &#160;: Element of &quot;array_name&quot; that value was found in.
;                 -1 is returned if value was not found.
; &quot;array_name&quot; &#160;: Name of the array.
; start_index  &#160;: Element to start searching at
; index        &#160;: Start_index of index [first dimension] (strstr_2arrat only).
; size         &#160;: Number of elements to search.
; value        &#160;: The item your searching for.
;
;        If value = &quot;&quot; then it will return the first element that is blank.
;========================================================================

/def searchstr_2array = \
  /let array_&#160;%{1}&#160;%;\
  /let index_&#160;%{2}&#160;%;\
  /let start_&#160;%{3}&#160;%;\
  /let size_&#160;%{4}&#160;%;\
  /let value_ 0&#160;%;\
  /test value_&#160;:= {5}&#160;%;\
  /let count_ 0&#160;%;\
  /let pos_ 0&#160;%;\
  /let st_ 0&#160;%;\
  /let element_ -1&#160;%;\
  /test blank_&#160;:= ' '&#160;%;\
  /test list_&#160;:= ''&#160;%;\
  /test st_&#160;:= ''&#160;%;\
  /WHILE (++count_ &lt;= size_) \
    /test st_&#160;:= get_2array(array_, start_, index_)&#160;%;\
    /IF (value_ =~ '') \
      /IF (st_ =~ '') \
        /test element_&#160;:= start_&#160;%;\
        /IF (list_ =~ '') \
          /test list_&#160;:= element_&#160;%;\
        /ELSE \
          /test temp_&#160;:= strcat(list_, blank_)&#160;%:\
          /test list_&#160;:= strcat(temp_, element_)&#160;%;\
        /ENDIF&#160;%;\
      /ENDIF&#160;%;\
    /ELSE \
      /test pos_&#160;:= strstr(st_, value_)&#160;%;\
      /IF (pos_ &gt; -1) \
        /test element_&#160;:= start_&#160;%;\
        /IF (list_ =~ '') \
          /test list_&#160;:= element_&#160;%;\
        /ELSE \
          /test temp_&#160;:= strcat(list_, blank_)&#160;%;\
          /test list_&#160;:= strcat(temp_, element_)&#160;%;\
        /ENDIF&#160;%;\
      /ENDIF&#160;%;\
    /ENDIF&#160;%;\
    /test ++start_&#160;%;\
  /DONE&#160;%;\
  /RETURN list_

;==============================================================================
; chr2chr()
;
; Changes one character to difference character in a string
; USAGE:
; x&#160;:= chr2chr(&quot;string&quot;, &quot;searchchar&quot;, &quot;changechar&quot;)
;
; x          &#160;: contains &quot;string&quot; with all &quot;.&quot; as &quot;_&quot;.
; &quot;string&quot;   &#160;: any string.
; &quot;searchar&quot; &#160;: The character to be changed in &quot;string&quot;.
; &quot;changechar&#160;: The character to replace each occrance of &quot;searchar&quot; in
;               &quot;string&quot;.&quot;
;==============================================================================
/def chr2chr = \
  /let st_ 0&#160;%;\
  /test st_&#160;:= {1}&#160;%;\
  /let searchchar_ 0&#160;%;\
  /test searchchar_&#160;:= {2}&#160;%;\
  /let changechar_ 0&#160;%;\
  /test changechar_&#160;:= {3}&#160;%;\
  /let pos_ -1&#160;%;\
  /let pos2_ 0&#160;%;\
  /let done_ 0&#160;%;\
  /WHILE (!done_) \
    /test pos2_&#160;:= pos_&#160;%;\
    /test pos_&#160;:= strchr(substr(st_, pos_ + 1), searchchar_)&#160;%;\
    /IF (pos_ &gt; -1) \
      /test pos_&#160;:= pos_ + pos2_ + 1&#160;%;\
      /IF (substr(st_, pos_, 1) =~ searchchar_) \
        /test st_&#160;:= strcat(substr(st_, 0, pos_), changechar_, substr(st_, pos_ + 1))&#160;%;\
      /ENDIF&#160;%;\
    /ELSE \
      /test done_&#160;:= 1&#160;%;\
    /ENDIF&#160;%;\
  /DONE&#160;%;\
  /RETURN st_

;==============================================================================
; tfwrite_vars()
; Write variables to a disk file.
; USAGE:
; x&#160;:= tfwrite_vars(&quot;variables&quot;, &quot;matching&quot;, file_variable)
;
; x            &#160;: Number of variables written to disk.
; &quot;variables&quot;  &#160;: A string matching the variables you want to write to disk.
; &quot;matching&quot;   &#160;: &quot;simple&quot;: straightforward string comparison.
;                 &quot;glob&quot; &#160;: shell-like matching (as before version 3.2).
;                 &quot;regexp&quot;: regular expression.
;                 &quot;&quot;     &#160;: defaults to &quot;glob&quot;
; file_variable&#160;: File variable of a tfopened file.
;
; EXAMPLES:
; /set movie_title lord of the rings
; /set movie_year 2001
; /set movie_length 2 hours 59 min
; /test file_&#160;:= tfopen(&quot;movies.dat&quot;, &quot;w&quot;)
; /test tfwrite_vars(&quot;movie_*&quot;, &quot;glob&quot;, file_)
; /test tfclose(file_)
;
; This will write all 3 variables to disk.
;
; NOTES: The variables must be global variables made with /set or
;        /test var&#160;:= value.
;==============================================================================
/def tfwrite_vars = \
  /let vars_&#160;%{1}&#160;%;\
  /let matching_ 0&#160;%;\
  /test matching_&#160;:= {2}&#160;%;\
  /IF (matching_ =~ '') \
    /test matching_&#160;:= &quot;glob&quot;&#160;%;\
  /ENDIF&#160;%;\
  /let file_&#160;%{3}&#160;%;\
  /let count_ 0&#160;%;\
  /def tfwrite_vars2 = \
    /let var_&#160;%%{1}&#160;%%;\
    /test ++count_&#160;%%;\
    /test echo(strcat('::',$$[var_],'::'))&#160;%%;\
    /test tfwrite(file_, strcat(':',var_,'=',$$[var_], ':'))&#160;%;\
  /quote -S /test tfwrite_vars2(&quot;`&quot;/listvar -m$[matching_] -s $[vars_]&quot;&quot;)&#160;%;\
  /undef tfwrite_vars2&#160;%;\
  /return count_

;==============================================================================
; tfread_vars()
; Reads variables to a from a disk file that was written by tfwrite_vars()
; USAGE:
; x&#160;:= tfread_vars(file_variable)
;
; x            &#160;: number of variables read.
; file_variable&#160;: File variable of a tfopened file.
;
; EXAMPLES:
;
; /test file_&#160;:= tfopen(&quot;movies.dat&quot;, &quot;r&quot;)
; /test tfread_vars(file_)
; /test tfclose(file_)
;
; Now the variables will be set to the same values as shown in the
; tfwrite_vars() examples.
;
; NOTE: The variables do not have to exist prior to reading since they're
;       already written in the file by tfwrite_vars()
;==============================================================================
/def tfread_vars = \
  /let file_&#160;%{1}&#160;%;\
  /let done_ 0&#160;%;\
  /let st_ 0&#160;%;\
  /let pos_ 0&#160;%;\
  /let var_ 0&#160;%;\
  /let value_ 0&#160;%;\
  /let err_ 0&#160;%;\
  /let count_ 0&#160;%;\
  /WHILE (!done_) \
    /test err_&#160;:= tfread(file_, st_)&#160;%;\
    /IF (err_&#160;!= -1) \
      /test ++count_&#160;%;\
      /test st_&#160;:= substr(st_, 1, strlen(st_) - 2)&#160;%;\
      /test pos_&#160;:= strstr(st_, '=')&#160;%;\
      /test var_&#160;:= substr(st_, 0, pos_)&#160;%;\
      /test value_&#160;:= substr(st_, pos_ +1)&#160;%;\
      /eval /test $[var_]&#160;:= value_&#160;%;\
    /ELSE \
      /test done_&#160;:= 1&#160;%;\
    /ENDIF&#160;%;\
  /DONE&#160;%;\
  /RETURN count_

;==============================================================================
; delay()
;
; Delays an X number of seconds before returning.
; USAGE:
; delay(seconds)
;==============================================================================
/def delay = \
  /let seconds_&#160;%{1}&#160;%;\
  /let ctime_ 0&#160;%;\
  /test ctime_&#160;:= get_time(0)&#160;%;\
  /WHILE ( (get_time(0) - ctime_) &lt; seconds_ ) \
  /DONE

;==============================================================================
; get_time()
;
; returns hours, minutes, seconds in integer format
; USAGE:
; x&#160;:= get_time(0)
; x&#160;:= get_time(raw_time)
;
; x       &#160;: Time in seconds.
; 0       &#160;: Current time in seconds returned.
; raw_time&#160;: Raw time, raw time gets passed back from tinyfugue's time() function.
;            This will get converted to seconds.
;==============================================================================
/def get_time = \
  /let st_ 0&#160;%;\
  /let hours_ 0&#160;%;\
  /let min_ 0&#160;%;\
  /let sec_ 0&#160;%;\
  /IF ({*} = 0) \
    /test st_&#160;:= ftime('%%H:%%M:%%S', time())&#160;%;\
  /ELSE \
    /test st_&#160;:= ftime('%%H:%%M:%%S', {*})&#160;%;\
  /ENDIF&#160;%;\
  /test hours_&#160;:= substr(st_, 0, 2)&#160;%;\
  /test min_&#160;:= substr(st_, 3, 2)&#160;%;\
  /test sec_&#160;:= substr(st_, 6, 2)&#160;%;\
  /return time2sec(hours_, min_, sec_)

;==============================================================================
; time2sec()
;
; converts hours, min, sec to total seconds
; USAGE:
;
; x&#160;:= time2sec(hours, min, sec)
;
; x     &#160;: The total time in seconds of hours, min, sec.
; hours &#160;: Can range from 0 to 23.
; min   &#160;: Can range from 0 to 59.
; sec   &#160;: Can range from 0 to 59.
;==============================================================================
/def time2sec = \
  /let h_&#160;%{1}&#160;%;\
  /let m_&#160;%{2}&#160;%;\
  /let s_&#160;%{3}&#160;%;\
  /return h_ * 3600 + m_ * 60 + s_

;==============================================================================
; sec2time()
;
; converts total seconds back into hours, min, sec
; USAGE:
; sec2time(&quot;time_rec&quot;, seconds)
;
; &quot;time_rec&quot;&#160;: Contains the hours, min, seconds passed back.
;              get_rec(&quot;time_rec&quot;, &quot;hours&quot;) = hours.
;              get_rec(&quot;time_rec&quot;, &quot;min&quot;) = minutes.
;              get_rec(&quot;time_rec&quot;, &quot;sec&quot;) = seconds.
; seconds   &#160;: Value in seconds.
;
; NOTES: &quot;time_rec&quot; can be any record name you want.
;        If &quot;&quot; is specified for &quot;time_rec&quot; then no record gets used. See how this
;        is used in sec2clock.  Local vars are set in calling function to get
;        back the values from this function.
;==============================================================================
/def sec2time = \
  /let rec_ 0&#160;%;\
  /test rec_&#160;:= {1}&#160;%;\
  /let int_&#160;%{2}&#160;%;\
  /IF (rec_&#160;!~ '') \
    /let hours_ 0&#160;%;\
    /let min_ 0&#160;%;\
    /let sec_ 0&#160;%;\
  /ENDIF&#160;%;\
  /test hours_&#160;:= int_ / 3600&#160;%;\
  /let rem_ $[int_ - (hours_ * 3600)]&#160;%;\
  /test min_&#160;:= rem_ / 60&#160;%;\
  /test rem_&#160;:= rem_ - (min_ * 60)&#160;%;\
  /test sec_&#160;:= rem_&#160;%;\
  /IF (rec_&#160;!~ '') \
    /test del_rec(rec_, '')&#160;%;\
    /test add_rec(rec_, 'hours', hours_)&#160;%;\
    /test add_rec(rec_, 'min', min_)&#160;%;\
    /test add_rec(rec_, 'sec', sec_)&#160;%;\
  /ENDIF

;==============================================================================
; sec2clock()
;
; similar to sec2time except it turns seconds into a clock reading AM/PM
; USAGE:
; x&#160;:= sec2clock(value)
;
; x    &#160;: Time returned formatted in ##:##pm.  Example&#160;: &quot;3:04am&quot;
; value&#160;: Total seconds of time ranging over a 24 hour period.
;==============================================================================
/def sec2clock = \
  /let rawtime_&#160;%{1}&#160;%;\
  /let hours_ 0&#160;%;\
  /let min_ 0&#160;%;\
  /let sec_ 0&#160;%;\
  /let pm_ 0&#160;%;\
  /let st_ 0&#160;%;\
  /test sec2time('', rawtime_)&#160;%;\
  /IF (min_ &lt;= 9) \
    /test min_&#160;:= strcat('0', min_)&#160;%;\
  /ENDIF&#160;%;\
  /IF (rawtime_ &gt; 12 * 3600) \
    /test pm_&#160;:= 1&#160;%;\
    /test hours_&#160;:= hours_ - 12&#160;%;\
  /ELSE \
    /test pm_&#160;:= 0&#160;%;\
  /ENDIF&#160;%;\
  /test st_&#160;:= strcat(hours_, ':', min_)&#160;%;\
  /IF (pm_) \
    /test st_&#160;:= strcat(st_, 'pm')&#160;%;\
  /ELSE \
    /test st_&#160;:= strcat(st_, 'am')&#160;%;\
  /ENDIF&#160;%;\
  /return st_

;==============================================================================
; num2commas()
;
; returns a number formatted with comma's
; USAGE:
; x&#160;:= num2commas(value)
;
; x    &#160;: Value returned with commas. Example 1,345 from 1345.
; value&#160;: Any number.
;==============================================================================
/def num2commas = \
  /let st_&#160;%{1}&#160;%;\
  /let count_ $[strlen(st_)]&#160;%;\
  /let count2_ 0&#160;%;\
  /let st2_ 0&#160;%;\
  /test st2_&#160;:= ''&#160;%;\
  /WHILE (--count_ &gt;= 0) \
    /IF ( (count2_ = 3) &amp; (substr(st_, count_, 1)&#160;!~ '-') ) \
      /test st2_&#160;:= strcat(',', st2_)&#160;%;\
      /test count2_&#160;:= 0&#160;%;\
    /ENDIF&#160;%;\
    /test st2_&#160;:= strcat(substr(st_, count_, 1), st2_)&#160;%;\
    /test ++count2_&#160;%;\
  /DONE&#160;%;\
  /return st2_

;==============================================================================
; send_macro()
;
; Sends a macro to tinyfugue
; USAGE:
; send_macro(&quot;macro&quot;)
;
; &quot;macro&quot;  &#160;: A tinyfugue macro like &quot;/help&quot;
;
; NOTES: If &quot;macro&quot; doesn't begin with a &quot;/&quot; it will send it to the world you're
;        currently connected to.
;==============================================================================
/def send_macro = \
  /def send_macro2 = \
   &#160;%*&#160;%;\
  /send_macro2&#160;%;\
  /undef send_macro2

;==============================================================================
; strip_space()
;
; Strips all leading spaces from a string.
; USAGE:
; x&#160;:= strip_space(&quot;string&quot;)
;
; x       &#160;: Returned &quot;string&quot; with no leading spaces.
; &quot;string&quot;&#160;: Any string
;==============================================================================
/def strip_space = \
  /let st_ 0&#160;%;\
  /test st_&#160;:= {1}&#160;%;\
  /let st2_ 0&#160;%;\
  /let count_ -1&#160;%;\
  /test st2_&#160;:= ''&#160;%;\
  /WHILE (++count_ &lt;= strlen(st_) &amp; substr(st_, count_, 1) =~ ' ') \
  /DONE&#160;%;\
  /return substr(st_, count_, 255)

;==============================================================================
; parse_string()
;
; This function will parse a string by the separator you choose and place the
; elements back into an array of your choosing.
; USAGE:
; parse_string(&quot;array&quot;, &quot;sep&quot;, &quot;string&quot;)
;
; &quot;array&quot; &#160;: get_array(&quot;data&quot;, 0) = number of elements returned.
;            get_array(&quot;data&quot;, 1, 2, 3..) = &quot;string&quot; parsed out.
; &quot;sep&quot;   &#160;: The divider of elements in string.
; &quot;string&quot;&#160;: The string you want parsed.
;
; EXAMPLE:
; parse_string(&quot;data&quot;, &quot; &quot;, &quot;hp(45/100) sp(450/500)&quot;)
;
; get_array(&quot;data&quot;, 0) = 2
; get_array(&quot;data&quot;, 1) = &quot;hp(45/100)&quot;
; get_array(&quot;data&quot;, 2) = &quot;sp(450/500)&quot;
;==============================================================================
/def parse_string = \
  /let array_&#160;%{1}&#160;%;\
  /let sep_ 0&#160;%;\
  /test sep_&#160;:= {2}&#160;%;\
  /let data_ 0&#160;%;\
  /test data_&#160;:= {3}&#160;%;\
  /let count_ -1&#160;%;\
  /let parcount_ 0&#160;%;\
  /let ch_ 0&#160;%;\
  /let st_ 0&#160;%;\
  /let len_ 0&#160;%;\
  /test ch_&#160;:= ''&#160;%;\
  /test st_&#160;:= ''&#160;%;\
  /test len_&#160;:= strlen(data_)&#160;%;\
  /test purge_array(array_)&#160;%;\
  /WHILE (++count_ &lt;= len_) \
    /test ch_&#160;:= substr(data_, count_, 1)&#160;%;\
    /IF ( (ch_ =~ sep_) | (count_ = len_) ) \
      /test ++parcount_&#160;%;\
      /test put_array(array_, parcount_, st_)&#160;%;\
      /test st_&#160;:= ''&#160;%;\
    /ELSE \
      /test st_&#160;:= strcat(st_, ch_)&#160;%;\
    /ENDIF&#160;%;\
  /DONE&#160;%;\
  /test put_array(array_, 0, parcount_)

;==============================================================================
; search_literal()
;
; Search for a character in a string of characters.  Characters will be skipped
; in the string that start with a literal-switch.  The position of the character
; found will be based on the string returned with no literal switches.
; USAGE:
; x&#160;:= search_literal(&quot;data&quot;, &quot;string&quot;, char, litchar)
;
; x        &#160;: Position of char in &quot;string&quot;. -1 returned if nothing found.
; &quot;data&quot;   &#160;: Record that contains the following:
;             /rec&#160;:data.pos:    = position
;             /rec&#160;:data.st:     = &quot;string&quot; with no literal switches.
; &quot;string&quot; &#160;: String being searched.
; char     &#160;: Char to search for in &quot;string&quot; skipping literal switches.
; litchar  &#160;: The literal-switch of your choosing.
;
; EXAMPLES:
; x&#160;:= search_literal(&quot;data&quot;, &quot;/A/C/car/rocks&quot;, &quot;c&quot;, &quot;/&quot;)
; RETURNS:
; x&#160;:= 7
; /rec&#160;:data.pos:   = 7
; /rec&#160;:data.st:    = &quot;ACcarrocks&quot;
;
; NOTES: To use a literal-switch as data in the &quot;data&quot; use two of them in a row.
;        like &quot;\\&quot; would mean &quot;\&quot;
;==============================================================================
/def search_literal = \
  /let rec_ 0&#160;%;\
  /test rec_&#160;:= {1}&#160;%;\
  /let string_ 0&#160;%;\
  /test string_&#160;:= {2}&#160;%;\
  /let char_ 0&#160;%;\
  /test char_&#160;:= {3}&#160;%;\
  /let litchar_ 0&#160;%;\
  /test litchar_&#160;:= {4}&#160;%;\
  /let string2_ 0&#160;%;\
  /let lastch_ 0&#160;%;\
  /let ch_ 0&#160;%;\
  /let count_ -1&#160;%;\
  /let pos_ -1&#160;%;\
  /let length_ $[strlen(string_)]&#160;%;\
  /test string2_&#160;:= ''&#160;%;\
  /test lastch_&#160;:= ''&#160;%;\
  /test ch_&#160;:= ''&#160;%;\
  /WHILE (++count_ &lt;= length_) \
    /test lastch_&#160;:= ch_&#160;%;\
    /test ch_&#160;:= substr(string_, count_, 1)&#160;%;\
    /IF (ch_ =~ litchar_) \
      /IF (substr(string_, count_ + 1, 1) =~ litchar_) \
        /test string2_&#160;:= strcat(string2_, litchar_)&#160;%;\
        /test ++count_&#160;%;\
      /ENDIF&#160;%;\
    /ELSE \
      /IF ( (lastch_&#160;!~ litchar_) &amp; (ch_ =~ char_) &amp; (pos_ = -1) ) \
        /test pos_&#160;:= strlen(string2_)&#160;%;\
      /ENDIF&#160;%;\
      /test string2_&#160;:= strcat(string2_, ch_)&#160;%;\
    /ENDIF&#160;%;\
  /DONE&#160;%;\
  /test del_rec(rec_, '')&#160;%;\
  /test add_rec(rec_, 'pos', pos_)&#160;%;\
  /test add_rec(rec_, 'st', string2_)&#160;%;\
  /RETURN pos_

;==============================================================================
; find_string()
;
; Finds a string within a string and return the starting position, end
; position and length in a virtual array.
; USAGE:
; x&#160;:= find_string(&quot;pos&quot;, &quot;string&quot;, &quot;search&quot;, stringpos, skip)
;
; x         &#160;: -1 no string found, 1 string found.
; &quot;pos&quot;     &#160;: Position data returned in a record.
;              /rec&#160;:pos.found:        = 1 if string found -1 if not found.
;              /rec&#160;:pos.st:           = search data found.
;              /rec&#160;:pos.start:        = starting location in &quot;string&quot;.
;              /rec&#160;:pos.end:          = ending location in &quot;string&quot;.
;              /rec&#160;:pos.len:          = length of sub string found.
; &quot;string&quot;  &#160;: String being searched.
; &quot;search&quot;  &#160;: String your searching for.
; stringpos &#160;: Position in string to start searching at.
; skip      &#160;: Number of matches to skip before returning a real match.
;
; EXAMPLES:
; find_string(&quot;pos&quot;, &quot;Status is currently 45.65 degrees&quot;, &quot;y * d&quot;, 0, 0)
; RETURNS:
; /rec&#160;:pos.found:        = 1           {string found}
; /rec&#160;:pos.st:           = &quot;y 45.65 d&quot; {actual data found}
; /rec&#160;:pos.start:        = 18          {starting position}
; /rec&#160;:pos.end:          = 26          {ending position}
; /rec&#160;:pos.len:          = 9           {length}
;
; To pull out just the 45.65 in the example above you would need to do:
; find_string(&quot;pos&quot;, &quot;Status is currently 45.65 degrees&quot;, &quot;y (*) d&quot;, 0, 0)
;
; NOTES: Anything in () is returned, you can only have one set of () and
;        one &quot;*&quot; in your search.  Use ~( ~) ~* if you want that as part of
;        your search data. When using () with *, the * must be inside the
;        () or you may get strange results.
;==============================================================================
/def find_string2 = \
  /let string_ 0&#160;%;\
  /test string_&#160;:= {1}&#160;%;\
  /let search_&#160;:= 0&#160;%;\
  /test search_&#160;:= {2}&#160;%;\
  /let skip_&#160;%{3}&#160;%;\
  /let searchl_ $[strlen(search_)]&#160;%;\
  /let count_ 0&#160;%;\
  /let count2_ 0&#160;%;\
  /let done_ 0&#160;%;\
  /let pos_ 0&#160;%;\
  /let pos2_ 0&#160;%;\
  /WHILE (!done_) \
    /test pos_&#160;:= strstr(string_, search_)&#160;%;\
    /IF (pos_ &gt; -1) \
      /test ++count2_&#160;%;\
      /IF (count2_ &gt; skip_) \
        /test pos_&#160;:= pos2_ + pos_&#160;%;\
        /test done_&#160;:= 1&#160;%;\
      /ELSE \
        /test string_&#160;:= substr(string_, pos_ + searchl_)&#160;%;\
        /test pos2_&#160;:= pos2_ + pos_ + searchl_&#160;%;\
      /ENDIF&#160;%;\
    /ELSE \
      /test done_&#160;:= 1&#160;%;\
    /ENDIF&#160;%;\
  /DONE&#160;%;\
  /IF (count2_ &lt;= skip_) \
    /test pos_&#160;:= -1&#160;%;\
  /ENDIF&#160;%;\
  /RETURN pos_

/def find_string3 = \
  /let string_ 0&#160;%;\
  /test string_&#160;:= {1}&#160;%;\
  /let searchL_ 0&#160;%;\
  /test searchL_&#160;:= {2}&#160;%;\
  /let searchR_ 0&#160;%;\
  /test searchR_&#160;:= {3}&#160;%;\
  /let skip_&#160;%{4}&#160;%;\
  /let count_ 0&#160;%;\
  /let count2_ 0&#160;%;\
  /let done_ 0&#160;%;\
  /let posL_ 0&#160;%;\
  /let posR_ 0&#160;%;\
  /let pos2_ 0&#160;%;\
  /WHILE (!done_) \
    /test posL_&#160;:= strstr(string_, searchL_)&#160;%;\
    /IF (posL_ &gt; -1) \
      /test string_&#160;:= substr(string_, posL_ + strlen(searchL_))&#160;%;\
      /test posR_&#160;:= strstr(string_, searchR_)&#160;%;\
      /IF (posR_ &gt; -1) \
        /test ++count2_&#160;%;\
        /IF (count2_ &gt; skip_) \
          /test length_&#160;:= posR_ + strlen(searchL_) + strlen(searchR_)&#160;%;\
          /test pos_&#160;:= pos2_ + posL_&#160;%;\
          /test done_&#160;:= 1&#160;%;\
        /ELSE \
          /test pos2_&#160;:= pos2_ + posL_ + strlen(searchL_)&#160;%;\
        /ENDIF&#160;%;\
      /ELSE \
        /test done_&#160;:= 1&#160;%;\
      /ENDIF&#160;%;\
    /ELSE \
      /test done_&#160;:= 1&#160;%;\
    /ENDIF&#160;%;\
  /DONE&#160;%;\
  /IF (count2_ &lt;= skip_) \
    /test pos_&#160;:= -1&#160;%;\
  /ENDIF&#160;%;\
  /RETURN pos_

/def find_string = \
  /let rec_ 0&#160;%;\
  /test rec_&#160;:= {1}&#160;%;\
  /let string_ 0&#160;%;\
  /test string_&#160;:= {2}&#160;%;\
  /let search_ 0&#160;%;\
  /test search_&#160;:= {3}&#160;%;\
  /let stringpos_&#160;%{4}&#160;%;\
  /let skip_ 0&#160;%;\
  /test skip_&#160;:= {5}&#160;%;\
  /let found_ -1&#160;%;\
  /let pos_ -1&#160;%;\
  /let pos2_ 0&#160;%;\
  /let end_ 0&#160;%;\
  /let length_ 0&#160;%;\
  /let left_ 0&#160;%;\
  /let right_ 0&#160;%;\
  /let st_ 0&#160;%;\
  /let searchL_ 0&#160;%;\
  /let searchR_ 0&#160;%;\
  /test right_&#160;:= 0&#160;%;\
  /test st_&#160;:= ''&#160;%;\
  /test searchL_&#160;:= ''&#160;%;\
  /test searchR_&#160;:= ''&#160;%;\
  /test string_&#160;:= substr(string_, stringpos_)&#160;%;\
  /IF (search_&#160;!~ '') \
    /IF ( (search_ =~ '*') | (search_ =~ &quot;(*)&quot;) ) \
      /IF ( (skip_ = 0) &amp; (string_&#160;!~ '') )\
        /test found_&#160;:= 1&#160;%;\
        /test pos_&#160;:= 0&#160;%;\
        /test end_&#160;:= strlen(string_) - 1&#160;%;\
        /test length_&#160;:= end_ + 1&#160;%;\
        /test st_&#160;:= string_&#160;%;\
      /ENDIF&#160;%;\
    /ELSE \
      /test del_rec(rec_, '')&#160;%;\
      /test left_&#160;:= search_literal(rec_, search_, '(', '~')&#160;%;\
      /test right_&#160;:= search_literal(rec_, search_, ')', '~')&#160;%;\
      /test pos2_&#160;:= search_literal(rec_, search_, '*', '~')&#160;%;\
      /test search_&#160;:= get_rec(rec_, 'st')&#160;%;\
      /IF (left_ + right_ &gt; 0) \
        /test search_&#160;:= strcat(substr(search_, 0, left_), \
                                  substr(search_, left_ + 1, right_ - left_ - 1), \
                                  substr(search_, right_ + 1))&#160;%;\
        /test right_&#160;:= right_ - 2&#160;%;\
        /IF (pos2_ &gt; -1) \
          /test --pos2_&#160;%;\
        /ENDIF&#160;%;\
      /ENDIF&#160;%;\
      /IF (pos2_ = -1) \
        /test found_&#160;:= find_string2(string_, search_, skip_)&#160;%;\
        /IF (found_ &gt; -1) \
          /test pos_&#160;:= found_&#160;%;\
          /test length_&#160;:= strlen(search_)&#160;%;\
          /test end_&#160;:= pos_ + length_ - 1&#160;%;\
          /test st_&#160;:= search_&#160;%;\
          /test found_&#160;:= 1&#160;%;\
          /IF (left_ + right_ &gt; 0) \
            /test length_&#160;:= right_ - left_ + 1&#160;%;\
            /test pos_&#160;:= pos_ + left_&#160;%;\
            /test end_&#160;:= pos_ + right_ - 1&#160;%;\
            /test st_&#160;:= substr(string_, pos_, length_)&#160;%;\
          /ENDIF&#160;%;\
        /ENDIF&#160;%;\
      /ELSE \
        /test searchL_&#160;:= substr(search_, 0, pos2_)&#160;%;\
        /test searchR_&#160;:= substr(search_, pos2_ + 1)&#160;%;\
        /IF (find_string3(string_, searchL_, searchR_, skip_) &gt; -1) \
          /test found_&#160;:= 1&#160;%;\
          /test end_&#160;:= pos_ + length_ - 1&#160;%;\
          /test st_&#160;:= substr(string_, pos_, length_)&#160;%;\
          /IF (left_ + right_ &gt; 0) \
            /test pos_&#160;:= pos_ + left_&#160;%;\
            /test end_&#160;:= end_ - (strlen(search_) - right_) + 1&#160;%;\
            /test length_&#160;:= end_ - pos_ +1&#160;%;\
            /test st_&#160;:= substr(string_, pos_, length_)&#160;%;\
          /ENDIF&#160;%;\
        /ENDIF&#160;%;\
      /ENDIF&#160;%;\
    /ENDIF&#160;%;\
  /ENDIF&#160;%;\
  /test del_rec(rec_, '')&#160;%;\
  /IF (found_ = 1) \
    /test pos_&#160;:= pos_ + stringpos_&#160;%;\
    /test end_&#160;:= end_ + stringpos_&#160;%;\
  /ENDIF&#160;%;\
  /test add_rec(rec_, 'found', found_)&#160;%;\
  /test add_rec(rec_, 'st', st_)&#160;%;\
  /test add_rec(rec_, 'start', pos_)&#160;%;\
  /test add_rec(rec_, 'end', end_)&#160;%;\
  /test add_rec(rec_, 'len', length_)&#160;%;\
  /RETURN found_

;==============================================================================
; search_replace()
;
; Searches for a string and replaces each occurrence with a new string.
; USAGE
; x&#160;:= search_replace(&quot;record&quot;, &quot;string&quot;, &quot;search&quot;, &quot;replace&quot;, count, skip)
;
; x        &#160;: -1 no searches done, &gt;=1 = how many searches were done.
; &quot;record&quot; &#160;: /rec&#160;:record.replace:    = How many replaces were done. -1 = none
;             /rec&#160;:record.st:         = New string with replaced parts.
; &quot;string&quot; &#160;: String to have parts to be replaced.
; &quot;search&quot; &#160;: Sub string in &quot;string&quot; to be replaced.
; &quot;replace&quot;&#160;: New sub string that will replace each &quot;search&quot; string found.
; count    &#160;: How many replacements to do. 0 = unlimited.
; skip     &#160;: How many matches you want to skip before replacing. 0 = no skip.
;
; EXAMPLES:
; search_replace(&quot;search&quot;, &quot;Status is currently 45.65 degrees&quot;, &quot;y (*) d&quot;, &quot;34.2&quot;, 0, 0)
; RETURNS:
; /rec&#160;:search.replace:      = 1 (1 replacement was done)
; /rec&#160;:search.st:           = &quot;Status is currently 32.2 degrees&quot;
;
; NOTES: Anything in () is replaced.  You can only have one set of () and
;        one &quot;*&quot; in your search.  Use ~( ~) ~* if you want that as part of
;        your search data. When using () with *, the * must be inside the
;        () or you may get strange results.
;==============================================================================
/def search_replace = \
  /let rec_&#160;%{1}&#160;%;\
  /let string_ 0&#160;%;\
  /test string_&#160;:= {2}&#160;%;\
  /let search_ 0&#160;%;\
  /test search_&#160;:= {3}&#160;%;\
  /let replace_ 0&#160;%;\
  /test replace_&#160;:= {4}&#160;%;\
  /let count_&#160;%{5}&#160;%;\
  /let skip_&#160;%{6}&#160;%;\
  /let count2_ 0&#160;%;\
  /let pos_ 0&#160;%;\
  /let done_ 0&#160;%;\
  /let start_ 0&#160;%;\
  /let length_ 0&#160;%;\
  /let end_ 0&#160;%;\
  /WHILE (!done_) \
    /IF (find_string(rec_, string_, search_, pos_, skip_)&#160;!= -1) \
      /IF ( (count2_ &lt; count_) | (count_ = 0) ) \
        /test ++count2_&#160;%;\
        /test skip_&#160;:= 0&#160;%;\
        /test start_&#160;:= get_rec(rec_, &quot;start&quot;)&#160;%;\
        /test length_&#160;:= get_rec(rec_, &quot;len&quot;)&#160;%;\
        /test end_&#160;:= start_ + length_&#160;%;\
        /test string_&#160;:= strcat(substr(string_, 0, start_), \
                                replace_, \
                                substr(string_, end_))&#160;%;\
        /test pos_&#160;:= start_ + strlen(replace_)&#160;%;\
      /ELSE \
        /test done_&#160;:= 1&#160;%;\
      /ENDIF&#160;%;\
    /ELSE \
      /test done_&#160;:= 1&#160;%;\
    /ENDIF&#160;%;\
  /DONE&#160;%;\
  /test del_rec(rec_, '')&#160;%;\
  /IF (count2_ = 0) \
    /test count2_&#160;:= -1&#160;%;\
  /ENDIF&#160;%;\
  /test add_rec(rec_, 'replace', count2_)&#160;%;\
  /test add_rec(rec_, 'st', string_)&#160;%;\
  /RETURN count2_
;--------------------------------------------------------------------------
</pre>

<!-- 
NewPP limit report
CPU time usage: 0.010 seconds
Real time usage: 0.023 seconds
Preprocessor visited node count: 4/1000000
Preprocessor generated node count: 24/1000000
Post‐expand include size: 0/2097152 bytes
Template argument size: 0/2097152 bytes
Highest expansion depth: 2/40
Expensive parser function count: 0/100
-->

<!-- Saved in parser cache with key homesitewiki-mw_:pcache:idhash:69-0!*!0!*!*!*!* and timestamp 20200921184840
 -->
</div>								<div class="printfooter">
				Retrieved from "<a href="http://www.gwen-morse.com/wiki/index.php?title=Utilities_(used_to_be_%22Mylib.tf%22)&amp;oldid=1978">http://www.gwen-morse.com/wiki/index.php?title=Utilities_(used_to_be_%22Mylib.tf%22)&amp;oldid=1978</a>"				</div>
												<div id='catlinks' class='catlinks catlinks-allhidden'></div>												<div class="visualClear"></div>
							</div>
		</div>
		<div id="mw-navigation">
			<h2>Navigation menu</h2>
			<div id="mw-head">
				<div id="p-personal" role="navigation" class="" aria-labelledby="p-personal-label">
	<h3 id="p-personal-label">Personal tools</h3>
	<ul>
<li id="pt-login"><a href="/wiki/index.php?title=Special:UserLogin&amp;returnto=Utilities+%28used+to+be+%22Mylib.tf%22%29" title="You are encouraged to log in; however, it is not mandatory [o]" accesskey="o">Log in</a></li>	</ul>
</div>
				<div id="left-navigation">
					<div id="p-namespaces" role="navigation" class="vectorTabs" aria-labelledby="p-namespaces-label">
	<h3 id="p-namespaces-label">Namespaces</h3>
	<ul>
					<li  id="ca-nstab-main" class="selected"><span><a href="/wiki/index.php/Utilities_(used_to_be_%22Mylib.tf%22)"  title="View the content page [c]" accesskey="c">Page</a></span></li>
					<li  id="ca-talk" class="new"><span><a href="/wiki/index.php?title=Talk:Utilities_(used_to_be_%22Mylib.tf%22)&amp;action=edit&amp;redlink=1"  title="Discussion about the content page [t]" accesskey="t">Discussion</a></span></li>
			</ul>
</div>
<div id="p-variants" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-variants-label">
	<h3 id="mw-vector-current-variant">
		</h3>
	<h3 id="p-variants-label"><span>Variants</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
				</div>
				<div id="right-navigation">
					<div id="p-views" role="navigation" class="vectorTabs" aria-labelledby="p-views-label">
	<h3 id="p-views-label">Views</h3>
	<ul>
					<li id="ca-view" class="selected"><span><a href="/wiki/index.php/Utilities_(used_to_be_%22Mylib.tf%22)" >Read</a></span></li>
					<li id="ca-viewsource"><span><a href="/wiki/index.php?title=Utilities_(used_to_be_%22Mylib.tf%22)&amp;action=edit"  title="This page is protected.&#10;You can view its source [e]" accesskey="e">View source</a></span></li>
					<li id="ca-history" class="collapsible"><span><a href="/wiki/index.php?title=Utilities_(used_to_be_%22Mylib.tf%22)&amp;action=history"  title="Past revisions of this page [h]" accesskey="h">View history</a></span></li>
			</ul>
</div>
<div id="p-cactions" role="navigation" class="vectorMenu emptyPortlet" aria-labelledby="p-cactions-label">
	<h3 id="p-cactions-label"><span>Actions</span><a href="#"></a></h3>
	<div class="menu">
		<ul>
					</ul>
	</div>
</div>
<div id="p-search" role="search">
	<h3><label for="searchInput">Search</label></h3>
	<form action="/wiki/index.php" id="searchform">
				<div id="simpleSearch">
						<input name="search" placeholder="Search" title="Search Gwen Morse's Wiki [f]" accesskey="f" id="searchInput" />						<button type="submit" name="button" title="Search the pages for this text" id="searchButton"><img src="/wiki/skins/vector/images/search-ltr.png?303" alt="Search" width="12" height="13" /></button>								<input type='hidden' name="title" value="Special:Search"/>
		</div>
	</form>
</div>
				</div>
			</div>
			<div id="mw-panel">
					<div id="p-logo" role="banner"><a style="background-image: url(/home/public/wiki/guestbook.jpg);" href="/wiki/index.php/Main_Page"  title="Visit the main page"></a></div>
				<div class="portal" role="navigation" id='p-navigation' aria-labelledby='p-navigation-label'>
	<h3 id='p-navigation-label'>Navigation</h3>
	<div class="body">
		<ul>
			<li id="n-mainpage-description"><a href="/wiki/index.php/Main_Page" title="Visit the main page [z]" accesskey="z">Main page</a></li>
			<li id="n-MUSHing"><a href="/wiki/index.php/MUSHing">MUSHing</a></li>
			<li id="n-Softcode-Archive"><a href="/wiki/index.php/Gwen%27s_MUSHcode_Archive">Softcode Archive</a></li>
			<li id="n-Tinyfugue-Client"><a href="/wiki/index.php/Tinyfugue">Tinyfugue Client</a></li>
			<li id="n-Tabletop-Roleplay"><a href="/wiki/index.php/Roleplay">Tabletop Roleplay</a></li>
			<li id="n-Sims"><a href="/wiki/index.php/Sims">Sims</a></li>
			<li id="n-Linux"><a href="/wiki/index.php/Linux">Linux</a></li>
			<li id="n-Health-and-Beauty"><a href="/wiki/index.php/HABA">Health and Beauty</a></li>
			<li id="n-Recipes"><a href="/wiki/index.php/Recipes">Recipes</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-Wiki_Help' aria-labelledby='p-Wiki_Help-label'>
	<h3 id='p-Wiki_Help-label'>Wiki Help</h3>
	<div class="body">
		<ul>
			<li id="n-portal"><a href="/wiki/index.php/Gwen_Morse%27s_Wiki:Community_portal" title="About the project, what you can do, where to find things">Community portal</a></li>
			<li id="n-currentevents"><a href="/wiki/index.php/Gwen_Morse%27s_Wiki:Current_events" title="Find background information on current events">Current events</a></li>
			<li id="n-recentchanges"><a href="/wiki/index.php/Special:RecentChanges" title="A list of recent changes in the wiki [r]" accesskey="r">Recent changes</a></li>
			<li id="n-randompage"><a href="/wiki/index.php/Special:Random" title="Load a random page [x]" accesskey="x">Random page</a></li>
			<li id="n-help"><a href="https://www.mediawiki.org/wiki/Special:MyLanguage/Help:Contents" rel="nofollow" title="The place to find out">Help</a></li>
		</ul>
	</div>
</div>
<div class="portal" role="navigation" id='p-tb' aria-labelledby='p-tb-label'>
	<h3 id='p-tb-label'>Tools</h3>
	<div class="body">
		<ul>
			<li id="t-whatlinkshere"><a href="/wiki/index.php/Special:WhatLinksHere/Utilities_(used_to_be_%22Mylib.tf%22)" title="A list of all wiki pages that link here [j]" accesskey="j">What links here</a></li>
			<li id="t-recentchangeslinked"><a href="/wiki/index.php/Special:RecentChangesLinked/Utilities_(used_to_be_%22Mylib.tf%22)" title="Recent changes in pages linked from this page [k]" accesskey="k">Related changes</a></li>
			<li id="t-specialpages"><a href="/wiki/index.php/Special:SpecialPages" title="A list of all special pages [q]" accesskey="q">Special pages</a></li>
			<li id="t-print"><a href="/wiki/index.php?title=Utilities_(used_to_be_%22Mylib.tf%22)&amp;printable=yes" rel="alternate" title="Printable version of this page [p]" accesskey="p">Printable version</a></li>
			<li id="t-permalink"><a href="/wiki/index.php?title=Utilities_(used_to_be_%22Mylib.tf%22)&amp;oldid=1978" title="Permanent link to this revision of the page">Permanent link</a></li>
			<li id="t-info"><a href="/wiki/index.php?title=Utilities_(used_to_be_%22Mylib.tf%22)&amp;action=info">Page information</a></li>
		</ul>
	</div>
</div>
			</div>
		</div>
		<div id="footer" role="contentinfo">
							<ul id="footer-info">
											<li id="footer-info-lastmod"> This page was last modified on 1 April 2014, at 02:02.</li>
											<li id="footer-info-viewcount">This page has been accessed 4,039 times.</li>
									</ul>
							<ul id="footer-places">
											<li id="footer-places-privacy"><a href="/wiki/index.php/Gwen_Morse%27s_Wiki:Privacy_policy" title="Gwen Morse's Wiki:Privacy policy">Privacy policy</a></li>
											<li id="footer-places-about"><a href="/wiki/index.php/Gwen_Morse%27s_Wiki:About" title="Gwen Morse's Wiki:About">About Gwen Morse&#039;s Wiki</a></li>
											<li id="footer-places-disclaimer"><a href="/wiki/index.php/Gwen_Morse%27s_Wiki:General_disclaimer" title="Gwen Morse's Wiki:General disclaimer">Disclaimers</a></li>
									</ul>
										<ul id="footer-icons" class="noprint">
					<li id="footer-poweredbyico">
						<a href="//www.mediawiki.org/"><img src="/wiki/skins/common/images/poweredby_mediawiki_88x31.png" alt="Powered by MediaWiki" width="88" height="31" /></a>
					</li>
				</ul>
						<div style="clear:both"></div>
		</div>
		<script>/*<![CDATA[*/window.jQuery && jQuery.ready();/*]]>*/</script><script>if(window.mw){
mw.loader.state({"site":"loading","user":"ready","user.groups":"ready"});
}</script>
<script>if(window.mw){
mw.loader.load(["mediawiki.action.view.postEdit","mediawiki.user","mediawiki.hidpi","mediawiki.page.ready","mediawiki.searchSuggest","skins.vector.collapsibleNav"],null,true);
}</script>
<script>if(window.mw){
mw.loader.state({"site":"ready"});
}</script>
<!-- Served in 0.198 secs. -->
	</body>
</html>
