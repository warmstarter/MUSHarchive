Message 1 on *Core-DB-Issues(#350):
Date:     Wed Nov 18 12:27:05 1992 EST
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350) and *Theme-Issues (#120)
Subject:  The Death Of Teleportation

I have put together the new $room:accept which will, I believe, eliminate
teleportation on OpalMOO. It will only allow one to enter a room under the
following circumstances:
 1. You own the room (or are wizardly).
 2. You enter the room through an exit.
 3. You are -returning- to the room from an editor.
 4. You live there (i.e. are in the room's .residents property).

I have not yet installed this, though; I want to think a bit more about it. To
look at the incoming code, and/or to make comments about the code, I offer for
your perusal #109:accept, with all due credit going to yduJ.

Blackbriar

--------------------------


Message 2 on *Core-DB-Issues(#350):
Date:     Thu Nov 19 23:08:09 1992 EST
From:     Briar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Corification of Contents

I've just modified the majority of the OpalMOO Core so that it uses the
:contents verb instead of the .contents property. This is a Good Thing if used
wisely, but I caution that it must be used wisely.

One note for Programmers: The SERVER does the matching for direct and indirect
objects. So if there is a thing called `foo' in the room's .contents, a player
will be able to `get foo' even if the thing doesn't show up in :contents().
Similarly, a player will -not- be able to `get foo' on a foo which is not
actually in the room's .contents.

This change should not affect the average user; only programmers should notice
these changes.

Briar

--------------------------


Message 3 on *Core-DB-Issues(#350):
Date:     Thu Nov 19 23:09:20 1992 EST
From:     Briar (#2)
To:       *Core-DB-Issues (#350)
Subject:  $player:@examine

I have gotten rid of the old $player:@examine verb and replaced it with the
new, improved @ex*amine/ex*amine verb.
Comments, criticism, go to me.
Briar

--------------------------


Message 4 on *Core-DB-Issues(#350):
Date:     Sat Nov 21 15:00:43 1992 EST
From:     Briar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Integration Installed On OpalMOO

I believe that I have successflly gotten integration installed onto OpalMOO
players, containers, and rooms. This integration works by means of one of the
following three properties: .room_integration_msg, .container_integration_msg,
and .carried_msg. These are set with the usual means of message setting, as
follows:
  @room-integration Table is "You see a table here."
or
  @carried_msg Pamphlet is "%N carries a small pamphlet."
The three messages one can set are for integration into rooms, containers, and
players, respectively. The string to be integrated is determined by
:room_integration_msg or :container_integration_msg or :carried_msg; by
programming your own versions of these verbs, you can make an object integrate
in more sophisticated ways.

On all rooms, containers, and players, are are three relevant properties which
determine the method by which objects will integrate:

 .integration_substance:
  0 if nothing is to be integrated
  1 if only objects are to be integrated
  2 if players and objects are to be integrated
  3 if players only are to be integrated
(This information is used by the :is_integrating verb, which can be
reprogrammed to handle more sophisticated integration.) This value is set with
the :set_integration_substance verb."

 .integration_style:
  0 if integration is to get stuck on the end of the description
  1 is integration is to be placed in a separate paragraph after the room's
description
  2 is integration is to be places in two separate paragraphs, one for objects
and one for players
  3 if all integrated objects are to be placed on separate lines
This property is set with :set_integration_style.

The last is .integration_separation_msg and it determines what separates
integrated messages; it defaults to a single space. It is set with the usual
@messages format; e.g.
  @integration_separation here is "  "


Again, this is NOT ported over from LambdaMOO, I wrote this for OpalMOO. It
may not work properly; I have not tested all possible combinations of objects
and rooms and so forth. Please report bugs to me.
Briar

--------------------------


Message 5 on *Core-DB-Issues(#350):
Date:     Sun Nov 29 23:33:33 1992 EST
From:     Briar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Change Made to @addfeature

I've just modified @addfeature so that it will let you add a feature by name
as opposed to merely by number. (I think this will work.)
What this means, simply, is that if there's a child of $feature which you want
in your features list, and you do not remember its number, you can
@add-feature it by name, and there will be a decent attempt at trying to
figure out what you meant. :)
I hope this is helpful.
Bb

--------------------------


Message 6 on *Core-DB-Issues(#350):
Date:     Mon Nov 30 22:39:37 1992 EST
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350)
Subject:  Modification to $exit

While $exit has remained untouched, I have just made some changes to what I
call my ``Modified Exit'' (#363) and I hope to port this over to LambdaMOO
(yduJ has expressed some interest).
The only change, I believe, should be in the appearance of the
 .oleave_msg
 .oarrive_msg
 .onogo_msg
properties. The raw $exit prepends the player's (well, whatever's going
through the exit) titlec to the start of the message, regardless of whether
this is contained in the message already. Thus, a message like ``With a grunt
of effort, Blackbriar lifts the grate and climbs up.'' would not be possible
because it would show up as ``Blackbriar With a grunt of effort, Blackbriar
lifts the grate and climbs up.''

If any errors show up, feel more than free to @chparent the offending exit
back to $exit... please tell me about the error, though. This should be fully
backwards-compatible, so that all messages you'd set to your already-existing
exits should work fine.
Blackbriar

--------------------------


Message 7 on *Core-DB-Issues(#350):
Date:     Wed Dec  2 13:40:52 1992 EST
From:     Blackbriar (#110)
To:       *Theme-Issues (#120), *Core-DB-Issues (#350), and *Bug-Report (#544)
Subject:  New Group

What the hell. Let's have *Bugs

--------------------------


Message 8 on *Core-DB-Issues(#350):
Date:     Thu Dec  3 16:34:33 1992 EST
From:     Blackbriar (#110)
To:       *Theme-Issues (#120) and *Core-DB-Issues (#350)
Subject:  Proposed New :my_huh Setup

The Vision Of :my_huh
=====================
The :my_huh presently in use on $player permits the use of features. I want to
expand on this. Forgive me if this document is crude in places; it has to
grow.

I want to introduce what I'm calling, for the moment, SuperObjects (because
Opal seems to love that term so much). SuperObjects will be objects that
contain verbs which may not normally be executable by server matching (i.e.
verbs that contain no `this' to match). For example, a SuperObject can be a
sword with a ``stab any none none'' verb. This would not match under normal
circumstances (and would not execute except for ``stab sword'' which has
limited use).

Notice, too, that these verbs will -not- show up in an @examine unless the
programmer allows them to (thus forcing said programmer to learn about the
guts of the new @examine guts), giving them a certain mystery, a certain
intrigue... a certain je ne sais quoi.

In order for a verb to match as a SuperObject verb, it must meet the following
criteria:
+ The object must be in the player's possession. Real possession. Real
.contents, not pseudo-contents.
+ The verb must be listed in a .super_verbs property. (This property may be !r
if the programmer wishes; it will be looked at with wizperms anyway.
Alternately, a :super_verbs verb may be placed on the object; this verb will
be passed the prospective player and the prospective verb; the verb must
return a true value for the verb to be considered approved.)
+ The verb much be +x. This is a technical necessity, and like all +x
command-line verbs, the programmer should consider the possibility of abuse
and take reasonable precaution if the verb is intended to do something
meaningful and serious.

Assuming that the attempted command has not matched in any of the usual ways,
this will be the next thing checked: Is this a SuperVerb on any of the objects
I am really, truly carrying?

The next thing will be a check of ``remembered objects'' (one's
pseudo-contents, if one will). In order for a command to match on a
``remembered object'' it must meet the following criteria:
+ The verb must match in one of the usual, traditional ways (with either the
dobj or iobj matching the object in question).
+ The object must consent to be remembered (either by having a .memorable
property with a true value, or by having a :memorable verb which, when passed
the prospective player, returns a true value).
+ The verb in question must be +x (again, this is a technical necessity; see
notes above).

Assuming that the command typed did not match in the usual ways and did not
match a SuperObject, this will be next: Does it match a verb on one of my
memorable objects?

The last check is for features. A feature verb will match if:
+ The object is in the player's .features list. (The permissions for features
are already handled in :add_feature).
+ The verb must be +x (see above).

This is the last check: If the command has not matched in the usual ways, or
matched a SuperObject or a remembered object, does it match a feature verb?

Comments?
Blackbriar

--------------------------


Message 9 on *Core-DB-Issues(#350):
Date:     Wed Dec  9 11:44:59 1992 EST
From:     Briar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Minor Bug Fix

I've installed $guest:set_aliases to prevent guests from adding aliases to
themselves.
No biggie, just keeping y'all informed.
Bb

--------------------------


Message 10 on *Core-DB-Issues(#350):
Date:     Wed Dec  9 12:21:19 1992 EST
From:     Briar (#2)
To:       *Theme-Issues (#120) and *Core-DB-Issues (#350)
Subject:  "Minor change to $room:accept

I've added one more way you can get into a room (see `help teleportation' for
more details): If you want to teleport into a room, it's unlocked for you, and
there -is- no way to talk there, you're let in.
Bb

--------------------------


Message 11 on *Core-DB-Issues(#350):
Date:     Thu Dec 10 00:15:16 1992 EST
From:     Briar (#2)
To:       *Core-DB-Issues (#350)
Subject:  One Quick Fix, One Query

1. Changed $player:linelen so it'd be +x. Whee. No big deal.

2. Does anyone think it'd be worth my while to hack @rename so that one can
rename properties? (This might be worth a port back to LambdaMOO if it works,
but.) Anyone? Anyone? Bueller?

Bb

--------------------------


Message 12 on *Core-DB-Issues(#350):
Date:     Thu Dec 10 04:51:49 1992 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  @Rename-ing Properties

So this would create a property with the new name, same flags, owner, and
value, and then delete the old property?  Interesting idea.  Of course, since
properties can't have aliases, there would be no need for any changes to
@add/@rmalias.
Sounds like a good idea to me.

--------------------------


Message 13 on *Core-DB-Issues(#350):
Date:     Thu Dec 10 21:07:10 1992 EST
From:     Sadric (#358)
To:       *Core-DB-Issues (#350)
Subject:  Renaming properties

   This would be a fairly simple hack. Heck, I might even copy the verb and do
it myself.

--------------------------


Message 14 on *Core-DB-Issues(#350):
Date:     Fri Dec 11 14:45:18 1992 EST
From:     Sadric (#358)
To:       *Core-DB-Issues (#350)
Subject:  renaming props...

well, once I thought it through, I came to the conclusion that the benifits of
such a scheme would be outweighed by the shere magnitide of the code involved.
(Yes, theres lots more than I thought if you want to do it right.) Anyway, if
someone else wants to do this, they're welcome to it.

--------------------------


Message 15 on *Core-DB-Issues(#350):
Date:     Sat Dec 12 07:09:38 1992 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Renaming Properties

Okay, a working copy of a @rename that will work with properties is now on
#114:@rename().  At first I couldn't think of any useful things for this to do
but now that I think about it it seems very useful after all.
Please do not copy this onto yourself.  This is for the Wizards to look at and
use if they like it.

--------------------------


Message 16 on *Core-DB-Issues(#350):
Date:     Sat Dec 12 08:37:57 1992 EST
From:     Blackbriar (#110)
To:       Anne_Merkel (#114) and *Core-DB-Issues (#350)
Subject:  Re: Renaming Properties

Anne Merkel writes:

>  Okay, a working copy of a @rename that will work with properties
>  is now on #114:@rename().  At first I couldn't think of any useful
>  things for this to do but now that I think about it it seems very
>  useful after all.

Random notes (things I'm fixing myself before installing):
+ It does not handle clear properties; after one @renames a property with this
command, all decendants will have unclear children. Easy fix.
+ It does not handle the obscure but possible situation that someone has taken
a +c property and made it !c for twisted, diabolical reasons (or for good
reasons). (Yes, I know that they'd be broken anyway since their verbs will be
wrong, but.)

I'm going to hack on this a bit longer and then install it here. One we get it
together to my anal-retentive tastes, let's give it back to Anne Merkel to
port back to LambdaMOO.

Blackbriar

--------------------------


Message 17 on *Core-DB-Issues(#350):
Date:     Sat Dec 12 09:49:02 1992 EST
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350)
Subject:  Renaming Properties.

Actually, I just put together $object_utils:rename_property which does
everything in anal-retentive detail. Anyone see anything wrong with it?
Bb

--------------------------


Message 18 on *Core-DB-Issues(#350):
Date:     Sat Dec 12 13:03:10 1992 EST
From:     Anne_Merkel (#114)
To:       Blackbriar (#110) and *Core-DB-Issues (#350)
Subject:  Re: Renaming Properties.

>  From:     Blackbriar (#110)
>  Subject:  Renaming Properties.
>  Actually, I just put together $object_utils:rename_property which
>  does everything in anal-retentive detail. Anyone see anything
>  wrong with it?

Well, the only problem I see is that it needs to check to prevent you from
having the third argument be a null-string ("") since that would create a
null-property.  Then again, I suppose the server can work with
null-properties.  You just wouldn't be able to access them easily.
Other than that, it looks great.  And that was damn fast work, too!

--------------------------


Message 19 on *Core-DB-Issues(#350):
Date:     Sun Dec 13 17:21:50 1992 EST
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350)
Subject:  New @rename installed.

With motivation from Anne_Merkel, I've installed a modified (and hopefully
debugged) @rename. Check out `help @rename' for details on how you can now
rename properties!
Bb

--------------------------


Message 20 on *Core-DB-Issues(#350):
Date:     Sun Dec 13 18:20:16 1992 EST
From:     Briar (#2)
To:       *Core-DB-Issues (#350)
Subject:  BE FOREWARNED

The next message is WAY WAY WAY WAY LONG AND SPAMMY
But it's potentially useful documentation.
Bb

--------------------------


Message 21 on *Core-DB-Issues(#350):
Date:     Sun Dec 13 18:20:55 1992 EST
From:     Briar (#2)
To:       *Core-DB-Issues (#350)
Subject:  This is the biggie!

I've been promising documentation on the core hacking I've been doing, so here
goes. Forgive me if this is a bit sketchy. I'm not the best at documenting
sometimes, and right now I feel like I'm going to be abysmal.

When you type a command, the first thing that gets checked is whether the
command you've typed matches a verb on yourself. So the server checks for
verbs on you, then verbs on your parent, then verbs on -its- parent, and so
on, until it has either determined that such a verb (with appropriate
arguments) exists or that it does not exist, on you. If it exists, it runs it
and that's the end of it.

Having determined that there is no appropriate verb on you, the server next
looks on your location. Is there a matching verb (with appropriate arguments)
on your room? on its parent? etc. Having determined whether there is such a
verb, it either runs it (in which case the parsing stops here) or it moves on.

The server, next, checks for a matching direct object. The server checks using
your .contents and your location's .contents (it does not recognize :contents,
and thus metarooms will fail in this respect for !x verbs). If there is a
match on the verb and direct object (and args), that verb is run. Otherwise,
this same procedure is used on the indirect object of the command.

Those four steps are all handles by the server. Having exhausted those steps,
we move into in-DB parsing of commands, and that's where a lot of the fun
comes in. The next verb that gets run is the :huh verb on your location (if it
doesn't exist, which should only happen if you're hanging out in $nothing, the
parsing stops here as well), which on OpalMOO calls $command_utils:do_huh,
which reads as follows:

$command_utils:"do_huh"   this none this
 1:  ":do_huh(verb,args)  what :huh should do by default.";
 2:  set_task_perms(cp = caller_perms());
 3:  verb = args[1];
 4:  args = args[2];
 5:  notify = $perm_utils:controls(cp, player) ? "notify" | "tell";
 6:  if (player:my_huh(verb, args))
 7:    "... the player found something funky to do ...";
 8:  elseif (caller:here_huh(verb, args))
 9:    "... the room found something funky to do ...";
10:  elseif (player:last_huh(verb, args))
11:    "... player's second round found something to do ...";
12:  elseif (dobj == $ambiguous_match)
13:    if (iobj == $ambiguous_match)
14:      player:(notify)(tostr("I don't understand that (\"", dobjstr, "\" and
\"", iobjstr, "\" are both ambiguous names)."));
15:    else
16:      player:(notify)(tostr("I don't understand that (\"", dobjstr, "\" is
an ambiguous name)."));
17:    endif
18:  elseif (iobj == $ambiguous_match)
19:    player:(notify)(tostr("I don't understand that (\"", iobjstr, "\" is an
ambiguous name)."));
20:  else
21:    player:(notify)("I don't understand that.");
22:    player:my_explain_syntax(caller, verb, args) ||
(caller:here_explain_syntax(caller, verb, args) || this:explain_syntax(caller,
verb, args));
23:  endif

The first thing that gets called is the player's :my_huh. This is where you
would put special parsing for yourself, if you wanted it, and where special
parsing gets placed for things like feature objects. Let's delve into the
:my_huh we're using here on OpalMOO.

#578:"my_huh"   this none this
 1:  "Blackbriar's :my_huh experiment. Handles extra parsing of player
commands, for when a command fails to match using usual measures. Called by
$command_utils:do_huh.";
 2:  "First check is for SuperThings with SuperVerbs.";
 3:  "Next check is for Known Objects with appropriate verbs.";
 4:  "Last check is for features.";
 5:  if ((caller != this) && (!$perm_utils:controls(caller_perms(), this)))
 6:    "Standard permissions check.";
 7:    return E_PERM;
 8:  endif
 9:  "Let's initialize some variables so we can figure out what the command is
we're looking for.";
10:  "verb - obvious                 pass - would be args";
11:  "plist - list of prepspecs that this command matches";
12:  "dlist and ilist - likewise for dobjspecs, iobjspecs";
13:  verb = args[1];
14:  pass = args[2];
15:  plist = {"any", prepstr ? $code_utils:full_prep(prepstr) | "none"};
16:  dlist = (dobjstr ? {"any"} | {"none", "any"});
17:  ilist = (iobjstr ? {"any"} | {"none", "any"});
18:  "Let's look for SuperObjects, and the verbs thereon. A SuperObject has to
be in the player's .contents (literal possession), and the verb has to be
approved (by means of being listed in a .super_verbs property, or a
:super_verbs(player,verb) verb. The verb, too, has to be +x";
19:  for SuperObject in (this.contents)
20:    if (valid(loc = $object_utils:has_callable_verb(SuperObject, verb)[1]))
21:      vargs = verb_args(loc, verb);
22:      if ((vargs[2] in plist) && ((vargs[1] in dlist) && (vargs[3] in
ilist)))
23:        if (($object_utils:has_callable_verb(SuperObject, "super_verbs") &&
SuperObject:super_verbs(this, verb)) ||
($object_utils:has_property(SuperObject, "super_verbs") && (verb in
SuperObject.super_verbs)))
24:          set_task_perms(this);
25:          SuperObject:(verb)(@pass);
26:          "Problem with verbs of the same name. If we use which=vrb in the
loop instead, we have a problem with verbs that use the variable verb.";
27:          return 1;
28:        endif
29:      endif
30:    endif
31:    if ($command_utils:running_out_of_time())
32:      player:tell("You have too much in your contents.  Parsing your
command runs out of ticks while checking ", SuperObject.name, " (",
SuperObject, ").");
33:      return 1;
34:    endif
35:  endfor
36:  "Let's look for Known Objects.";
37:  if (dobj == $failed_match)
38:    dobj = this:match_environment(dobjstr);
39:  endif
40:  if (iobj == $failed_match)
41:    iobj = this:match_environment(iobjstr);
42:  endif
43:  for y in ({@dobjstr ? this:known_objects(dobjstr) | {}, @iobjstr ?
this:known_objects(iobjstr) | {}})
44:    if (valid(loc = $object_utils:has_callable_verb(y, verb)[1]))
45:      template = verb_args(loc, verb);
46:      if ("this" in template)
47:        dobj_match = 0;
48:        if (template[1] == "this")
49:          for alias in ({y.name, @y.aliases})
50:            dobj_match = (dobj_match || (index(alias, dobjstr) == 1));
51:          endfor
52:        endif
53:        iobj_match = 0;
54:        if (template[3] == "this")
55:          for alias in ({y.name, @y.aliases})
56:            iobj_match = (iobj_match || (index(alias, iobjstr) == 1));
57:          endfor
58:        endif
59:        if ((((template[1] in dlist) || dobj_match) && (template[2] in
plist)) && ((template[3] in ilist) || iobj_match))
60:          if (dobj_match)
61:            dobj = y;
62:          endif
63:          if (iobj_match)
64:            iobj = y;
65:          endif
66:          set_task_perms(this);
67:          y:(verb)(@pass);
68:          return 1;
69:        endif
70:      endif
71:    endif
72:  endfor
73:  "Last check: Features";
74:  for fobj in (this.features)
75:    if (!$recycler:valid(fobj))
76:      this:remove_feature(fobj);
77:    elseif (valid(loc = $object_utils:has_callable_verb(fobj, verb)[1]))
78:      vargs = verb_args(loc, verb);
79:      if ((vargs[2] in plist) && ((vargs[1] in dlist) && (vargs[3] in
ilist)))
80:        set_task_perms(this);
81:        fobj:(verb)(@pass);
82:        "Problem with verbs of the same name. If we use which=vrb in the
loop instead, we have a problem with verbs that use the variable verb.";
83:        return 1;
84:      endif
85:    endif
86:    if ($command_utils:running_out_of_time())
87:      player:tell("You have too many features.  Parsing your command runs
out of ticks while checking ", fobj.name, " (", fobj, ").");
88:      return 1;
89:    endif
90:  endfor

I want to introduce what I'm calling, for the moment, SuperObjects (because
Opal seems to love that term so much). SuperObjects will be objects that
contain verbs which may not normally be executable by server matching (i.e.
verbs that contain no `this' to match). For example, a SuperObject can be a
sword with a ``stab any none none'' verb. This would not match under normal
circumstances (and would not execute except for ``stab sword'' which has
limited use).

As a more practical example, consider telephone units. In order to provide
private conversation, these units would have to take a command like ``speak
any into this'' which results in awkward commands like
  speak "Yeah, I'm actually looking forward to when Opal goes away for the
holiday!" into phone
while now, with SuperObjects, we have the ability to simply issue a command
like
  speak Yeah, I'm actually looknig forward to when Opal goes away!

Notice, too, that these verbs will -not- show up in an @examine unless the
programmer allows them to (thus forcing said programmer to learn about the
guts of the new @examine), giving them a certain mystery, a certain
intrigue... a certain je ne sais quoi.

A quick way to make the verbs work properly in an @examine may be seen in my
Sword (#542), which has the following verb setup:
  #542:stab                     Blackbriar (#110)    rxd    any none none
  #542:hidden_verbs             Blackbriar (#110)    rxd    this none this
  #542:examine_commands_ok      Blackbriar (#110)    rxd    this none this
The `stab' verb is pretty usual, and would have worked fine with syntax `stan
any with this' (but that wouldn't have been the point). The
`examine_commands_ok' verb does nothing but return 1. The real work is in
`hidden_verbs':
#542:"hidden_verbs"   this none this
 1:  dude = args[1];
 2:  if (this.location != dude)
 3:    return {@pass(@args), @this.super_verbs};
 4:  else
 5:    return pass(@args);
 6:  endif
(The .super_verbs property on the sword contains {"stab"} as its entry. It
could be more sophisticated, but this is just a simple example.)

In order for a verb to match as a SuperObject verb, it must meet the following
criteria:
+ The object must be in the player's possession. Real possession. Real
.contents, not pseudo-contents.
+ The verb must be listed in a .super_verbs property. (This property may be !r
if the programmer wishes; it will be looked at with wizperms anyway.
Alternately, a :super_verbs verb may be placed on the object; this verb will
be passed the prospective player and the prospective verb; the verb must
return a true value for the verb to be considered approved.)
+ The verb much be +x. This is a technical necessity, and like all +x
command-line verbs, the programmer should consider the possibility of abuse
and take reasonable precaution if the verb is intended to do something
meaningful and serious.

Assuming that the attempted command has not matched in any of the usual ways,
this will be the next thing checked: Is this a SuperVerb on any of the objects
I am really, truly carrying?

The next thing will be a check of ``remembered objects'' (one's
pseudo-contents, if one will). In order for a command to match on a
``remembered object'' it must meet the following criteria:
+ The verb must match in one of the usual, traditional ways (with either the
dobj or iobj matching the object in question).
+ The object must consent to be remembered (either by having a .memorable
property with a true value, or by having a :memorable verb which, when passed
the prospective player, returns a true value).
+ The verb in question must be +x (again, this is a technical necessity; see
notes above).

To add an object to your list of memorable objects, use the @remember command.
To remove an object from your list of memorable objects, use the @forget
command. You may remember objects which permit themselves to be remembered.
You may also remember anything you own. (Wizards, by quirk of fate, may
remember anything. Elephants and all that.)

A memorable object shows up in your contents. You can examine it and so forth
(you may execute any +x verb on it which matches as if the object were there).
To check what you've got remembered, check your inventory. It may look
something like:
   You are carrying:
   [#217] Map of OpalMOO
   (#542) Sword
   (#568) Mail User's Feature Object
   (#570) Summary of New :my_huh features
   (#578) Experiment II
   You have seven dollars.
Where remembered objects which are -not- in your possession show up in square
brackets.

Assuming that the command typed did not match in the usual ways and did not
match a SuperObject, this will be next: Does it match a verb on one of my
memorable objects?

The last check is for features. A feature verb will match if:
+ The object is in the player's .features list. (The permissions for features
are already handled in :add_feature).
+ The verb must be +x (see above).

This is the last check: If the command has not matched in the usual ways, or
matched a SuperObject or a remembered object, does it match a feature verb?

``The family circle is a triangle.  And a triangle has sharp edges.''

There's a pair of handcuffs by the bed. They're surrounded by empty Chinese
food cartons, an empty bottle of wine, and two wine glasses. One of the
glasses has fallen over, leaving a red stain on the carpet which slowly
creeps towards the handcuffs.

The alarm clock went off an hour ago, but the room's inhabitants have shut
it off, preferring the warmth of their shared bed to the cold of the real
world.

This is OpalMOO. Welcome to it.

+-----------------------------+   Wizards: Briar, Opal and Edison
| connect <player> <password> |
| connect Guest               | To register for a character, connect as a
+-----------------------------+ Guest and type 'create'.
I don't understand that.  Valid commands at this point are
   Help, Who, COnnect, CReate, Quit, UPtime, or Version
I don't understand that.  Valid commands at this point are
   Help, Who, COnnect, CReate, Quit, UPtime, or Version
I don't understand that.  Valid commands at this point are
   Help, Who, COnnect, CReate, Quit, UPtime, or Version
I don't understand that.  Valid commands at this point are
   Help, Who, COnnect, CReate, Quit, UPtime, or Version
I don't understand that.  Valid commands at this point are
   Help, Who, COnnect, CReate, Quit, UPtime, or Version
Let's assume, for the sake of argument, that your :my_huh does not find any
object worth matching. The next verb which gets called is the :here_huh of
your location. The :here_huh on rooms (excluding editors, which are funky
rooms in just about every respect) has the following main functions:

  #3:"here_huh"   this none this
   1:  ":here_huh(verb,args)  -- room-specific :huh processing.  This should
return 1 if it finds something interesting to do and 0 otherwise; see
$command_utils:do_huh.";
   2:  "For the generic room, we check for the case of the caller specifying
an exit for which a corresponding verb was never defined.";
   3:  "We also check to see if the verb is defined on an exit in the room.";
   4:  "NOTE: This verb is a modified $room:here_huh written by Anne_Merkel.
The original is stored as $room:here_huh(original).";
   5:  set_task_perms(caller_perms());
   6:  verb = args[1];
   7:  if (args[2] || ($failed_match == (exit = this:match_exit(verb))))
   8:    "... well it's not an exit.  let's see if it's a verb defined on an
exit...";
   9:    dobj = player:my_match_object(dobjstr);
  10:    iobj = player:my_match_object(iobjstr);
  11:    for o in ({this, dobj, iobj, @this:exits()})
  12:      if (valid(o) && (where = $object_utils:has_callable_verb(o, verb)))
  13:        vargs = verb_args(where[1], verb);
  14:        if (((vargs[2] == "any") || ((!prepstr) && (vargs[2] == "none")))
|| index(("/" + vargs[2]) + "/", ("/" + prepstr) + "/"))
  15:          if (((vargs[1] == "any") || ((!dobjstr) && (vargs[1] ==
"none"))) || ((dobj == o) && (vargs[1] == "this")))
  16:            if (((vargs[3] == "any") || ((!iobjstr) && (vargs[3] ==
"none"))) || ((iobj == o) && (vargs[3] == "this")))
  17:              o:(verb)(@args);
  18:              return 1;
  19:            endif
  20:          endif
  21:        endif
  22:      endif
  23:    endfor
  24:    "... it's not a verb defined on an exit either.  we give up...";
  25:    return 0;
  26:  elseif (valid(exit))
  27:    exit:invoke();
  28:  else
  29:    "... ambiguous exit ...";
  30:    player:tell("I don't know which direction `", verb, "' you mean.");
  31:  endif
  32:  return 1;

It checks for exits which don't match one of the compass directions (those are
caught by a verb on $room). It checks for verbs which match on exits (so that
the exits do not need to be -in- the room; note that any such verbs need to be
+x in order to work). But it's got an even more diabolical trick:
It'll match verbs that that wouldn't usually be matched. I mean, here, that if
an exit has a verb `jump none none none rxd' and you type `jump' in the room,
the verb on that exit will be matched and will run (assume it doesn't match
with anything beforehand).

Let's assume that your location's :here_huh also fails to match. Then your
:last_huh verb gets run. This one reads:

  #6:"last_huh"   this none this
   1:  ":last_huh(verb,args)  final attempt to parse a command...";
   2:  set_task_perms(caller_perms());
   3:  verb = args[1];
   4:  args = args[2];
   5:  if ((verb[1] == "@") && (prepstr == "is"))
   6:    "... set or show _msg property ...";
   7:    set_task_perms(player);
   8:    $last_huh:(verb)(@args);
   9:  elseif (verb in {"give", "hand", "get", "take", "drop", "throw"})
  10:    $last_huh:(verb)(@args);
  11:  else
  12:    return 0;
  13:  endif
  14:  return 1;

This verb serves two main functions: Are you trying to set a message? Are you
trying to get or drop an object that doesn't have a get/drop verb? If so, it
tries to match and handle your command.

Having utterly failed to find a command which matches, we're back in the
capable hands of $command_utils:do_huh, which checks a few last things: Is our
problem because we've got ambiguous dobj/iobj matches? Is it because the
syntax of our command was in some way wrong? This is truly the end of the
command parsing. (WOO WOO)

Geez, I hope this wasn't too terribly spammy or unreadable. Questions? Just
ask.
Bb

--------------------------


Message 22 on *Core-DB-Issues(#350):
Date:     Sun Dec 13 23:53:13 1992 EST
From:     Briar (#2)
To:       *Wizard-List (#141) and *Core-DB-Issues (#350)
Subject:  OpalMOO Checkpoint Frequency

I changed the checkpoint frequency on OpalMOO from once an hour to once every
twenty minutes. If cc.brynmawr.edu starts being stable, I'll change it back to
once an hour.
I am truly sorry for these recurring crashes, but for the time being I am
unable to do anything about them. The best I can do is try to keep the
database saved so that when we -do- come back up, we're ready to go.
Bb

--------------------------


Message 23 on *Core-DB-Issues(#350):
Date:     Thu Dec 24 12:58:18 1992 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Minor core change:

I modified $thing:hidden_verbs so that if an object is locked down, it will
not show the `get' verb when you examine it. This check is made by calling
:is_unlocked_for.
Bb

--------------------------


Message 24 on *Core-DB-Issues(#350):
Date:     Thu Dec 24 18:02:12 1992 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Multiple Ownership? Can it be?

I'd like to introduce a variant of multiple ownership to the MOO. This is a
sharing of object ownership which allows people to hack on an object
(adding/deleting verbs/properties) which they do not own. (Note, though, that
when you add a verb, you own it, and you can edit it and other people can't.
This is not an implementation which supports shared verbs or property
ownership.)

This is all accomplished through calls to $ownership_utils (#811, Multiple
Ownership Utilities). See that object for more help. Note the @add-owner
command to add an owner to an object, and the @remove-owner command to remove
owners from an object. The examine command has bee modified to support shared
objects.

This is experimental. Comments/questions? Just ask.

Blackbriar

--------------------------


Message 25 on *Core-DB-Issues(#350):
Date:     Fri Dec 25 11:02:51 1992 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Eensy change.

For some queer reason, I found that @lastlog was defined on $room instead of
on $player, so I moved it. I also modified it slightly so that players who
-never- connected are treated properly (as opposed to the previous behavior,
which reported them as connecting recently -- in 2038, I believe).
I don't suspect anyone will have ever noticed this. It's a weird command
anyway.
Bb

--------------------------


Message 26 on *Core-DB-Issues(#350):
Date:     Fri Dec 25 11:15:14 1992 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Another minor core change.

When you examine a generic gendered object or one of its children, you will no
longer see the @gender <this> is <any> command you'd previosly seen, unless
you are the owner or are wizardly (i.e. you could run the command anyway).
Sheesh, if Opal stays away much longer I'll be hacking the db into oblivion.
Bb

--------------------------


Message 27 on *Core-DB-Issues(#350):
Date:     Wed Dec 30 15:05:45 1992 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Minor (trivial) core change.

For those people using the `max' verb to get info on max_object(), I've moved
it from $prog onto #484. Grab it, use it, etc. It's a funky fresh feature.
Bb

--------------------------


Message 28 on *Core-DB-Issues(#350):
Date:     Wed Dec 30 22:33:29 1992 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Container Modifications

I've hacked $container so that you don't see commands you can't do, again, and
I've modified it so it shows you the keys set on the object if there are any.
Bb

--------------------------


Message 29 on *Core-DB-Issues(#350):
Date:     Wed Dec 30 23:09:42 1992 EST
From:     Alea (#756)
To:       *Core-DB-Issues (#350)
Subject:  New (well, relatively) Directed Emote Feature

    Check the Directed Emotes Feature (#793)... it may be a little different
than what you've seen before...

--------------------------


Message 30 on *Core-DB-Issues(#350):
Date:     Fri Jan  1 13:48:53 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Minor $exit change

I fixed that I perceived to be a bug in $exit: You can now only use an exit to
move into a room which has that exit in its .entrances list. Essentially, I've
made it so that both sides must have approved the exit before you can use it.
Briar

--------------------------


Message 31 on *Core-DB-Issues(#350):
Date:     Sat Jan  2 15:59:34 1993 EST
From:     Alea (#756)
To:       *Core-DB-Issues (#350)
Subject:  New Generic Detailed Room

   A new Generic Detailed Room (#786) is now available from the Generics
Dealer.  It allows the owner to add text details to the room which can be
looked at.  Details may be hidden from plain view (ie. the @details command)
and attempts to "get" or "take" details can have customized take_failed
messages.  The rooms also support "noises", messages that are announced
at random or fixed intervals.  Noisy rooms make sure they have a connected,
not-too-idle audience before making noise.
  Try these rooms out and please let me know of any bugs, suggestions, or
comments.  And look out for the Generic Memorable Detailed Room coming soon
to dealer near you...

--------------------------


Message 33 on *Core-DB-Issues(#350):
Date:     Sat Jan  9 17:50:05 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  New Verb (whee)

Since the editors are very often used to edit descriptions, I've added a new
verb: @descedit <object> which whisks you off to the Note Editor to edit the
.description property of the specified object. Use it, abuse it, but don't
make it write bad checks.
Coming soon: a new fresh beautiful version of @edit which will handle all your
editing needs. Don't hold your breath.
Bb

--------------------------


Message 34 on *Core-DB-Issues(#350):
Date:     Sat Jan  9 18:11:14 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Note Editor Hack

The Note Editor will now, upon receipt of the `save' command, attempt to call
a :set_foo verb on the property in question. So if I am editing my
.description property, or my .obsolescence property, or my .naked_shm
property, and I `save' the editor will look to see  if I have a callable
:set_description / :set_obsolescence / :set_naked_shm verb, and if I have one,
it'll call it and it will take the value returned as gospel. If not, it'll try
the old method of raw writing to the property in question.
If there is a :set_foo verb, it will be called with the editing player's
permissions.
Bb

--------------------------


Message 35 on *Core-DB-Issues(#350):
Date:     Sat Jan  9 18:21:30 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Did I mention I have nothing to do right now?

So I installed the much-requested @quicksend verb on the Mail User's Feature
Object (#568). This feature got a buncha cool verbs on it for our mail users.
Check it out. Don't be an elephant.
Bb

--------------------------


Message 36 on *Core-DB-Issues(#350):
Date:     Sun Jan 10 00:04:38 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  New Editing Command

I've just installed a whole new grand @edit command. Check out `help @edit'
for more information. It eliminates @notedit and @descedit (but retains those
aliases for consistency's sake).
The main new interesting point here is the :default_editing verb on the object
being edited. If an object is specified as the only argument to be edited
(e.g. @edit Rover as opposed to @edit Rover:sit or @edit Rover.description),
then the object's :default_editing verb will be called to determine what
exactly the player is editing. As a default, if one is editing a note object,
one edits that object's .text property; all other objects assume that one
wants to edit the description of the object.
What makes this interesting is its potential for growth. Consider a VR mail
system that takes a variety of note and allows one to edit it and save it or
send it. The pre-existing @edit command would allow one to easily define the
generic mail object to call the this new editor.
Comments? Questions? Bugs?
Bb

--------------------------


Message 37 on *Core-DB-Issues(#350):
Date:     Sun Jan 10 00:29:30 1993 EST
From:     Jordan (#830)
To:       *Core-DB-Issues (#350)
Subject:  Events

With the help of our favorite baby, I've added an event system to OpalMOO.
Basically, they allow you to have an object notified when certain things
happen, like an object entering or leaving the room.
Try help events and help event-handlers for more information.

--------------------------


Message 38 on *Core-DB-Issues(#350):
Date:     Sun Jan 10 06:00:37 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Multiple Ownership

I'm interested in a judgment call from y'all OpalMOO people. I'm working on
the Multiple Ownership we're corifying here on OpalMOO and something
interesting came to mind.
If Xiombarg and Greene share an object via multiple inheritance, they can both
hack on it. They can, essentially, do anything to it: add verbs, set property
values, etc.
But what if the shared object isn't yer average thing, but is actually a
player object itself? What is Xiombarg makes Greene a shared OWNER of
Xiombarg?
It would be a really small step to say that Greene should, thus, be able to
run tasks with Xiombarg's permissions and, essentially, do anything Xiombarg
can do.
What do y'all think of this?
Bb

--------------------------


Message 39 on *Core-DB-Issues(#350):
Date:     Sun Jan 10 18:22:38 1993 EST
From:     Sandman (#203)
To:       *Core-DB-Issues (#350)
Subject:  Multiple Ownership Reply

I think it would greatly simplify large programming projects.  Go for it!
    -Sandman

--------------------------


Message 40 on *Core-DB-Issues(#350):
Date:     Sun Jan 10 20:09:22 1993 EST
From:     Greene (#485)
To:       *Theme-Issues (#120) and *Core-DB-Issues (#350)
Subject:  Bad trip

While I'm thinking of it.
Why don't y'all check out the mailing list *Freaks, where Praecox and I are
trying to build the Generic Abusable Substance here on OpalMOO. Come early and
come often. Suggestions welcomed.

--------------------------


Message 41 on *Core-DB-Issues(#350):
Date:     Mon Jan 11 22:07:36 1993 EST
From:     BabyBriar (#2)
To:       JoeFeedback (#390), *Bug-Report (#544), and *Core-DB-Issues (#350)
Subject:  Re: Bug in @edit

JoeFeedback said:

>  Why not check for active sessions in all kids (descendants) of
>  $generic_editor?  This would allow for returning to mail editing
>  and any future editors.

Actually, this was a damned good idea. So I did this to @edit:

If you use the @edit command with an object/obj.prop/obj:verb argument, it
will act in the expected way.
If you use the @edit command with no arguments and you have ONE unfinished
session in ANY editor, you will go back there.
If you use the @edit command with no arguments and you have MORE THAN ONE
unfinished session in ANY editor, you will be asked which one you want.
If you use the @edit command with no arguments and you have NO editing
sessions to come back to, you'll get a one-liner help info.

I also killed @notedit and @descedit once and for all.

Briar

--------------------------


Message 42 on *Core-DB-Issues(#350):
Date:     Mon Jan 11 22:25:26 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Teeny Little Trivial Thing

"What the hell, why not?" I thought to myself.
"After all, what can it hurt?" I figured.
So I went 'n did it. Just about every time that a verb's code is set (by
@program or @edit, for example), a line is added to the END of the verb
indicating its last time of edit and the programmer who did it.
Comments? Suggestions?
Briar

--------------------------


Message 43 on *Core-DB-Issues(#350):
Date:     Mon Jan 18 15:04:24 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Buncha Changes

1. I've modified the inventory command for all players. It should appear to be
the same -- but it has improved flexibility for programmers. One can now add
an :inventory_msg() verb to one's object (please pass(@args) if you do it)
which will determine the info to be displayed when one does a detailed
inventory.

2. I've modified @audit for all builders. Again, it should appear to be the
same, but it's got improved flexibility for programmers. If you'd like to
control the information that is displayed when one does an @audit, add an
:audit_msg() to your generic.

3. I've modified $player:tell_contents and $player:look_self so that one is
carrying a list of things as opposed to a clunky bunch o'stuff.

Briar

--------------------------


Message 44 on *Core-DB-Issues(#350):
Date:     Mon Jan 18 23:04:11 1993 EST
From:     Alea (#756)
To:       *Core-DB-Issues (#350)
Subject:  Change to Generic Detailed Room (#786)

   I have changed the parent of #786, Generic Detailed Room, from Generic Room
to Area Smart Room (#274) in response to a request.  I don't think it should
interfere with the operation of the rooms (*crosses fingers*), but I haven't
looked much at #274 to see exactly how it works.  Please let me know if you
like this change, or experience any problems.  I'm also planning to add random
or sequenced multiple detail texts (ie. a tv detail with a changing screen).
Any feedback is appreciated and thanks to those who have made suggestions
already.  The Memorable Detailed Rooms should be working sometime when school
is less hairy... or when I just give up my academic career and immerse myself
in a virtual existence until I starve to death.
					    Have Fun,
					     Love Alea and the kids...

--------------------------


Message 45 on *Core-DB-Issues(#350):
Date:     Tue Jan 19 20:53:48 1993 EST
From:     Alea (#756)
To:       *Core-DB-Issues (#350)
Subject:  Integration in brief mode

   I just want to comment that the room description in brief mode really
looks bad in terms of not integrating the objects.  It is easy to ruin the
effect of a room by having stark object names instead of the crafted
integration messages.  I'm not sure what to do about this.  Perhaps allow a
flag that will turn on integration messages and display them without displayin
the main desc?  I await anyone's comment on this matter.

--------------------------


Message 46 on *Core-DB-Issues(#350):
Date:     Mon Jan 25 14:55:13 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350)
Subject:  programmers forking tools:

I wonder if there'd be an easy way to handle killing forked tasks from within
verbs.  I think the current alternative, kill_task(), is not very flexible.
Internally, you have to mess with cramming stuff into and out of a special
property.  Aesthetically unsatisfying and not very dynamic.  How hard would it
be to give programmers the flexibility of the command line verbs? (esp. @kill)

A project?  -prae.

--------------------------


Message 47 on *Core-DB-Issues(#350):
Date:     Mon Jan 25 15:46:25 1993 EST
From:     Blackbriar (#110)
To:       Praecox (#711) and *Core-DB-Issues (#350)
Subject:  Re: programmers forking tools:

Praecox asks:

>  I wonder if there'd be an easy way to handle killing forked tasks
>  from within verbs.  I think the current alternative, kill_task(),
>  is not very flexible.  Internally, you have to mess with cramming
>  stuff into and out of a special property.  Aesthetically
>  unsatisfying and not very dynamic.  How hard would it be to give
>  programmers the flexibility of the command line verbs? (esp.
>  @kill)

I can easily envision something like $code_utils:kill_task() which would take
some special series of arguments and determine what you mean to do, and then
do it. Let's look at it a little bit closer:
+ If passed an integer, assume it's a task_id and kill it specifically.
+ If passed a string with an "obj:verb" format, kill all appropriate tasks.
+ If passed an object number or a string with an "objnum" form, kill all
appropriate tasks.
Hm... anyone feel like writing this? I'll be happy to debug it... but I don't
feel up to writing it.

On the other hand, one should note that kill_task() is not -supposed- to be
all that userfriendly. It's a server primitive and it serves a specific
limited function. It's very easy to find out about queued tasks, either by
grabbing the value at the time of the fork or by using the queued_tasks()
function.

I don't have a strong opinion here. Anyone feel like writing it, go ahead.

Bb

--------------------------


Message 48 on *Core-DB-Issues(#350):
Date:     Mon Jan 25 19:26:21 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350)
Subject:  Re: programmers forking tools:

>  On the other hand, one should note that kill_task() is not
>  -supposed- to be all that userfriendly. It's a server primitive
>  and it serves a specific limited function. It's very easy to find
>  out about queued tasks, either by grabbing the value at the time
>  of the fork or by using the queued_tasks() function.
>
Okay, okay, I'll write it.  Yes, I'm not suggesting to hack into kill_task(),
it should go on $code_utils or something (can't remember where you suggested,
Bb).  But I do think it should exist, so, even if I have to do it, at least no
one else will have to, eh?

We don't have a *Q&A, I think, so while I'm at it, a question:  Is there any
reason why a bunch of small verbs is more spammy than one big one?  Or is the
only issue one of security?  I tend to like smaller verbs, since it allows
easier customization, but I'm not sure.

praecox.

--------------------------


Message 49 on *Core-DB-Issues(#350):
Date:     Mon Jan 25 19:32:52 1993 EST
From:     Blackbriar (#110)
To:       Praecox (#711) and *Core-DB-Issues (#350)
Subject:  Re: programmers forking tools:

Praecox:

>  We don't have a *Q&A, I think, so while I'm at it, a question:  Is
>  there any reason why a bunch of small verbs is more spammy than
>  one big one?  Or is the only issue one of security?  I tend to
>  like smaller verbs, since it allows easier customization, but I'm
>  not sure.

1. Does anyone want a *Q&A mailing list? I'd be more than happy to make one.

2. I'm not sure I understand the question. Under what conditions is smaller
verbs more spammy than larger verbs? I mean, yeah, sometimes it is. But with
smaller verbs, you can do a -specific- task which can be called in any number
of ways because it's got a predictable output if given a predictable input.

Bb

--------------------------


Message 50 on *Core-DB-Issues(#350):
Date:     Tue Jan 26 05:17:32 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350)
Subject:  Alteration of #1:contents

After thinking about hacking a replacement for :contents, I came up with the
following idea for #1:contents:
@program #1:content
stuff = this.contents;
for x in (stuff)
  x:hide_me() ? stuff = setremove(stuff,x) | 0;
endfor
return stuff;

This would also require another verb, #1:hide_me(), which just returns 0.  The
idea is to have objects be secret consistently.  I.e., an object `speck' might
be so small it doesn't show up in any inventories.  The current :contents
would allow us to hack at our room's or our own version of :contents and hide
certain things, but there's no way to *consistently* have `speck' be invisible
-- it is dependent upon the :contents verb of its container.  W/ my
suggestion, we could just write a :hide_me on `speck' which returns TRUE, or
else returns TRUE for everyone but its owner, say...

I know a lot of stuff calls :contents.  Maybe I'm getting too lower layer.
Any ideas?
-prae.

--------------------------


Message 51 on *Core-DB-Issues(#350):
Date:     Tue Jan 26 13:17:50 1993 EST
From:     Blackbriar (#110)
To:       Praecox (#711) and *Core-DB-Issues (#350)
Subject:  Re: Alteration of #1:contents

Praecox:

>  After thinking about hacking a replacement for :contents, I came
>  up with the following idea for #1:contents:
>  @program #1:content
>  stuff = this.contents;
>  for x in (stuff)
>    x:hide_me() ? stuff = setremove(stuff,x) | 0;
>  endfor
>  return stuff;
>
>  This would also require another verb, #1:hide_me(), which just
>  returns 0.  The idea is to have objects be secret consistently.
>  I.e., an object `speck' might be so small it doesn't show up in
>  any inventories.  The current :contents would allow us to hack at
>  our room's or our own version of :contents and hide certain
>  things, but there's no way to *consistently* have `speck' be
>  invisible -- it is dependent upon the :contents verb of its
>  container.  W/ my suggestion, we could just write a :hide_me on
>  `speck' which returns TRUE, or else returns TRUE for everyone but
>  its owner, say...

Several thoughts come to mind...

What good would it be to have an object in a location but -not- in that
location's :contents()?  It wouldn't show up in look, or examine, and it
wouldn't receive any output from the room, but it -would- show up in @sweep,
and various server commands would still match on it (for examine, if `speck'
has a `pull this' verb, I can type `pull speck' and it'll match regardless of
:contents).

I am not so crazy about this idea, but I can see how it -could- have its uses.
I think that its uses would best be suited in specific instances here you can
hack :contents() individually.
Bb

--------------------------


Message 52 on *Core-DB-Issues(#350):
Date:     Tue Jan 26 16:27:18 1993 EST
From:     Praecox (#711)
To:       Blackbriar (#110) and *Core-DB-Issues (#350)
Subject:  Re: Alteration of #1:contents

 Blackbriar opines:
>  What good would it be to have an object in a location but -not- in
>  that location's :contents()?  [...]
>
>  I am not so crazy about this idea, but I can see how it -could-
>  have its uses. I think that its uses would best be suited in
>  specific instances here you can hack :contents() individually.

(1) I admit that it would have limited functionality, but
(2) Hacking individual :contents wouldn't really work right.  The idea is to
have invisible objects, or, better, selectively invisible contents.  If this
behavior were to be consistent, one would have to know somehow that every
object which picks up `speck' has the right :contents, which obviously can't
be guaranteed.

But yes, hacking :contents might be drastic.  Perhaps I could modify just
$player:look or something?  Dunno.  Maybe I should just give up.

Yrs, all
 -praecox

--------------------------


Message 53 on *Core-DB-Issues(#350):
Date:     Fri Jan 29 16:50:16 1993 EST
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350), *Bug-Report (#544), and *Q&A (#1111)
Subject:  Announcement: New Mail Group

After several requests, I've created *Q&A for your OpalMOO questions and
answers. This lucky mail group (#1111) is ready and waiting for you. <grin>
Thanks, Sancho.
Bb

--------------------------


Message 54 on *Core-DB-Issues(#350):
Date:     Sat Jan 30 03:05:58 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Zones

By request, I've added some zones to the MOO. See the following help screens
for help with zones:
  help $zone
  help @zone
  help @zones
Briar

--------------------------


Message 55 on *Core-DB-Issues(#350):
Date:     Sun Jan 31 19:04:51 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Mild Core Change

I edited $player:@messages so that instead of saying that a message is
corrupted, when it's, for example, a list, it'll use $string_utils:print to
generate readable output.
Briar

--------------------------


Message 56 on *Core-DB-Issues(#350):
Date:     Sun Jan 31 19:50:40 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Bye bye @gag

After talking with Opal, we've removed @gag from OpalMOO. It's not VR.
Briar

--------------------------


Message 57 on *Core-DB-Issues(#350):
Date:     Mon Feb  1 02:36:08 1993 EST
From:     Blade (#1108)
To:       *Core-DB-Issues (#350)
Subject:  Superobjects

Is it possible to make it so that superobject are looked for if they are in
the same room as the player and not necessarily in the player's .contents?
I mean without any dobj or iobj reference to it, like can be done if its in
you're real .contents...
Just a thought...
Blade

--------------------------


Message 58 on *Core-DB-Issues(#350):
Date:     Mon Feb  1 13:17:03 1993 EST
From:     BabyBriar (#2)
To:       Blade (#1108) and *Core-DB-Issues (#350)
Subject:  Re: Superobjects

Blade asks:

>  Is it possible to make it so that superobject are looked for if
>  they are in the same room as the player and not necessarily in the
>  player's .contents?
>  I mean without any dobj or iobj reference to it, like can be done
>  if its in you're real .contents...

This is an interesting idea... Can anyone think of a good reason why
$room:here_huh (or, perhaps, $root_class:here_huh) oughtn't be programmed to
handle this?
If nobody has any good arguments against, I'll do it soon.
Briar

--------------------------


Message 59 on *Core-DB-Issues(#350):
Date:     Mon Feb  1 14:06:25 1993 EST
From:     BabyBriar (#2)
To:       Praecox (#711) and *Core-DB-Issues (#350)
Subject:  New Help Installed

Thanks to Praecox, we've got new help installed for $string_utils, and a few
of the in-code documentation has been updated as well. <grin>

Also, since I've been feeling kinda silly, I've been doing some documentation
myself: $guest (unfinished), $guest_log, $news, $new_builder_log,
$new_prog_log.

Briar

--------------------------


Message 60 on *Core-DB-Issues(#350):
Date:     Mon Feb  1 22:11:31 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Minor Core Change

I made a slight tweak to the examine command (specifically,
$root_class:examine_verbs) which will display `help <object>' as an `obvious
command' if there exists help information on the object in the form of a
help_msg verb or property.
Briar

--------------------------


Message 61 on *Core-DB-Issues(#350):
Date:     Tue Feb  2 20:28:23 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  New Command Ported

I've just added the @subscribed command to $player. (More properly, it's a
modification of the @rn/check_mail_lists command.) The help screens have been
updated to reflect this addition. (This is a port from LambdaMOO.)
Briar

--------------------------


Message 62 on *Core-DB-Issues(#350):
Date:     Tue Feb  2 20:42:47 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  New $string_utils verbs

I've just snagged (from JaysHouseMOO) the following:

$string_utils:print_truncated( value , len , finish-string )
  Print the given value into a string of length len.
  If the final string is too long, finish-string will be used to
  replace the last few characters.  The null string, of course,
  replaces nothing.

$string_utils:name_and_number
$string_utils:nn
  This takes an object as its argument, and outputs its name
  and the object number in parentheses.

These are not yet documented in `help $string_utils' but they will be at some
point.

Briar

--------------------------


Message 63 on *Core-DB-Issues(#350):
Date:     Tue Feb  2 21:05:42 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  $network

For those of you who may have occasion to use $network, as of this moment
OpalMOO has the latest working version of that code.
Briar

--------------------------


Message 64 on *Core-DB-Issues(#350):
Date:     Tue Feb  2 21:39:04 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  $prog:@rmtime-stamp

I've just added a verb to $prog which will allow a programmer to automagically
strip the timestamps from one of eir verbs. This can come in handy, especially
as one edits and runs across several timestamps in the same verb.

Check out `help @rmtime-stamp' for more info.

Since I know it'll be asked -- why don't we strip the timestamps when we add
the new one?  Consider the case in which there's a verb I had which worked
when it was ten lines long.  I go into the editor and I add to the end, so I'm
adding lines eleven to twenty, with an unfortunate typo in line fifteen.  When
my timestamp gets stripped from line ten, my error will claim to be on line
fourteen and I'll, like, never find it.

Briar (incoherent, sleepy, wants a cupcake)

--------------------------


Message 65 on *Core-DB-Issues(#350):
Date:     Tue Feb  2 21:39:18 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Oops.

That last one deserves thanks to Sadric, BTW.
Briar

--------------------------


Message 66 on *Core-DB-Issues(#350):
Date:     Tue Feb  2 21:44:12 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  New idea for `look'

At present, we've got
  look <something>
  look at <something>  --  same as the first
  look <something> in <something else>  --  contents

Any reason we shouldn't actually generalize this... like...

  look <foo> in <something>  --  returns something:look_in(foo)
  look <foo> under <something>  -- returns something:look_under(foo)
  look <foo> on <something>  -- returns something:look_on(foo)
.. etc.

Briar

--------------------------


Message 67 on *Core-DB-Issues(#350):
Date:     Tue Feb  2 22:52:33 1993 EST
From:     Blade (#1108)
To:       *Core-DB-Issues (#350)
Subject:  SUperObjects

Was it evr changed so someone could use a superobject if its in the same room
as them??

Blade

--------------------------


Message 68 on *Core-DB-Issues(#350):
Date:     Tue Feb  2 22:54:00 1993 EST
From:     BabyBriar (#2)
To:       Blade (#1108) and *Core-DB-Issues (#350)
Subject:  Re: SuperObjects

>  Was it evr changed so someone could use a superobject if its in
>  the same room as them??

No, this has not yet been done -- for two reasons, actually.

1. I was trying to figure out whether it would work, and whether it would have
any unexpceted side-effects.
2. I was informed of some bugs in our -present- $room:here_huh code (the code
I'd modify to make this change) and I wanted to get -those- fixed first.

Briar

--------------------------


Message 69 on *Core-DB-Issues(#350):
Date:     Tue Feb  2 23:16:54 1993 EST
From:     BabyBriar (#2)
To:       *Wizard-List (#141) and *Core-DB-Issues (#350)
Subject:  @make-player / @make-guest

I've modified the $wiz:@make-player command so that it can be used as
@make-guest as well. There are help screens, and in hindsight I think this was
a silly wya to have done it, but.
(Not that this matters to anyone, but I figured I'd send it to *Core since
*Core seems to be the place to store my list of changes.)
Briar

--------------------------


Message 70 on *Core-DB-Issues(#350):
Date:     Wed Feb  3 01:03:10 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Quick change to $container

I added a :contents verb to $container which returns {} if the object's .dark
is on. This might be a good thing.
Then again, I really need a cupcake.
Briar

--------------------------


Message 71 on *Core-DB-Issues(#350):
Date:     Wed Feb  3 03:42:10 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350) and Blackbriar (#110)
Subject:  Re: New $string_utils verbs

>  I've just snagged (from JaysHouseMOO) the following:
>
>  $string_utils:name_and_number
>  $string_utils:nn
>    This takes an object as its argument, and outputs its name
>    and the object number in parentheses.

Hmm.  Don't see the functionality of this one.  Why bother, when you have the
$string_utils:names_of verb?  It's true that the existing verb requires an
object *list*, but this short-coming has been rectified in my 2min hack of the
the verb.  Compare: (the me: verb is the hack...)
>; me:names_of(me)
=> "Praecox (#711)"  (ooh, no traceback!)

>; me:names_of({me,#717,#718})
=> "Praecox (#711)   opium (#717)   He (#718)"

>; #20:names_of({me,#717,#718})
=> "Praecox(#711)   opium(#717)   He(#718)"
Note that I also added an additonal space between this.name and (obj#)
elements.  Check out me:names_of for the proof...

Praecox, against the endless proliferation of verbs....

--------------------------


Message 72 on *Core-DB-Issues(#350):
Date:     Wed Feb  3 03:49:57 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350)
Subject:  Re: New idea for `look'

[Blackbriar suggests...]
>    look <foo> under <something>  -- returns
>  something:look_under(foo)
>    look <foo> on <something>  -- returns something:look_on(foo)
>  ... etc.

I'm not sure I understand.  I assume contents would remain unchanged?  Perhaps
we could have a property parallel to .contents which holds the `state' (i.e.,
under, on, in)?  Is this what you mean?  or else (gak) .contents could turn
into an alist?  Or else (not so nice either) maintain parallel .under object
lists?

Prae, not against the proliferation of mail...

--------------------------


Message 73 on *Core-DB-Issues(#350):
Date:     Wed Feb  3 13:18:01 1993 EST
From:     Blackbriar (#110)
To:       Praecox (#711) and *Core-DB-Issues (#350)
Subject:  Re: New idea for `look'

>  [Blackbriar suggests...]
>  >    look <foo> under <something>  -- returns
>  >  something:look_under(foo)
>  >    look <foo> on <something>  -- returns something:look_on(foo)
>  >  ... etc.

>  I'm not sure I understand.  I assume contents would remain
>  unchanged?  Perhaps we could have a property parallel to .contents
>  which holds the `state' (i.e., under, on, in)?  Is this what you
>  mean?  or else (gak) .contents could turn into an alist?  Or else
>  (not so nice either) maintain parallel .under object lists?

This is, basically, unrelated to :contents() in a direct way.  Consider
this...

I want to make a complicated adventuring scenario. To do this, I want for
things to be under other things, or on top of other things, or inside other
things, or behind other things... I realize I would need to program this, but
if the `look' command had that flexibility, I would only need to program -my-
objects.

I dunno, it's just an idea.

Bb

--------------------------


Message 74 on *Core-DB-Issues(#350):
Date:     Wed Feb  3 13:28:46 1993 EST
From:     BabyBriar (#2)
To:       Praecox (#711), *Core-DB-Issues (#350), and Blackbriar (#110)
Subject:  Re: New $string_utils verbs

>  >; me:names_of(me)
>  => "Praecox (#711)"  (ooh, no traceback!)

>  >; me:names_of({me,#717,#718})
>  => "Praecox (#711)   opium (#717)   He (#718)"

>  >; #20:names_of({me,#717,#718})
>  => "Praecox(#711)   opium(#717)   He(#718)"

Actually, personally, I'd like to trash $string_utils:names_of as being way
ugly. I'd prefer to keep $string_utils:nn and then add a $string_utils:nn_list
or something like that (and also a minor variant that makes a title list
instead of a name list).
I've never liked $string_utils:names_of very much. I dunno, I wanna cupcake.
Briar

--------------------------


Message 75 on *Core-DB-Issues(#350):
Date:     Wed Feb  3 15:02:25 1993 EST
From:     Praecox (#711)
To:       BabyBriar (#2) and *Core-DB-Issues (#350)
Subject:  Re: New $string_utils verbs

Well, that was the whole point of my hack:  why not have one verb that
*dynamically* handle objects or object lists?  (Only 2 lines to fix this one)

I agree about it being ugly, but then, that was changed (on Praecox:names_of).
We need something more sophisticated for handling multiple objects (I'm
thinking of $su:english_list here).  Certainly, tho', your new $su:nn doesn't
do this. In fact, it can't handle more than 1 object.

Praecox, wondering what Blackbrair really wants....

--------------------------


Message 76 on *Core-DB-Issues(#350):
Date:     Thu Feb  4 20:51:38 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350)
Subject:  $bloat_utils

What verbs are available to check personal usage in kB and general databloat
(except for server memory()).  I know on Lambda there are some useful verbs
scattered about.  Perhaps we should core-ify?  Perhaps we could have a
$bloat_utils?

praex....

--------------------------


Message 77 on *Core-DB-Issues(#350):
Date:     Thu Feb  4 21:05:08 1993 EST
From:     BabyBriar (#2)
To:       Praecox (#711) and *Core-DB-Issues (#350)
Subject:  Re: $bloat_utils

>  What verbs are available to check personal usage in kB and general
>  databloat (except for server memory()).  I know on Lambda there
>  are some useful verbs scattered about.  Perhaps we should
>  core-ify?  Perhaps we could have a $bloat_utils?

There is no need to corify something like the MOO Pig. We have a copy of the
MOO Pig here (#264) which seems perfectly functional, although I'd want to
check it to see if it's been updated to properly handle clear properties
(which can save a substantial amount of space).
Briar

--------------------------


Message 78 on *Core-DB-Issues(#350):
Date:     Thu Feb  4 21:15:36 1993 EST
From:     Sadric (#358)
To:       BabyBriar (#2), Praecox (#711), and *Core-DB-Issues (#350)
Subject:  Re: $bloat_utils


I assume you mean to eliminate the clear properties from the survey? Hmm, I'll
have to look at that. It shouldn't be hard to do. I may even be able to do it
myself if I'm thinking on the right lines.

-Sadric
>  There is no need to corify something like the MOO Pig. We have a
>  copy of the MOO Pig here (#264) which seems perfectly functional,
>  although I'd want to check it to see if it's been updated to
>  properly handle clear properties (which can save a substantial
>  amount of space).
>  Briar

--------------------------


Message 79 on *Core-DB-Issues(#350):
Date:     Thu Feb  4 23:02:54 1993 EST
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350)
Subject:  Query re: Multiple Ownership

Should the various @audit-related commands take multiple-ownership into
account? In other words, if Praecox and Greene both `own' an object, should it
show up in both @audit's?
I see plusses and minuses to this -- which is why I'm asking for discussion.
Bb

--------------------------


Message 80 on *Core-DB-Issues(#350):
Date:     Fri Feb  5 09:00:12 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350) and Praecox (#711)
Subject:  Delayed Recycle

I was asked, some time ago, to write a method for delaying recycle, so you're
not totally screwed if you accidentally recycle the wrong object. This is what
I've come up with -- it's NOT yet installed. Tell me what you think of it.

The @recycle command will queue the proscribed object for recycling in two
minutes.  Similarly, though, the @recycle! command will recycle the object on
the spot.
The @doomed command will let you know what objects are queued for destruction,
and when.
The @resurrect command will let you save an object from destruction.

I've tested 'em and I think they work... do y'all think this would be a
satisfactory solution?

Briar

--------------------------


Message 81 on *Core-DB-Issues(#350):
Date:     Fri Feb  5 10:36:19 1993 EST
From:     Sancho (#685)
To:       *Core-DB-Issues (#350)
Subject:  re: Delayed recycle

hmm. I was going to write a bigger letter, but I ducked something up,
so it is going to be shorter.
I think that delayed recyle is a good idea.
oh well. my $.02
-Sancho
(is too early, I think I'll go get some Coke (tm) )

--------------------------


Message 82 on *Core-DB-Issues(#350):
Date:     Fri Feb  5 14:31:53 1993 EST
From:     JoeFeedback (#390)
To:       Blackbriar (#110) and *Core-DB-Issues (#350)
Subject:  Re: Query re: Multiple Ownership

(Ew, @audit uses :who_location_msg?)

My vote: Objects show up in @audit lists for all their owners, but are marked
somehow (maybe parentheses around the object number) if you're not auditing
the `primary owner'.

--------------------------


Message 83 on *Core-DB-Issues(#350):
Date:     Fri Feb  5 21:12:40 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350)
Subject:  Re: Delayed Recycle

>  The @recycle command will queue the proscribed object for
>  recycling in two minutes.  Similarly, though, the @recycle!
>  command will recycle the object on the spot.
 [...]

I wanna bigger `flake' margin, that is to say, more than 2 minutes.  Why does
it hafta be so soon?  Do you have to use fork or somethin'?  In that case,
maybe 5 minutes?  Why not?

prae (Proud to be Opal's only spivak)

--------------------------


Message 84 on *Core-DB-Issues(#350):
Date:     Fri Feb  5 21:56:24 1993 EST
From:     BabyBriar (#2)
To:       Praecox (#711) and *Core-DB-Issues (#350)
Subject:  Re: Delayed Recycle

>  >  The @recycle command will queue the proscribed object for
>  >  recycling in two minutes.  Similarly, though, the @recycle!
>  >  command will recycle the object on the spot.

>  I wanna bigger `flake' margin, that is to say, more than 2
>  minutes.  Why does it hafta be so soon?  Do you have to use fork
>  or somethin'?  In that case, maybe 5 minutes?  Why not?

No reason why it couldn't be five minutes. Yes, it -is- a fork. Is five
minutes preferable to two?
Briar

--------------------------


Message 85 on *Core-DB-Issues(#350):
Date:     Fri Feb  5 22:33:02 1993 EST
From:     Sadric (#358)
To:       *Core-DB-Issues (#350)
Subject:  RE: Delayed Recycle

Well, IMO, the time delay doesn't matter as long as its reasonable. I do,
however, think that the command to retrieve a doomed object should be some
variation on the recycle command. This makes for easier remembering and such.

As for @audit, let the object show up for all owners, but, like Joe said, make
some distinction between who.owner and who in .owners. Perhaps a flag in the
left margin, say a + or something.

--Sadric (Making as little sense as possible)

--------------------------


Message 86 on *Core-DB-Issues(#350):
Date:     Fri Feb  5 22:43:56 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  @audit

The @audit command now supports shared ownership.
Briar

--------------------------


Message 87 on *Core-DB-Issues(#350):
Date:     Fri Feb  5 23:08:53 1993 EST
From:     JoeFeedback (#390)
To:       *Core-DB-Issues (#350)
Subject:  @audit

It might be helpful to also indicate when the auditee is the actual .owner of
the object, but ownership is shared with one or more other people.  Maybe a -
flag.  Or / or *.  Or %.  Or
 or ohnevermind.

--------------------------


Message 88 on *Core-DB-Issues(#350):
Date:     Fri Feb  5 23:09:18 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Delayed Recycle.

@recycle now has several support verbs: @recycle / @unrecycle / @doomed
Check them out -- they all have help screens.  The default delay is five
minutes, but if there's a desire I can make it user-settable.
Briar

--------------------------


Message 89 on *Core-DB-Issues(#350):
Date:     Sun Feb  7 16:50:05 1993 EST
From:     Dante (#271)
To:       *Core-DB-Issues (#350)
Subject:  Zones

OK, so Briar created zones, and it looks like a nice idea. Is there an edict
out to put all the rooms in a zone somewhere, or is no one fussy ?

--------------------------


Message 90 on *Core-DB-Issues(#350):
Date:     Sun Feb  7 16:51:12 1993 EST
From:     BabyBriar (#2)
To:       Dante (#271) and *Core-DB-Issues (#350)
Subject:  Re: Zones

>  OK, so Briar created zones, and it looks like a nice idea. Is
>  there an edict out to put all the rooms in a zone somewhere, or is
>  no one fussy ?

Actually, I want all rooms in zones, and eventually I'm gonna put those rooms
which aren't in zones into zones.  The zones, to my knowledge, aren't -used-
anywhere yet, but I understand they will be soon.
Briar

--------------------------


Message 91 on *Core-DB-Issues(#350):
Date:     Sun Feb  7 20:02:43 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350)
Subject:  Here_huh hack for super-duper objects.

>  No, this has not yet been done -- for two reasons, actually.
>
>  1. I was trying to figure out whether it would work, and whether
>  it would have any unexpceted side-effects.
>  2. I was informed of some bugs in our -present- $room:here_huh
>  code (the code I'd modify to make this change) and I wanted to get
>  -those- fixed first.

Certainly those are valid reasons.  Even so, I've hacked my hotel room into a
super-huh kinda place.  Try it out.  Hotel Rm. 851.  Type "discuss" at the
prompt.  See what happens.

How did I do it?  Well, I ripped it off Clay Luther.  It's a event_parse event
which is called on all objects on the notify list.  This event call returns
true if something interesting was done, or 0 otherwise.

Anyhow, this scheme is a little circituitious (uh, circumambulatory?) but it
gets the job done.  No bugs that I can see. Just check out #714:here_huh,
lines 26 -- 34.  Also cf. Derrida's :event_parse command for the breakdown on
args.

I dunno, I like it.  I want it.  More events!  BTW, the event scanner,  #1310,
is now fertile, if anyone is interested.  And it works.  I'll be implementing
this later on a fo, probably.

--------------------------


Message 92 on *Core-DB-Issues(#350):
Date:     Mon Feb  8 15:36:43 1993 EST
From:     Dante (#271)
To:       *Core-DB-Issues (#350)
Subject:  Events, rooms, etc

Ok, I'm creating a generic sewer room, which is going to interact with a
generic light source, so that if you're in the room and don't have a light,
you won't be able to see anything and :obvious_exits will return no exits. I
think it's kinda neat. Anyways, I've also added a 'light' event, which will
tell the room when someone turns a light on or off in the room, so that when
you illuminate a room, it'll tell you what it looks like. Similarily, if you
turn off all the lights, it'll tell you that you're suddenly in the dark and
to watch out for grues, etc. To do this I have the room add itself to the
.event_notify list in :initialize and have an :event_light verb.
To me, this seems pretty simple and logical. I think the design is sound, but
I'd like to hear anyone's opinions on it. The generic sewer room is #1333 and
the generic light source is #1339. @audit me to find the sewers, oh, but you
won't be able to teleport there... hm... anyways, once I get something linked
in, I'll point you at it in *theme. Thanx, Dante

--------------------------


Message 93 on *Core-DB-Issues(#350):
Date:     Mon Feb  8 20:12:24 1993 EST
From:     Alea (#756)
To:       *Core-DB-Issues (#350)
Subject:  Generic Detailed Room (#786)

    I have made a couple of changed to the Generic Detailed Room (#786).
I have fixed a bug in @rmdetail that failed to remove the take_failed msgs
properly.  It also now allows one to "l at <detail>"  instead of just
"l <detail>".  Thanks for Profane for pointing these out!

--------------------------


Message 94 on *Core-DB-Issues(#350):
Date:     Mon Feb  8 21:05:42 1993 EST
From:     Alea (#756)
To:       *Core-DB-Issues (#350)
Subject:  Generic Memorable Detailed Room

   At long last I believe that the child of the Generic Detailed Room (#786)
has been born in the form of the Generic _Memorable_ Detailed Room (#631).
This room allows one to build dependencies and attachments between details
in a room that make details so they can only be seen under certain conditions.
It's a little hard to explain, so you should just type help #631 for more
information.  A good knowledge of #786 is advised.  Note, I have only
just completed this object and there still may be problems.  I would greatly
appreciate any comments or bug reports.  I will add it to the Generics Dealer
when I am a little more certain of its stability.

--------------------------


Message 95 on *Core-DB-Issues(#350):
Date:     Wed Feb 10 11:23:11 1993 EST
From:     BabyBriar (#2)
To:       Praecox (#711), *Q&A (#1111), and *Core-DB-Issues (#350)
Subject:  Re: Using $no_one

>  I'm trying to write a checking utility on an object which needs to
>  see whether an object is accessable.
>  $object_utils:findable_properties is returning properties which
>  are -r.  So then I tried to change the task premissions to
>  $no_one, which returned E_PERM.  So then I gave up and decided to
>  cycle thru the properties and check whether they were readable.
>
>  Question: did I give up too soon?  How doya use $no_one anyway?

I added more documentation to `help $no_one'.

What does checking `to see whether an object is accessable' mean?

Bb

--------------------------


Message 96 on *Core-DB-Issues(#350):
Date:     Thu Feb 11 01:14:08 1993 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Suggestion for $player:tell_contents()

Make the prefix message customizable.  I really hate having a colon in the
message but it would be silly for me to hack the whole verb for that one
purpose.
And others may wish to have it displayed in some distinctive way.  Someone
might want it to say, for example, that they are carrying the stuff on their
back or stuffed in the pockets of their trenchcoat or something.

--------------------------


Message 97 on *Core-DB-Issues(#350):
Date:     Thu Feb 11 16:08:02 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350)
Subject:  A new `newsgroup' that I want:

*advertisements *ads
A place to advertise your neat stuff.
(kinda like Lambda's *technology-today & *geography, but we're so much more
progressive :)

Praecox says, "Hmm?"

--------------------------


Message 98 on *Core-DB-Issues(#350):
Date:     Thu Feb 11 16:09:33 1993 EST
From:     Blackbriar (#110)
To:       Praecox (#711) and *Core-DB-Issues (#350)
Subject:  Re: A new `newsgroup' that I want:

Praecox:

>  *advertisements *ads
>  A place to advertise your neat stuff.
>  (kinda like Lambda's *technology-today & *geography, but we're so
>  much more progressive :)
>
>  Praecox says, "Hmm?"

Blackbriar . o O ( @create )

--------------------------


Message 99 on *Core-DB-Issues(#350):
Date:     Thu Feb 11 18:12:24 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350), Dagard (#636), Greene (#485), Morpheus (#1166), and Praecox (#711)
Subject:  is Praecox's Additional Programmer's Features

I've just added some stuff to #1306.  Before, there was actually nothing on
it.  Now there is.  And it's pointed to in the help, so help works now.  To
save you the trouble, here's what's on it:
@times*tamps <obj> -- gives you the timestamps for all the programmed verbs on
the object, assuming you control it (by $ownership_utils standards).  Tells
you if the verb isn't programmed yet. (Useful to me, since I translate ideas
right into @verb's, often long before working on them.
  (NB Any other info you would like?   Should it return the number of lines in
the code while I'm bothering to retrieve it?  Optionally?)

@remembered @remembering -- Little number to tell you what objects are in your
.known_objects list.  Maybe this should be moved to $player or whatever, eh,
BlackBriar?  (Easter egg:  Nice columns!)

That's it for now.  I want to eventually figure out how to get the
@lastmodified verb working, but it's a lotta work sorting the dates
properly...  More multiple ownership helpers to come later...

prae.
p.s. Someone please tell me if I'm re-doing work someone's already done...

--------------------------


Message 100 on *Core-DB-Issues(#350):
Date:     Fri Feb 12 10:38:50 1993 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Suggestion or `help integration'

While `help integration' explains the technical/programmy side of message
integration, it doesn't actual explain what message integration is.  It
_assumes_ that you are not new to MOO and know all about it, probably from
being on LM or something.
How about expanding it to begin with a short explanation for newbies before
getting into the code implementation?  Not everyone here is a heavy-duty
programmer and writing docs at too high-tech a level may alienate them.

--------------------------


Message 101 on *Core-DB-Issues(#350):
Date:     Mon Feb 15 09:33:20 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350)
Subject:  Apologies, all, another flake-out...

I'm really sorry about leaving that unprogrammed moveto on #779.  I wonder how
much chaos I caused.  Guess I learned my lesson.  Maybe next I'll recycle my
home.  From now on, anyway, all wierdness of that depth will be relegated to
test players or myself.

If it helps, here's the cause of it all: #1242, the Generic following player.
Allows the player to `follow <who>'.  Uses events (that's what I needed the
moveto for.  Trying to clean up .event_notify lists).  Seems to work.  Try the
help.  Parent it, if only for a day.  Maybe in a week or so I'll
de-marginalize it, if all goes well.  *Additional egg* (on the heels of the
harassment issue):  The followee (one being followed) has the ability to `stop
<follower>' to stop the follower from following.

BTW, the docs lie right now.  :event_exit is +d, though it shouldn't be
really.  I just wanna keep those tracebacks visible, even if they *do* go to
the followee and not the follower (where the verbs are).  Just another twisted
aspect of events.  Player/caller remain as the one who invoked the call.  That
certainly makes event debugging a bit of a pain in the ass.  Guess we gotta
live with it.

Again, really sorry for any problems.
--prae.

--------------------------


Message 102 on *Core-DB-Issues(#350):
Date:     Mon Feb 15 20:40:05 1993 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  $ownership_utils:owners()

Can we have $ownership_utils:owners() which would return
(length(object.owners) ? object.owners | {object.owner})?

--------------------------


Message 103 on *Core-DB-Issues(#350):
Date:     Mon Feb 15 21:11:07 1993 EST
From:     BabyBriar (#2)
To:       Anne_Merkel (#114) and *Core-DB-Issues (#350)
Subject:  Re: $ownership_utils:owners()

>  Can we have $ownership_utils:owners() which would return
>  (length(object.owners) ? object.owners | {object.owner})?

Done. Using a slightly different mechanism, but essentially what I think you
wanted.
Bb

--------------------------


Message 104 on *Core-DB-Issues(#350):
Date:     Mon Feb 15 21:41:44 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350) and *Bug-Report (#544)
Subject:  I suppose this is a bug report.

I've found a bug in the Multiple Ownership Utilities which makes me very
suspiciou and terribly sad. Thus, for the moment, the following things are
disabled:
+ Shared Verb Ownership
+ Verb Timestamps

I will try and get this fixed soon, I know a lot of people have gotten used to
both.
Briar

--------------------------


Message 105 on *Core-DB-Issues(#350):
Date:     Mon Feb 15 23:05:22 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350), *Bug-Report (#544), and Opal (#72)
Subject:  Re: I suppose this is a bug report.

>  I've found a bug in the Multiple Ownership Utilities which makes
>  me very suspiciou and terribly sad. Thus, for the moment, the
>  following things are disabled:
>  + Shared Verb Ownership
>  + Verb Timestamps

I think it's fixed now. HAPPY, MAMMA OPAL? DO I HAVETA EAT STRAINED PEAS?

Baby Briar

--------------------------


Message 106 on *Core-DB-Issues(#350):
Date:     Tue Feb 16 10:08:35 1993 EST
From:     Praecox (#711)
To:       *Advertisements (#1438) and *Core-DB-Issues (#350)
Subject:  *Ads:  What is it ?

*Advertisements, #1438 (such a big number!)

Just a place to advertise your neat stuff.  What's neat stuff?  Any child of
#0! :)  Feature objects, thingamajigs, sewer rats, new cocktail, fun rooms,
the funny and the odd bits which will never be coreified but might well give
millions hours of fun.  In short, anything you think someone else might find
useful.

This place also might be good as a place to meet others and create common
projects, coding teams working on a single area or object-group.  After all, I
think we've got Multi-ownership going okay---why not exploit it?

--------------------------


Message 107 on *Core-DB-Issues(#350):
Date:     Wed Feb 17 00:13:29 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  $player:set_home

Swiped from LambdaMOO, installed. Not yet supported by the core verbs.
Bb

--------------------------


Message 108 on *Core-DB-Issues(#350):
Date:     Wed Feb 17 18:53:26 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350)
Subject:  Re: monetary system

>  There should be an overall monetary system established here.  You
>  could call it anything (credits, dollars, etc...).
 [...]
>  This could work if implemented properly.  OpalMOO has the ideal of
>  emulating RL, [...]

I thinks there's a limit to the usefulness of "emulating reality."  I always
took that `clause' to mean that the wizards aren't into aliens, spaceships,
and fantasy stuff.  I dunno.  Maybe I'm just not a big fan of the so-called
free market.  So I wouldn't say I'm definately against it.   I am against
banks. *grin*

--------------------------


Message 109 on *Core-DB-Issues(#350):
Date:     Wed Feb 17 19:14:36 1993 EST
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350)
Subject:  Re: monetary system

Praecox:

>  I thinks there's a limit to the usefulness of "emulating reality."
>  I always took that `clause' to mean that the wizards aren't into
>  aliens, spaceships, and fantasy stuff.  I dunno.  Maybe I'm just
>  not a big fan of the so-called free market.  So I wouldn't say I'm
>  definately against it.   I am against banks. *grin*

I think a monetary system would be kinda decent -- it could be integrated into
drugs, perhaps, or into other things. I think it could be done without support
on $player, though. A money database, perhaps, of sorts. I dunno. I don't
think it's harmful in itself; might be useful to see what would come up if we
-did- have money.
Bb

--------------------------


Message 110 on *Core-DB-Issues(#350):
Date:     Wed Feb 17 23:36:31 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  $room:confunc

$room:confunc has been modified to take into account .brief
BabyBriar (whee, i can keep up with LambdaMOO)

--------------------------


Message 111 on *Core-DB-Issues(#350):
Date:     Thu Feb 18 01:36:50 1993 EST
From:     Paris (#1444)
To:       *Event-Issues (#1490) and *Core-DB-Issues (#350)
Subject:  *Event-Issues Created

Well, after a chat with Praecox about some neat ideas for how to use events, I
decided to make this list. The description just about says it all. I'll post
some of our ideas soon I hope. Feel free to post, by all means, but I'd just
like to avoid lots of replies to messages that add little value to the
information level. Like it says, find someone and TALK to them about events -
you'll get lots of ideas, I'm sure. Or use player-to-player mail until you
have a solid concept. No one expects you to build or code anything just
because you post here, but I hope that you'll have a good idea or concept at
least.

Paris

--------------------------


Message 112 on *Core-DB-Issues(#350):
Date:     Thu Feb 18 16:49:41 1993 EST
From:     Praecox (#711)
To:       *Event-Issues (#1490) and *Core-DB-Issues (#350)
Subject:  Event handling and core-ness

I wonder if we should coreify event handling more than we have.  Maybe I'm
lazy and sick of programming :moveto verbs, or maybe not.  I tend to think we
should add $room.event_notify handling on $thing:moveto.  I dunno.  Maybe I
should just make a child of $thing which has the following hack.

"This exists to take care of events.  Note that it's more conservative adding
them than taking them away.  Dont like to spew myself into every room's
.event_notify list.";
$object_utils:isa(this.location, $room) ?
this.location:remove_notify_event(this) | 0;
pass(@args);
this.event_aware != 0 && $object_utils:isa(this.location, $room) ?
this.location:add_notify_event(this) | 0;

We would also add :hear_events() and :ignore_events() verb to turn
this.event_aware on and off and handle room update,, and of course
this.event_aware.

Well, should it be core, or just a kid of $thing that people can use?  Maybe
the kid idea is best.  The problem with that is that people who wanted to use
a class not parented to Generic Event-Aware Thing would have to write the code
all over again!  Ack!

Sorry this is so long, but one last thing.  How are we going to handle
cleaning up objects which (somehow) are left in <room>.event_notify lists and
never deleted?  Maybe room owners could have a @clean-notify command on their
rooms which sends and :event_check to listening objects?  Sound's pretty
complicated.  I'm adding some helpful verbs for this kinda stuff on #1306.

--------------------------


Message 113 on *Core-DB-Issues(#350):
Date:     Thu Feb 18 23:02:35 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Two Minor Changes

One change that will likely affect people:
  $root_class:recycle() has been modified to remove a recycled object from the
.owned_objects lists of -all- its owners.

One change that will likely affect no-one:
  $wiz_utils:initialize_owned has been modified to handle invalid objects.

--------------------------


Message 114 on *Core-DB-Issues(#350):
Date:     Sun Feb 21 12:22:21 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350), Lyssa (#1280), Anne_Merkel (#114), and Alea (#756)
Subject:  Objects which listen.

I got some mail recently which asked me about bugging. Specifically, I was
asked about the Sittables and the various room classes which may hack
:announce or some such.

I wanted to make sure everyone knows about :sweep_msg, a verb that can be
placed on an object (including a room) which will more specifically detail
what the object is listening -for-.  So, for the sittable object that is only
listening to see if the person sitting on it leaves, the @sweep output could
say something like
   Lawn chair (#873) is listening to see if you or Zbignew leave the room.
(In the case of listening for departure, I'd say that :event_exit is a slicker
and less ticky way to handle it, though.)

I just wanted to drop this note (and mail it to some relevant people) so as to
avoid having to deal with `Hey, how come Anne Merkel is bugging my room?'
kinda things.

Briar

--------------------------


Message 115 on *Core-DB-Issues(#350):
Date:     Sun Feb 21 13:39:04 1993 EST
From:     Anne_Merkel (#114)
To:       Blackbriar (#110) and *Core-DB-Issues (#350)
Subject:  Re: Objects which listen.

>  (In the case of listening for departure, I'd say that :event_exit
>  is a slicker and less ticky way to handle it, though.)
I've changed #380:tell() checking to be replaced with :event_exit().  Does it
need a :sweep_msg() now or does @sweep not check for object's with :event_*()
verbs?

--------------------------


Message 116 on *Core-DB-Issues(#350):
Date:     Sun Feb 21 13:45:22 1993 EST
From:     BabyBriar (#2)
To:       Anne_Merkel (#114) and *Core-DB-Issues (#350)
Subject:  Re: Objects which listen.

Anne Merkel:

>  I've changed #380:tell() checking to be replaced with
>  :event_exit().  Does it need a :sweep_msg() now or does @sweep not
>  check for object's with :event_*() verbs?

@sweep does not check for :event_exit and the like because, presently, there's
no way to bug using events that won't already be caught by @sweep in one way
or another.  Once events allow interaction with conversation (if I ever
install :event_say, for example), then @sweep will be modified to support it.

Briar

--------------------------


Message 117 on *Core-DB-Issues(#350):
Date:     Sun Feb 21 18:12:18 1993 EST
From:     BabyBriar (#2)
To:       Paris (#1444), *Bug-Report (#544), and *Core-DB-Issues (#350)
Subject:  Re: @messages

Paris asks, on *Bug-Reports:

>  If you have a multi-line message prop, like a lot of .help_msg's
>  are, shouldn't @messages print out something a little bit more
>  meaningful than '@help #1265 is corrupted! **' ? It could print
>  that it's a list of strings or actually check to make sure it's a
>  valid multi-line prop or somesuch... anyways, there's got to be a
>  clearer method to tell the person what the message prop contains.

I just modified $player:@messages so that it will print the value of -all-
readable properties ending in _msg (so that the `is corrupted!' message won't
come up any more, I trust).
This will lead to spammier @messages output, but so what.

Briar

--------------------------


Message 118 on *Core-DB-Issues(#350):
Date:     Mon Feb 22 00:55:40 1993 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Event Notification - A Nasty Way to Create a Surveillance System

Since absolutely any object can add itself to a room's .event_notify list
simply by being there, you can effectively create a surveillance system that
let's you keep track of when players move from location to location.

At the moment, $room:event() is giving tracebacks because BlackASP has added
himself to the .event_notify lists of the following rooms:
The Hallway(#11)   Hotel(#145)   Main Street (South)(#148)   Main Street
(North)(#208)   Mr.Z's Habitat(#1342)   MOOse Lodge Tranportation Room(#1410)
Amusement Park Entrance(#1405)   Verb Editor(#49)   Sancho's Dive(#750)
Sewer(#1350)   MOOse Lodge Lobby(#1259)   Other side of gates(#1420)

Since most of these are public rooms, this is pretty annoying.  Even after the
bug is fixed so we don't get tracebacks, BlackASP can use the :event() verb to
monitor our movements.

I think $room:exitfunc() should automatically remove an object from it's
.event_notify list unless the object is the room itself or owned by the room's
owner.

-- Anne Merkel

--------------------------


Message 119 on *Core-DB-Issues(#350):
Date:     Mon Feb 22 19:13:31 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350)
Subject:  Event-Notification- Nasty Security Leak?

>  At the moment, $room:event() is giving tracebacks because BlackASP
>  has added himself to the .event_notify lists of the following
>  rooms: [...]
>  Since most of these are public rooms, this is pretty annoying.

Yeah, I'm afraid I'll have to take part of the blame for this
one.  For some wierd reason, the :remove_notify_event() on my following
player's :moveto() was pre-empted or broken.  I am aware of the fact that
BlackASP is still in those room lists, however, I'm afraid that until I can
reach him, I can't do anything about it.  BlackASP isn't a follower any more,
and furthermore, I've made the class -f until I can find or reproduce the
problem.

Further complicating the issue:  BlackASP chparented out of the class, so,
although he could normally just walk through the room and delete the entries
in the list, he can't now.  Nor can I delete those damn .event_notify entries.

>  Since absolutely any object can add itself to a room's
>  .event_notify list simply by being there, you can effectively
>  create a surveillance system that let's you keep track of when
>  players move from location to location.

True, but then, you can do the same by repeatingly invoking @who. A valid
point tho.  However, a quick check w/ my @esweep would also notify anyone who
cared to check that BlackASP isn't even set up to catch any events soever.
Not that that invalidates the point.  I'm just defending BlackASP from any
slur on his character...=)
>
>  I think $room:exitfunc() should automatically remove an object
>  from it's .event_notify list unless the object is the room itself
>  or owned by the room's owner.

I think this is a little extreme.  Maybe we could have an
@event-gag---paralleling @gag, but preventing certain objects from adding
itself to one's room's .event_notify list. I can see lots of reasons why
having objects in the notify list of room's they aren't in to be a very
desirable thing.  To cut off this functionality would be disasterous, I think.
I remind everyone that room owners can purge .event_notify lists at will.

prae

--------------------------


Message 120 on *Core-DB-Issues(#350):
Date:     Tue Feb 23 00:05:57 1993 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  More on Event Notification

My apologies to BlackASP.  As Praecox explained it was not BlackASP's> fault
but the result of a bug in Praecox's experiment with following.
Of course, if Praecox had tested this on himself or on a secondary test
character which he controlled, he would not have inadvertently broken so many
rooms without being able to fix them.

Still, this doesn't change the fact that the security on .event_notify is very
loose.  There should be some sort of limitation set on it, if only in
consideration of size.
If I wanted to, I could take all my objects and get them pocketed into the
.event_notify lists of all the rooms I could get into.  Then, every time
someone moved through those rooms, the :event() verb would be called for every
single one of my objects.  Since the list is non-self-cleaning, the lists
could become extremely large and bog down the system.

But, as Praecox points out, there are objects which may need
:event-notification without being in the room.  Perhaps there should be two
lists: one completely controlled by the room's owner and one to which anyone
could make add-remove requests.
The first list would not be self-cleaning and could contain objects that
aren't even in the room.  The second list would be the kind we have now but
would remove objects as they leave unless they are owned by the room's owner.
Other cases would be special cases which should be set to do the extra stuff
necessary on their own.
If this is too complicated, maybe we should restrict event_notify access to
Wizards and room owners since Praecox has already demonstrated how messy it
can be when just anybody can add an object to that list.

PS- BlackASP is still in the .event_notify lists of those rooms and there is
currently no way to fix it short of Wizard intervention.  Personally, I don't
want people tracking my movements into and out of the Verb Editor.  Shouldn't
the Editors disallow event_notify?

--------------------------


Message 121 on *Core-DB-Issues(#350):
Date:     Tue Feb 23 10:33:23 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  New verb added to the Builder's Feature Object.

I've just added a verb to the Builder's Feature Object (#987):

@get <object>
  It'll check the objects you own, your .known_objects, and your features, and
attempt to pick up whichever it thinks you mean.  Useful for long-distance
picking things up.
Bb

--------------------------


Message 122 on *Core-DB-Issues(#350):
Date:     Tue Feb 23 13:12:58 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350)
Subject:  Event security discussion moved to *events

What it says, prae

--------------------------


Message 123 on *Core-DB-Issues(#350):
Date:     Tue Feb 23 13:27:29 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Code to Limit Players on the MOO.

The following is something I put together this afternoon to try and meet the
requirements I set forth in my proposal to *Core-DB-Issues on LambdaMOO.  What
I think it will do (comments? bugs?) is allow one to set the maximum number of
players permitted on the MOO at any one time ($login.maximum_users), and it
will boot an idle player if needed to maintain that limit.  A player's idle
time must exceed $login.maximum_idle (and non-wizardly) in order to be a
candidate for this booting.

When a player is booted, e receives $login.deferred_msg just before being
disconnected.  When a player tries to connect but the MOO is full and there
isn't anyone suitable to boot, e receives $login.no_room_msg as eir failure
message.  It is possible that these should come from verbs instead of raw
properties, but I couldn't think of any useful substitutions to put in place.

The @login:connect used below is, I believe, straight from LambdaCore, with a
minor modification to include these new limitations.  All wizardly things are,
by default, owned by #2.  All non-wizardly things are, by default, owned by
$hacker.

Please send bugs and comments to Blackbriar, at whatever MOO you find him at.

[23 February 1993]

@property $login.maximum_users 0 "r" #2
@property $login.deferred_msg "" "r" #2
;$login.deferred_msg = "You have been idle for too long, and someone else
wants to connect to the MOO. Come back later."
@property $login.no_room_msg "" "r" #2
;$login.no_room_msg = "There is no room for you on the MOO. Please try again
later."
@property $login.maximum_idle 3600 "r" #2

@verb $login:can_connect this none this rxd $Hacker
@program $login:can_connect
"$login:can_connect ( player object )";
"=> 1 if there's room for the player to log in, or is wizardly";
"=> 0 if not.";
"=> E_PERM if the verb's not called by $login";
"This verb will handle the booting of an idle player, if such proves
necessary.";
if (caller != this)
  "caller must be $login becuse the booting of a player is in here as well";
  return E_PERM;
endif
who = args[1];
if (who.wizard)
  return 1;
elseif (!this.maximum_users)
  return 1;
elseif (length(connected_players()) < this.maximum_users)
  return 1;
else
  doomed = this:find_bootable_player();
  if (doomed == 0)
    return 0;
  else
    this:boot_idle_player(doomed);
    return 1;
  endif
endif
.

@verb $login:find_bootable_player this none this rxd $Hacker
@program $login:find_bootable_player
"$login:find_bootable_player()";
"=> 0 if there is no player suitable for booting";
"=> player object is there is a player suitable for booting.";
"It will return the most idle player, if such exists, who is non-wizardly and
who has been idle for longer than $login.maximum_idle seconds.";
players = connected_players();
idle_times = {};
for x in (players)
  idle_times = {@idle_times, idle_seconds(x)};
endfor
idlers = $list_utils:reverse($list_utils:sort(players, idle_times));
for x in (idlers)
  if ((!x.wizard) && (idle_seconds(x) > this.maximum_idle))
    return x;
  endif
endfor
return 0;
.

@verb $login:boot_idle_player this none this rxd #2
@program $login:boot_idle_player
"$login:boot_idle_player ( player object )";
"This boots a player who has been idle for too long. The player being booted
received the text stored in $login.deferred_msg before being
boot_player()'d.";
if (caller != this)
  return E_PERM;
endif
who = args[1];
who:notify(this.deferred_msg);
boot_player(who);
.

@program $login:connect
you_lose_msg = "Either that player does not exist, or has a different
password.";
if (caller != #0)
  return E_PERM;
  "...caller isn't :do_login_command...";
elseif (!(length(args) in {1, 2}))
  notify(player, tostr("Usage:  ", verb, " <existing-player-name>
<password>"));
elseif (!valid(candidate = this:_match_player(name = strsub(args[1], " ",
"_"))))
  notify(player, you_lose_msg);
  "...unknown player...";
elseif ((typeof(candidate.password) == STR) && ((length(candidate.password) <
2) || (crypt({@args, ""}[2], candidate.password[1..2]) !=
candidate.password)))
  notify(player, you_lose_msg);
  "...bad password...";
  server_log(tostr("FAILED CONNECT: ", args[1], " (", candidate, ") on ",
connection_name(player), ($string_utils:connection_hostname(connection_name(player))
in candidate.all_connect_places) ? "" | "******"));
elseif ((parent(candidate) == $guest) && (!valid(candidate =
candidate:defer())))
  notify(player, (candidate == #-2) ? "Sorry, guest characters are not allowed
from your site." | "Sorry, all of our guest characters are in use right
now.");
elseif (!this:can_connect(candidate))
  notify(player, this.no_room_msg);
else
  if ((!(name in candidate.aliases)) && (name != tostr(candidate)))
    notify(player, tostr("Okay,... ", name, " is in use.  Logging you in as
`", candidate.name, "'"));
  endif
  this:record_connection(candidate);
  return candidate;
endif
return 0;
.

--------------------------


Message 124 on *Core-DB-Issues(#350):
Date:     Tue Feb 23 13:59:47 1993 EST
From:     Paris (#1444)
To:       *Core-DB-Issues (#350)
Subject:  Considered releasing the core ?

I think someone mentioned in some post a while back about the OpalMOO core
having not been released to the public, but that this might be an idea... I
realize that making a dump of the db and going through it in another server
task and stripping all the non-core stuff out would be a lot of work, but if
done right, would only have to be done once hopefully... I'm not about to set
up my own MOO now or anytime in the near future, but I think that perhaps once
the core on OpalMOO hits a point where it's pretty much unchanging, it might
be a nice idea to release a copy of the core objects for public use...

I suggest this because I think that OpalMOO's core is, well, really better
than Lambda's basic core. There isn't a big difference, but it's certainly
there. Of course, the wizards are under no obligation to release the core to
anyone if they so desire... I think the core mods here are pretty much all
Briar's own work, so he can do with it as he pleases.

Just a thought, Paris.

--------------------------


Message 125 on *Core-DB-Issues(#350):
Date:     Tue Feb 23 14:10:10 1993 EST
From:     BabyBriar (#2)
To:       Paris (#1444) and *Core-DB-Issues (#350)
Subject:  Re: Considered releasing the core ?

Paris says:

>  I think someone mentioned in some post a while back about the
>  OpalMOO core having not been released to the public, but that this
>  might be an idea...

Actually, a release of OpalCore -is- in the works, but I don't know how soon
I'll feel comfortable with it enough to release it.  I want the first one to
be right, and there are just so many pieces of OpalMOO that aren't finished to
my satisfaction just yet.

>  I realize that making a dump of the db and
>  going through it in another server task and stripping all the
>  non-core stuff out would be a lot of work, but if done right,
>  would only have to be done once hopefully...

There is a command on $wiz called @make-core-database which should, in theory,
do this.  I'm rewriting it, though, for personal tastes.

>  I'm not about to set
>  up my own MOO now or anytime in the near future, but I think that
>  perhaps once the core on OpalMOO hits a point where it's pretty
>  much unchanging, it might be a nice idea to release a copy of the
>  core objects for public use...

Yeah, this will happen, eventually. When? Um, I dunno.

>  I suggest this because I think that OpalMOO's core is, well,
>  really better than Lambda's basic core. There isn't a big
>  difference, but it's certainly there. Of course, the wizards are
>  under no obligation to release the core to anyone if they so
>  desire... I think the core mods here are pretty much all Briar's
>  own work, so he can do with it as he pleases.

It'll happen. Not too fast, 'cause once I -did- make OpalCore, and then
realized I didn't like it. Once everything feels right, I'll release.

Briar

--------------------------


Message 126 on *Core-DB-Issues(#350):
Date:     Tue Feb 23 14:16:47 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Minor Modification to $room:exits

I've made $room:entrances which has precisely the same behavior as
$room:exits, returning a list of entrances instead of a list of exits. There
is no similar obvious_entrances verb for obvious reasons.

--------------------------


Message 128 on *Core-DB-Issues(#350):
Date:     Tue Feb 23 21:08:45 1993 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Change to $Door - @Whos_There

I have added a @Whos_There message to $Door.
When the door is open, you can see who's on the other side when you look at
the door.  When setting the message for this, %w is who's on the other side
and %l is the destination.

--------------------------


Message 129 on *Core-DB-Issues(#350):
Date:     Wed Feb 24 18:00:37 1993 EST
From:     Jordan (#830)
To:       *Event-Issues (#1490) and *Core-DB-Issues (#350)
Subject:  Event Security Change

The event system no longer allows objects in an event_noitfy if the the object
is not in the room and not owned by the room's owner.

Also, I wanted to ask if this might help things:

Whenever an object leaves/enters a room, it sends event_ping to the objects in
the event_notify list.  Of course, I don't think is really necessary in light
of the new change.

-Jordan.

--------------------------


Message 130 on *Core-DB-Issues(#350):
Date:     Sun Feb 28 19:49:56 1993 EST
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350)
Subject:  New Help Databases Added

I've made available to all players (by default, there's nothing to do for
yourself) a help database which will look for feature verbs, and a help
database which will look for verbs on you or on your location.
These are both ports from LambdaMOO which may be hacked for OpalCore.
Bb

--------------------------


Message 131 on *Core-DB-Issues(#350):
Date:     Mon Mar  1 19:04:59 1993 EST
From:     Dagard (#636)
To:       *Core-DB-Issues (#350)
Subject:  Modification to @chparent

How about putting these few lines of code (or something similar) into
@chparent?
(We'll assume that whatever is the target...


if (length($object_utils:descendants(whatever)) > 0)
 if ($command_utils:yes_or_no("That object has descendants. Are you sure you
want to chparent it?") == 0)
  return;
 endif
endif

Just an idea
Dagard

--------------------------


Message 132 on *Core-DB-Issues(#350):
Date:     Tue Mar  2 13:32:11 1993 EST
From:     Blackbriar (#110)
To:       Dagard (#636) and *Core-DB-Issues (#350)
Subject:  Re: Modification to @chparent

>  if (length($object_utils:descendants(whatever)) > 0)
>   if ($command_utils:yes_or_no("That object has descendants. Are
>  you sure you want to chparent it?") == 0)
>    return;
>   endif
>  endif

Well, we can use children() instead of the $object_utils call ('cause
children() only takes two ticks).  But I think this would get terribly,
terribly annoying. How about something like:

if ($object_utils:isa(whatever, $player) && children(whatever) &&
!$object_utils:isa(new_parent, $player))
  (make sure the player means this move);
endif;

This way, the only time you'll get `idiot messages' is when you want to
@chparent a child of $player that has children (perhaps a player class with
real live children?) out of the player heirarchy.

@chparent already prevents real live players from @chparenting -themselves- in
and out of the $player tree; I suppose it could take it this one step further.
Anyone object?

Bb

--------------------------


Message 133 on *Core-DB-Issues(#350):
Date:     Wed Mar  3 02:25:14 1993 EST
From:     BabyBriar (#2)
To:       Dagard (#636) and *Core-DB-Issues (#350)
Subject:  Re: Modification to @chparent

I did the change. Actually, @chparent will not allow you to @chparent a
$player with children to a non-$player class.
Briar

--------------------------


Message 134 on *Core-DB-Issues(#350):
Date:     Wed Mar  3 21:14:26 1993 EST
From:     Blade (#1108)
To:       *Core-DB-Issues (#350)
Subject:  Help for utilities...

I dont know if this is the right place to send this, but what the heck...
Not all the utilities have help...
#42,#51,#53 and #1584 all have nothing in the description or any help...

HELP!

Blade

--------------------------


Message 135 on *Core-DB-Issues(#350):
Date:     Wed Mar  3 21:32:13 1993 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Extra Lag

Is it just me or has the lag been getting worse here than on LambdaMOO?
Anyone know what's causing it?
--Anne

--------------------------


Message 136 on *Core-DB-Issues(#350):
Date:     Wed Mar  3 21:36:37 1993 EST
From:     Blackbriar (#110)
To:       Blade (#1108) and *Core-DB-Issues (#350)
Subject:  Re: Help for utilities...

Blade comments:

> I dont know if this is the right place to send this, but what
> the heck...  Not all the utilities have help...  #42,#51,#53 and
> #1584 all have nothing in the description or any help... HELP!

#42 = $perm_utils
#51 =  $match_utils
#53 = $lock_utils
#1584 = $event_utils

Just for the record, $perm_utils is obsolete and is being phased out slowly.
The rest... well, yeah, they ought to be properly documented one of these
days. (Hey, Praecox, are you still overcome with that twisted urge to document
things?)

$perm_utils has been obsoleted by $ownership_utils, just 'cause I didn't make
that clear enough above.

$event_utils is new -- you'd be best to ask Jordan for information on it. I
have no clue about the way that is all put together.

Bb

--------------------------


Message 137 on *Core-DB-Issues(#350):
Date:     Wed Mar  3 21:41:22 1993 EST
From:     Blackbriar (#110)
To:       Anne_Merkel (#114) and *Core-DB-Issues (#350)
Subject:  Re: Extra Lag

Anne Merkel asks:

>  Is it just me or has the lag been getting worse here than on
>  LambdaMOO?  Anyone know what's causing it?

There are a few possible reasons for lag on OpalMOO:

1. We are -not- on a dedicated machine, as LambdaMOO is. We run on a machine
that serves many uses. Mail server, computer science projects, any number of
uses are served by this machine. At times, the -other- use will take
precedence over OpalMOO (since we are `nice'd into minimum priority when we
boot the server).

2. The BMC net connection is notably shitty. This doesn't explain -real- lag,
but it can explain what feels like lag but is actually dropped connections
when you're talking to a void.

There aren't very many constantly running tasks. Only a few people have
written poorly-behaved loops (there's a dog that always wanders around, for
example, or a room that is constantly sending messages to the, well, zero
people in the room), and I suppose I should talk with them sometime
eventually. Our lag is -not- because of a plethora of forked tasks.

Bb

--------------------------


Message 138 on *Core-DB-Issues(#350):
Date:     Sat Mar  6 23:52:27 1993 EST
From:     BabyBriar (#2)
To:       Jordan (#830), *Networking (#1735), and *Core-DB-Issues (#350)
Subject:  MOO Services Mail Group created

Because I want this MOO Services package to be well-done, I've created a
*Networking mail group to facilitate discussion. Be well. Prosper.
Briar

--------------------------


Message 139 on *Core-DB-Issues(#350):
Date:     Sun Mar  7 06:41:11 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Minor Change to *NPL / *NBL.

I've just modified $new_prog_log and $new_builder_log so that instead of
giving WHO as a header, it will say PROGRAMMER or BUILDER. (This is to avoid
ambiguity when merely zipping through the lists.)

This change is irrelevant for non-wizards.

Briar

--------------------------


Message 140 on *Core-DB-Issues(#350):
Date:     Mon Mar  8 07:17:36 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350)
Subject:  @remembering shared items

I think I should be able to @remember and forget shared items.  I dunno, I
like remember (which is why I made that alternate @inv on my fo).  I seem to
have mental problems with pound signs and numbers...

prae

--------------------------


Message 141 on *Core-DB-Issues(#350):
Date:     Mon Mar  8 08:10:19 1993 EST
From:     Blackbriar (#110)
To:       Praecox (#711) and *Core-DB-Issues (#350)
Subject:  Re: @remembering shared items

Praecox:

>  I think I should be able to @remember and forget shared items.  I
>  dunno, I like remember (which is why I made that alternate @inv on
>  my fo).  I seem to have mental problems with pound signs and
>  numbers...

Done. Anyone think we need a Memorable Container?
Bb

--------------------------


Message 142 on *Core-DB-Issues(#350):
Date:     Tue Mar  9 00:38:00 1993 EST
From:     Praecox (#711)
To:       Blackbriar (#110) and *Core-DB-Issues (#350)
Subject:  Re: @remembering shared items

[Blackbriar:]
>  Done. Anyone think we need a Memorable Container?

Thanks.  What's a memorable container?  You mean so it doesn't show up in
$player:contents()?
-prae

--------------------------


Message 143 on *Core-DB-Issues(#350):
Date:     Thu Mar 11 14:27:04 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Um.

I just finished fixing $wiz:@newt and its related verbs. I think.
Briar

--------------------------


Message 144 on *Core-DB-Issues(#350):
Date:     Fri Mar 12 10:10:54 1993 EST
From:     Blackbriar (#110)
To:       Praecox (#711), *Bug-Report (#544), and *Core-DB-Issues (#350)
Subject:  Re: $ownership_utils:set_verb/property_info...

Praecox mentions (on *Bug-Report):

>  I guess you're right about the property owner... What is needed is
>  at least *some* way to change the ownership of a property, whether
>  it's for the convenience of doing eval, or so one can use
>  something which wants to edit the property but doesn't know about
>  m.o....

Ok. How about something like a verb which does this:
  @chown obj:verb to me
  @chown obj.prop to me
.. and, o'course, you can't @chown to anyone except yourself ('xcepting
wizzes, again). That way, you can forcibly grab ownership of any verb or
property on an object you control (you can do this now, with verbs, merely by
resetting the code).

Bb

--------------------------


Message 145 on *Core-DB-Issues(#350):
Date:     Fri Mar 12 14:59:04 1993 EST
From:     Xiombarg (#360)
To:       *Core-DB-Issues (#350)
Subject:  @newt, etc.

Umm, how did you "fix" said verbs?
	   -Xi

--------------------------


Message 146 on *Core-DB-Issues(#350):
Date:     Fri Mar 12 15:08:13 1993 EST
From:     Blackbriar (#110)
To:       Xiombarg (#360) and *Core-DB-Issues (#350)
Subject:  Re: @newt, etc.

Xiombarg asks:

>  Umm, how did you "fix" said verbs?

I broke them in the first place. The @newt verb wouldn't actually newt anyone
any more, and the @denewt command wouldn't properly denewt anyone. It was a
combination of half-baked ideas and half-finished coding.
If you rilly rilly want the details, I'll give 'em.
Bb

--------------------------


Message 147 on *Core-DB-Issues(#350):
Date:     Sat Mar 13 16:12:35 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  NEW LOOK finally

I've finally installed -- with a lot of help from Profane -- a new look
protocol. You can now, in addition to looking AT things or looking at things
IN things, you can look at things UNDER things, or things BEHIND things. You
can look THROUGH things.

What happens, say, when you type a command like:
  look box under desk
is that the :look_under verb on the desk will be called with the argument
`box'.  This can be handled in any number of ways.  You'll have to program it
yourself, though, if you want it to do something fancy.

As an added bonus, you can now look THROUGH exits! (I've added a :look_through
to $door so that you can't look through closed doors, I hope Anne Merkel
doesn't complain at me.)

Kudos to Profane for this one.  I think it's totally cool.

Briar

--------------------------


Message 148 on *Core-DB-Issues(#350):
Date:     Sat Mar 13 16:23:01 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Minor Change to $mail_recipient

I made $mail_recipient a tiny bit paranoid so that people can't move mail
folders out of $mail_agent unless they own it.
Bb

--------------------------


Message 149 on *Core-DB-Issues(#350):
Date:     Sun Mar 14 17:47:22 1993 EST
From:     Blade (#1108)
To:       *Theme-Issues (#120), *Core-DB-Issues (#350), and *Etc (#1673)
Subject:  Crosspost from Hell!!

Please, anyone who owns a street room should move it to the street zone.
As a matter of fact, You should move all your rooms to the appropriate room,
if any.

Blade

--------------------------


Message 150 on *Core-DB-Issues(#350):
Date:     Sun Mar 14 21:53:10 1993 EST
From:     BabyBriar (#2)
To:       *Bug-Report (#544) and *Core-DB-Issues (#350)
Subject:  Shit. Fuck. Ownership YUCK.

Ok, I -think- I figured out what was wrong; I mucked up a verb on $wiz_utils
and it made all ownership changed a little yucki. Please, everybody, check her
ownership and your quota and report to me (private mail, please) anything you
see that's screwed up, please? I will fix shortly.
Briar

--------------------------


Message 151 on *Core-DB-Issues(#350):
Date:     Mon Mar 15 11:10:18 1993 EST
From:     Blackbriar (#110)
To:       BabyBriar (#2), *Bug-Report (#544), and *Core-DB-Issues (#350)
Subject:  Re: Shit. Fuck. Ownership YUCK.

Watch your language, Baby. And DEBUG DEBUG DEBUG DEBUG.

What happened is that all recycles -- which involve changing ownership of the
object to Hacker -- were being screwed up because Garbage objects are not
multiply owned EVER and the $wiz_utils verb which changes object ownership
assumed that the object might -want- to be multiply owned, so it set the
object's .owners prop to {}.  Oooops.

Shows ya how often I recycle stuff. <sigh>

Bb

--------------------------


Message 152 on *Core-DB-Issues(#350):
Date:     Mon Mar 15 12:11:51 1993 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Suggestion for $verb_editor

How about if the Verb Editor removed the date stamp from the end of the verb
when getting the code?  That way you wouldn't have to worry about having to
delete right at the beginning of an edit.

--------------------------


Message 153 on *Core-DB-Issues(#350):
Date:     Mon Mar 15 12:27:52 1993 EST
From:     Anne_Merkel (#114)
To:       BabyBriar (#2) and *Core-DB-Issues (#350)
Subject:  Re: NEW LOOK finally

I wonder how hard it would be to allow layered `look' commands like `look cat
in box under fridge through door' to look at a cat which is in a box which is
under the fridge which is through the door?
Possibly this could be done with some tricky `look' coding.  I'm not sure.

--------------------------


Message 154 on *Core-DB-Issues(#350):
Date:     Mon Mar 15 13:59:29 1993 EST
From:     Blade (#1108)
To:       *Theme-Issues (#120) and *Core-DB-Issues (#350)
Subject:  Money

There's been a lot of talk about coding a money system here.
Well, all I have to say is :Someone do it, damnit!
I dont have the skill to do it myself, so someone please be nice enough to
volunteer to do it.

Blade

--------------------------


Message 155 on *Core-DB-Issues(#350):
Date:     Mon Mar 15 16:30:50 1993 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Money

Okay, I'll design carriable, losable, transmittable, quantifiable money.  It's
going to need wizperms but I can do the prelims before getting it.
Once I have a quantifiable designed, I'll give an update.

--------------------------


Message 156 on *Core-DB-Issues(#350):
Date:     Tue Mar 16 10:06:16 1993 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Money-In-Progress

Well, I have a collective money object designed.  So far I can drop it, get
it, and give it but put/remove calls are going to fail.  I think I'm going to
have to use a $player:put/remove system to get that part working.
In any case, it's working out well so far.

--------------------------


Message 157 on *Core-DB-Issues(#350):
Date:     Tue Mar 16 13:46:58 1993 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Money Update

I currently have get, drop, give, put, and remove working properly for money.
Now we just have to work out the documentation.
... and my commission.

--------------------------


Message 158 on *Core-DB-Issues(#350):
Date:     Wed Mar 17 01:39:26 1993 EST
From:     Jack_Scratch (#398)
To:       *Core-DB-Issues (#350)
Subject:  Money

Sorry, Anne_Merkel, I didn't see your message here before I posted to *theme.
However, would you read through my last post on *theme and let me know what
you think of that idea?  It's probably easier to work with than actual money.
And more of a cyberpunk type feel, I think, also.
Besides, it'll give some people good ideas for real life.

--------------------------


Message 159 on *Core-DB-Issues(#350):
Date:     Wed Mar 17 01:53:22 1993 EST
From:     Blade (#1108)
To:       *Core-DB-Issues (#350)
Subject:  merging generics

If you find two generics on different branches of the inheritance tree, is it
possible and alright to merge them into a new generic?

Blade

--------------------------


Message 160 on *Core-DB-Issues(#350):
Date:     Wed Mar 17 15:54:14 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  $player:@peek

Installed from LambdaMOO.

--------------------------


Message 161 on *Core-DB-Issues(#350):
Date:     Wed Mar 17 22:01:46 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Ok, ok.

$feature.home has been added, so give your features homes. Or don't.

@add-feature now lists all known features if you give it without arguments.

Briar

--------------------------


Message 162 on *Core-DB-Issues(#350):
Date:     Thu Mar 18 00:04:17 1993 EST
From:     BabyBriar (#2)
To:       Blade (#1108) and *Core-DB-Issues (#350)
Subject:  Re: merging generics

Blade asks:

>  If you find two generics on different branches of the inheritance
>  tree, is it possible and alright to merge them into a new generic?

If there's a decent reason, sure. Just make sure it works.

--------------------------


Message 163 on *Core-DB-Issues(#350):
Date:     Thu Mar 18 12:06:05 1993 EST
From:     BabyBriar (#2)
To:       Anne_Merkel (#114), *Theme-Issues (#120), and *Core-DB-Issues (#350)
Subject:  Re: New MOOFtp Feature(#1755)

Anne Merkel asked:

>  Maybe the Feature Object Display Case should only :accept()
>  objects that actually have verbs on them.  It would be even nicer
>  if it required them to have documentation, too.

We now require that features have verbs. <grin> We do not require that those
verbs or those features be documented.
Briar

--------------------------


Message 164 on *Core-DB-Issues(#350):
Date:     Thu Mar 18 20:10:49 1993 EST
From:     Dagard (#636)
To:       *Core-DB-Issues (#350)
Subject:  request

Could some kind wizardly-type put a notifier of some sort on the end of @dump,
so that when it's finished @dump-ing, idiots like myself don't sit around
waiting for the dump to finish?
Dag

--------------------------


Message 165 on *Core-DB-Issues(#350):
Date:     Fri Mar 19 11:46:23 1993 EST
From:     Xiombarg (#360)
To:       *Core-DB-Issues (#350)
Subject:  BTW

Does a document on all the genders and their pronouns exist? What's the help
topic? I for one, found it annoying when I started MOOing to find that to find
out the Spivak pronouns one had to become a Spivak.
	     -Xi

--------------------------


Message 166 on *Core-DB-Issues(#350):
Date:     Fri Mar 19 21:23:14 1993 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Suggestion for $room:exits()

How about if the :exits() verb on $room automatically checked to make sure all
the exits/entrances (depending on which is being called) were really still
exits and had their .source/.dest properly set.  This would save the problems
caused when you use eval to change the alignment of an exit.
Using eval to change the .dest or .source of an exit does not remove the exit
from a room's .exits or .entrances list and, if you don't own the old room,
you can't fix it yourself.  True the room's owner can do it later but it would
be nice if it was self-maintaining.
Just a suggestion,
--Anne

--------------------------


Message 167 on *Core-DB-Issues(#350):
Date:     Sat Mar 20 12:09:02 1993 EST
From:     Greene (#485)
To:       *Core-DB-Issues (#350)
Subject:  Anne's Suggestion for $room:exits()

Hear hear!
Motion carried...?

--------------------------


Message 168 on *Core-DB-Issues(#350):
Date:     Sat Mar 20 16:14:50 1993 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Re: Suggestion for $room:exits()

A second thought on this subject:  Instead of the verb :exits() having the
requirements for a viable exit coded into it, have it call $room:exit_okay()
so that children can redefine the requirements as necessary.

--------------------------


Message 169 on *Core-DB-Issues(#350):
Date:     Sat Mar 20 19:44:12 1993 EST
From:     Sadric (#358)
To:       *Core-DB-Issues (#350)
Subject:  eval changes to .exits, .entrances

Let me just say a couple of things on this subject. It is never necessary to
use an eval to modify any of the .exits, .entrances, .source, or .dest
properties since verbs exist to do it all for you. It can be a pain, however,
to have to travel various places to do this, but it can be done.

The one problem I see is with $room:recycle. $exit:recycle removes the exit
from its source and destinations .exit and .entrances property, respectively.
$room:recycle, however, makes no attempt to modify the exit's .source or .dest
property. I think it would be a good idea to include something like the
following bit of code:

for (exit in (this.exits))
   exit.source = $exit.source;
   "$exit.source and .dest are both #-1";
endfor
for (entrance in (this.entrances))
   entrance = $exit.dest;
endfor

This should eliminate any instances of properties that are set to bogus
values.

--Sadric

--------------------------


Message 170 on *Core-DB-Issues(#350):
Date:     Sat Mar 20 23:24:02 1993 EST
From:     Anne_Merkel (#114)
To:       Sadric (#358) and *Core-DB-Issues (#350)
Subject:  Re: eval changes to .exits, .entrances

>  This should eliminate any instances of properties that are set to
>  bogus values.

Almost.  What happens when you use eval to change the .dest and .source of an
exit and then get the owner of the new locations to add them?  The exit is
still in the .exits and .entrances of the old locations and, if you don't own
those old locations, you're stuck.  And when you recycle the exit, it only
removes itself from the new lists while the old lists stay the same.  This was
the cause of the bad traceback reported in the Hotel.

--------------------------


Message 171 on *Core-DB-Issues(#350):
Date:     Sun Mar 21 04:38:11 1993 EST
From:     Praecox (#711)
To:       Xiombarg (#360) and *Core-DB-Issues (#350)
Subject:  Re: BTW

 [Xi quipped:]
>  Does a document on all the genders and their pronouns exist?
>  What's the help topic? I for one, found it annoying when I started
>  MOOing to find that to find out the Spivak pronouns one had to
>  become a Spivak.
"
In fact, it does.  Try LambdaCorePlayersManual (or something like that) on
parcftp.xerox.com, always a fun site.  Go go gophers, eh?

prae

--------------------------


Message 172 on *Core-DB-Issues(#350):
Date:     Sun Mar 21 04:50:26 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350)
Subject:  Re: eval changes to .exits, .entrances

>  Almost.  What happens when you use eval to change the .dest and
>  .source of an exit and then get the owner of the new locations to
>  add them?  The exit is still in the .exits and .entrances of the
>  old locations and, if you don't own those old locations, you're
>  stuck.  And when you recycle the exit, it only removes itself from
>  the new lists while the old lists stay the same.  This was the
>  cause of the bad traceback reported in the Hotel.

It seems to me that the weak link occurs through the use of eval to set the
.dest & .source .   I think would be better to have a way to @redig an exit,
and rid the knowledgable builder of the problem before it starts, instead of
during each :exits call on the room---which, unless I'm deluded, occurs fairly
often.  Add it to builder help.  Perhaps this verb already exists.  Anyhow,
the problem doesn't per se seem to be a permissions one, assuming that an
owner of an exit has the permission to change it's destination and the .exits
list on the destinee (the old room).  I think it should be soved on the
builder level...eval is a nasty hack and often has nasty consequences, and
requires care, no doubt about it...

--------------------------


Message 173 on *Core-DB-Issues(#350):
Date:     Mon Mar 22 15:54:40 1993 EST
From:     Praecox (#711)
To:       *Core-DB-Issues (#350)
Subject:  multiple ownership support in the core

I've noticed that @chmod and @chparent also don't support multiple
inheritance.  Should they?  I tend to think so, but then, it wouldn't be
unreasonable to put special multi-own verbs somewhere else (a fo), though, of
course, that involved twice as many wiz-dusted verbs.

prae (am I the only one actaually working on shared projects here?)

--------------------------


Message 174 on *Core-DB-Issues(#350):
Date:     Mon Mar 22 18:54:01 1993 EST
From:     Paris (#1444)
To:       *Core-DB-Issues (#350)
Subject:  Corporationms

Someone must remember Haakon's proposal about his ideas for multiple
ownership, which, basically, is a 'corporation'.  The 'corporation' is an
object which has quota, and a number of players are memebrs of the
'corporation'... I was just thinking that this corporation idea could be
implemented pretty easily using $ownership_utils, but I dunno if there's any
point... at least, since $ownership_utils is so heavily ingrained into the
core here.

The only advantage I can see to it is just for organizing objects into more
sensible project areas, and maybe a bit more security... ie. the object can
only be recycled if a majority of the members of the corporation agree. The
only quota hit would be the point required to 'incorporate' or create the
corporation object.

Anyways, is there any interest in looking into this a bit further ? Maybe it
could be made independent of the other core mods, so it would be possible to
port the generic corporation and ownership_utils back to another moo with a
less sophisticated core (ie. Lambda). Anyways, just some semi-random ideas on
the subject,

Paris. (NOTE : this isn't the same thing as the corporations Morpheus
mentioned on *theme, tho I think that sounds like a good idea)

--------------------------


Message 175 on *Core-DB-Issues(#350):
Date:     Tue Mar 23 01:36:49 1993 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Getting and Dropping

I just had an interesting idea.  Suppose you are holding an object called
`stick' and there is also a `stick' lying on the ground in front of you.
If you type `drop stick', obviously you mean the one you are holding.  If you
type `get stick', you surely wouldn't mean the one you already have.
As it is, `drop stick' would match correctly but `get stick' would wind up
matching the one you already have.  But that's silly.  When you're holding an
object and @exam it, `get this' doesn't even show up.
The strange and unintentional reason for this is the $room:here_huh() stuff
designed for verb-matching on exits.  Perhaps this should be re-written
somehow.
Originally I thought it would be enough to simply alter
$last_huh:get()/:drop() but it might be trickier than that.  One idea that
occurs to me is to have $room:here_huh() return 0 automatically if the
verb=="get" or "drop" and then change $last_huh:get()/:drop() to try to match
in the right location and then try to call the :get()/:drop() verb on the
object if present.  If not present, it would continue with its usual procedure
for non-$thing objects.
--- Anne

PS - Getting this solved would solve the last and final bug in $cash.  In
other words, there's money riding on this.

--------------------------


Message 176 on *Core-DB-Issues(#350):
Date:     Tue Mar 23 21:23:25 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  $ownership_utils:set_property_info()

I believe this verb is fixed; I took it a step further and modified
$prog:@chmod to handle it.
Briar

--------------------------


Message 177 on *Core-DB-Issues(#350):
Date:     Tue Mar 23 21:36:06 1993 EST
From:     BabyBriar (#2)
To:       Dagard (#636) and *Core-DB-Issues (#350)
Subject:  Re: request

Dagard asks:

>  Could some kind wizardly-type put a notifier of some sort on the
>  end of @dump, so that when it's finished @dump-ing, idiots like
>  myself don't sit around waiting for the dump to finish?

Done. Sorry for taking so long with this one.

Briar

--------------------------


Message 178 on *Core-DB-Issues(#350):
Date:     Tue Mar 23 21:54:40 1993 EST
From:     BabyBriar (#2)
To:       Xiombarg (#360) and *Core-DB-Issues (#350)
Subject:  Re: BTW

Xiombarg:

>  Does a document on all the genders and their pronouns exist?
>  What's the help topic? I for one, found it annoying when I started
>  MOOing to find that to find out the Spivak pronouns one had to
>  become a Spivak.

I have just installed `help gender' -- and a related verb on $gender_utils
($gender_utils:all_genders).
Briar

--------------------------


Message 179 on *Core-DB-Issues(#350):
Date:     Tue Mar 23 21:59:34 1993 EST
From:     BabyBriar (#2)
To:       Sadric (#358) and *Core-DB-Issues (#350)
Subject:  Re: eval changes to .exits, .entrances

Sadric says:

>  The one problem I see is with $room:recycle. $exit:recycle removes
>  the exit from its source and destinations .exit and .entrances
>  property, respectively. $room:recycle, however, makes no attempt
>  to modify the exit's .source or .dest property. I think it would
>  be a good idea to include something like the following bit of
>  code:

[code deleted]

I've installed something terribly similar into $room:recycle().

(I am also looking at verbs to change the .dest and .source properties on
exits.)

Briar

--------------------------


Message 180 on *Core-DB-Issues(#350):
Date:     Tue Mar 23 22:03:09 1993 EST
From:     BabyBriar (#2)
To:       Praecox (#711) and *Core-DB-Issues (#350)
Subject:  Re: multiple ownership support in the core

Praecox:

>  I've noticed that @chmod and @chparent also don't support multiple
>  inheritance.  Should they?  I tend to think so, but then, it
>  wouldn't be unreasonable to put special multi-own verbs somewhere
>  else (a fo), though, of course, that involved twice as many
>  wiz-dusted verbs.

@chparent supports multiple inheritance. As does, I believe, @chown.

Briar (catching up on her work)

--------------------------


Message 181 on *Core-DB-Issues(#350):
Date:     Tue Mar 23 22:46:46 1993 EST
From:     Sadric (#358)
To:       *Core-DB-Issues (#350)
Subject:  More on exits..

Anne brought up a very good point. Not so much in that using eval to set exits
will tend to let you mess them up, but that message made me take a look at
$room:@remove-exit. I see line 1 is set_task_perms(player). This is going to
cause a similar problem if you try to relocate an exit in that the owner of
the exit can't remove it from its old source or destination
($room:@remove-entrance). It would be trivial to remap the permissions
checking to take into account the owner of the exit as well as that of the
room. However, the set_task_perms would have to go, which might make things a
bit sticky.

Does BabyBriar want to make this change? Or do you want me to code it and than
copy it? or...?

-Sadric

--------------------------


Message 182 on *Core-DB-Issues(#350):
Date:     Tue Mar 23 22:52:51 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350), Anne_Merkel (#114), and Sadric (#358)
Subject:  Exits. What's to Come.

Ok. These are what's gonna happen with exits. As soon as I can get it all
working.

$exit.source and $exit.dest are gonna be !c, Hacker-owned. This way, the only
way you can set the source and destination of an exit will be to use
$exit:set_source and :set_dest. These two verbs will maintain the .exits and
.entrances lists of their relevant rooms (when you set the destination of an
exit, for example, it will clean up its old destination, if that's relevant).

There will be front-end verbs installed, something like:
  @link <exit> from <source>
  @link <exit> to <dest>
.. to allow builders to easily change the source and destination of their
exits.

I -may- make $room.exits and $room.entrances Hacker-owned and !c as well; I'm
not sure about this one. Given that we have support verbs for it already, I'd
be interested to see whether it'd matter.

(There are a few more technical notes involved with the changes to $exit which
aren't worked out yet. Hell, a lot of the notes haven't been worked out yet.
But they're gonna be on the way.)

Briar

--------------------------


Message 183 on *Core-DB-Issues(#350):
Date:     Wed Mar 24 10:11:08 1993 EST
From:     Blackbriar (#110)
To:       BabyBriar (#2), Praecox (#711), and *Core-DB-Issues (#350)
Subject:  Re: multiple ownership support in the core

That silly Baby wrote:

>  @chparent supports multiple inheritance. As does, I believe,
>  @chown.

Baby musta meant `multiple ownership'.

Bb

--------------------------


Message 184 on *Core-DB-Issues(#350):
Date:     Wed Mar 24 15:46:21 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  $site_db

I've removed the unprogrammed :cleanup verb from $site_db and moved its
documentation from the Wizard Help Index to the Core Utility Help Index. Not
that anyone can -use- it, but.

--------------------------


Message 185 on *Core-DB-Issues(#350):
Date:     Wed Mar 24 23:53:09 1993 EST
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Smarter Get/Drop/Give

Ambiguous matching for get/drop/give is, in my opinion silly.  If there is an
object called "stick" on the floor and I'm holding an object called "stick"
and then I type "drop stick", it seems that it should be obvious that I mean
the stick that I'm holding.
But the built-in parser winds up getting an ambiguous match.
If I type "get stick", I would assume that I'm referring to the stick on the
ground.
But the built-in parser winds up getting an ambiguous match.
And I certainly wouldn't try to give something to someone if I don't have that
something.
But the built-in parser winds up getting an ambiguous match.

I have coded up a version of $last_huh:get()/drop()/give() that would be able
to match things correctly.  It's bug-free.

I'm proposing a change to the Core here.  Can anyone see any objections to
get/drop/give with smarter matching when the match is ambiguous?

--------------------------


Message 186 on *Core-DB-Issues(#350):
Date:     Thu Mar 25 00:14:48 1993 EST
From:     JoeFeedback (#390)
To:       *Core-DB-Issues (#350)
Subject:  get/drop

Go go Anne, get that smart code installed.  Also, someone might want to check
out JH's $last_huh:get, which tries to be smart when confronted with
prepositions.

--------------------------


Message 187 on *Core-DB-Issues(#350):
Date:     Thu Mar 25 09:32:34 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  $letter:do_burn

. has been fixed, a la lambdamoo, so that it does, in fact, burn the object.
Briar

--------------------------


Message 188 on *Core-DB-Issues(#350):
Date:     Thu Mar 25 18:12:02 1993 EST
From:     BabyBriar (#2)
To:       Anne_Merkel (#114) and *Core-DB-Issues (#350)
Subject:  Re: Smarter Get/Drop/Give

Anne_Merkel's code has been installed.
Briar

--------------------------


Message 189 on *Core-DB-Issues(#350):
Date:     Thu Mar 25 18:25:54 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Heh.

Yucki bug in #1:eject fixed.

--------------------------


Message 190 on *Core-DB-Issues(#350):
Date:     Thu Mar 25 18:55:21 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  $ownership_utils:chparent()

. has been fixed, i hope.

--------------------------


Message 191 on *Core-DB-Issues(#350):
Date:     Thu Mar 25 19:18:41 1993 EST
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350)
Subject:  @classes

Does anyone have any objections to my killing and removing and stomping on the
@classes verb which I think quite totally sucks?
Bb

--------------------------


Message 192 on *Core-DB-Issues(#350):
Date:     Thu Mar 25 19:36:41 1993 EST
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350)
Subject:  Novice Flag

I'd been bouncing around some ideas for a 'novice' setting on new players.
Some random ideas that came to mind:

Novice players will get more verbose help when their commands aren't
understood.
Novice players will be encouraged, at connect time, to set description/gender
(if they're not yet set).
Novice players won't be made into builders (which is questionable) and won't
be made into programmers (which is not).
Novice players can set their -own- novice flag on or off.

Ideas? Comments?

Bb

--------------------------


Message 193 on *Core-DB-Issues(#350):
Date:     Thu Mar 25 22:56:09 1993 EST
From:     JoeFeedback (#390)
To:       Blackbriar (#110) and *Core-DB-Issues (#350)
Subject:  Re: Novice Flag

I don't have any great argument for this position, but I'd rather you phrased
this in terms of becoming an "expert user" than ceasing to be a "novice user".
I also suggest you use a child of $generic_options (preferrably $misc_options
and an option "expert_user", just for the sake of interface similarity with
JH) for whatever you decide to do.

In general I think it's a good idea.

--------------------------


Message 194 on *Core-DB-Issues(#350):
Date:     Thu Mar 25 23:13:50 1993 EST
From:     Anne_Merkel (#114)
To:       BabyBriar (#2) and *Core-DB-Issues (#350)
Subject:  Re: Smarter Get/Drop/Give

>  From:     BabyBriar (#2)
>  Subject:  Re: Smarter Get/Drop/Give
>
>  Anne_Merkel's code has been installed.

Unfortunately, the $last_huh:get() verb will not work until somewiz installs
the debugged version of $room:here_huh() still ready and waiting on
#377:here_huh().
---Anne

--------------------------


Message 195 on *Core-DB-Issues(#350):
Date:     Thu Mar 25 23:42:58 1993 EST
From:     BabyBriar (#2)
To:       Anne_Merkel (#114) and *Core-DB-Issues (#350)
Subject:  Re: Smarter Get/Drop/Give

Anne Merkel:

>  Unfortunately, the $last_huh:get() verb will not work until
>  somewiz installs the debugged version of $room:here_huh() still
>  ready and waiting on #377:here_huh().

Installed.

Briar

--------------------------


Message 196 on *Core-DB-Issues(#350):
Date:     Sat Mar 27 09:47:46 1993 EST
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350)
Subject:  Proposed Change: page

I want to modify the whole `page' command so that it works as such:

> page blackbriar Hey, I'm hungry.

. determine who the page is for.
. call that player's :receive_page verb

. that player's :receive_page verb delivers the page, or discards it, and
. :receive_page also sends the originating player either the page echo
       or the page absent message.

Does that make any sense?  I wanna move the heart of things into :receive_page
and out of $player:page.

Bb

--------------------------


Message 197 on *Core-DB-Issues(#350):
Date:     Sat Mar 27 16:24:13 1993 EST
From:     BabyBriar (#2)
To:       Blackbriar (#110) and *Core-DB-Issues (#350)
Subject:  Re: Proposed Change: page

I made the modification to page. Lemme know if there are any problems. In
short, both $player:page and the sadly undocumented $player:' so that when you
page someone, you call that person's :receive_page verb, which does all the
work.

The :receive_page delivers the page to the player, if connected, and delivers
the :page_echo_msg to the player sending the page. If not connected, it
delivers the :page_absent_msg.

So, for example, you could use your :receive_page to redirect your pages
elsewhere, or to handle them differently for different people. It presently
returns a 1 if the page is delivered and a 0 if not. This value is quite well
ignored.

Briar

--------------------------


Message 198 on *Core-DB-Issues(#350):
Date:     Sat Mar 27 16:50:33 1993 EST
From:     BabyBriar (#2)
To:       Praecox (#711) and *Core-DB-Issues (#350)
Subject:  $object_utils

The help on $object_utils has been updated.
Briar

--------------------------


Message 199 on *Core-DB-Issues(#350):
Date:     Sun Mar 28 19:16:31 1993 EST
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  $string_utils:shortest / longest

I've just installed a $string_utils:shortest/longest, taking in a list of
strings and returning the shortest/longest string from that list.
Briar

--------------------------


Message 200 on *Core-DB-Issues(#350):
Date:     Fri Apr  2 17:40:05 1993 EST
From:     Pandamonium (#685)
To:       *Bug-Report (#544) and *Core-DB-Issues (#350)
Subject:  Mr Spell!

okay. I know how icky cleanup stuff is, but since mr. spell was killed,
would it be possible to remove the help screen for spelling stuff?

Panda

--------------------------


Message 201 on *Core-DB-Issues(#350):
Date:     Mon Apr  5 16:10:36 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Feature Modification (slight)

I've modified $player:remove_feature to allow a feature to remove itself from
a player's .feature list. Correspondingly, I've added $feature:recycle which
will remove a recycled feature from everyone's .features list.
Briar

--------------------------


Message 202 on *Core-DB-Issues(#350):
Date:     Mon Apr  5 19:28:17 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  @recycle / @doomed / @unrecycle

I think I fixed the following bugs:
+ No warning given about recycling things you don't own (it now warns you it
may well not work).
+ Not being able to @unrecycle an object by number (you can, now).
+ @doomed output really fucked up sometimes (it isn't any more).
Briar

--------------------------


Message 203 on *Core-DB-Issues(#350):
Date:     Mon Apr  5 20:00:05 1993 EDT
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350)
Subject:  Proposed Change

I ask about this 'cause I want people besides me to look at it -- I want to
add a call in $guest:disfunc so that when a Guest disconnects, all eir active
sessions in the editors will dissolve into the mists. Specifically, I wanna
add a call like:

  for x in ($object_utils:descendents($generic_editor))
    x:kill_session(this);
  endfor;

Does this make sense to anyone?

Bb

--------------------------


Message 204 on *Core-DB-Issues(#350):
Date:     Mon Apr  5 20:43:06 1993 EDT
From:     Dagard (#636)
To:       *Core-DB-Issues (#350)
Subject:  proposed change

Makes sense to me, it'd probably be kind of confusing to have a guest
disconnect while sending mail, and have the next guest log on, try to send to
someone/something, and see that they were already working on a letter.
Dag

--------------------------


Message 205 on *Core-DB-Issues(#350):
Date:     Mon Apr  5 21:22:39 1993 EDT
From:     BabyBriar (#2)
To:       Blackbriar (#110) and *Core-DB-Issues (#350)
Subject:  Re: Proposed Change

>  I ask about this 'cause I want people besides me to look at it --
>  I want to add a call in $guest:disfunc so that when a Guest
>  disconnects, all eir active sessions in the editors will dissolve
>  into the mists. [...]

Installed -- I think it'll work ok.
Note to wizzes elsewhere who may port code: Grab the installed code on
$guest:disfunc. Don't use the bit of code posted here earlier; it won't work.
Briar

--------------------------


Message 206 on *Core-DB-Issues(#350):
Date:     Tue Apr  6 20:43:30 1993 EDT
From:     Blade (#1108)
To:       *Core-DB-Issues (#350)
Subject:  Just a detail...

I saw something on KnownSpaceMOO and I would encourage the powers that
be(Briar and Opal) to put it on here.
On KS, you can call $_utils with just the initials of it,
like: $su for $string_utils and $ou for object utils, etc.
I know this is just a very trival thing, but it makes things easier if you are
calling a number of different verbs from $_utils.

Blade

--------------------------


Message 207 on *Core-DB-Issues(#350):
Date:     Thu Apr  8 03:00:17 1993 EDT
From:     JoeFeedback (#390)
To:       Blade (#1108) and *Core-DB-Issues (#350)
Subject:  Re: Just a detail...

If you are calling a number of different verbs from $string_utils, set a
variable su = $string_utils.  This will save ticks and save portability.

--------------------------


Message 208 on *Core-DB-Issues(#350):
Date:     Thu Apr  8 12:00:59 1993 EDT
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350)
Subject:  @newt and co. rewritten

As posted in HUGE spammage on LambdaMOO's *Core-DB-Issues, I've rewritten all
the @newt-related verbs so that they work off of $login.newts as opposed to
placing a :confunc on the newted player.
This change will only affect wizards, but.
Bb

--------------------------


Message 209 on *Core-DB-Issues(#350):
Date:     Thu Apr  8 14:57:23 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  New help on $login.

I've just rewritten the help screen for $login.

--------------------------


Message 210 on *Core-DB-Issues(#350):
Date:     Mon Apr 12 23:34:26 1993 EDT
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Suggestions for Generic Gendered Object (#71)

The Generic Gendered Object is somewhat obsolete.  For example, it doesn't to
verb conjugation at all and only allows male, female, or neuter.  I suggest:

@program #71:set_gender
set_task_perms(caller_perms());
this.gender = typeof(result = $gender_utils:set(this, args[1])) == STR ?
result | args[1];
return result;

@verb #71:verb_sub this none this
@program #71:verb_sub
return $gender_utils:get_conj(args[1], this);

--------------------------


Message 211 on *Core-DB-Issues(#350):
Date:     Tue Apr 13 12:48:21 1993 EDT
From:     Dagard (#636)
To:       *Core-DB-Issues (#350)
Subject:  re: Generic Gendered Object

Er, It looks like (to me anyways) that just moving (read copying)
#6:set_gender over to the generic gendered object would work.
Just my $.02
Dag

--------------------------


Message 212 on *Core-DB-Issues(#350):
Date:     Tue Apr 13 14:52:18 1993 EDT
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350), Anne_Merkel (#114), and Dagard (#636)
Subject:  re: Generic Gendered Object

>  Er, It looks like (to me anyways) that just moving (read copying)
>  #6:set_gender over to the generic gendered object would work.

Hm. How about a little bit -more- hacking, and we make $player a child of the
Generic Gendered Object anyway?  Does anyone see anything wrong with -this-
suggestion?

Bb

--------------------------


Message 213 on *Core-DB-Issues(#350):
Date:     Tue Apr 13 16:41:00 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350), Anne_Merkel (#114), Dagard (#636), and Opal (#72)
Subject:  GENDER CHANGES

I've taken the bull by the horns and modified $player so it's a child of the
Generic Gendered Object (#71, one less than our beloved Opal). As a result of
this, the @gender command has undergone some changes (see `help @gender' for
details).

I think this has been done cleanly. Lemme know if there's something you'd like
to see changed.

Briar

--------------------------


Message 214 on *Core-DB-Issues(#350):
Date:     Tue Apr 13 20:50:21 1993 EDT
From:     Wilson (#738)
To:       *Core-DB-Issues (#350)
Subject:  $perm_utils:controls()

I propose to change $perm_utils/$ownership_utils:controls() to include
this.residents if this is a descendent of $room.

--------------------------


Message 215 on *Core-DB-Issues(#350):
Date:     Tue Apr 13 21:46:43 1993 EDT
From:     Blackbriar (#110)
To:       Wilson (#738) and *Core-DB-Issues (#350)
Subject:  Re: $perm_utils:controls()

Wilson suggests:

>  I propose to change $perm_utils/$ownership_utils:controls() to
>  include this.residents if this is a descendent of $room.

No. Just because a player is permitted to live in one of my rooms does not
mean that I want that player to be able to hack on it.
Bb

--------------------------


Message 216 on *Core-DB-Issues(#350):
Date:     Wed Apr 14 14:15:16 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  @transfer-quota fixed.

The annoying bug in @transfer-quota has been fixed. Not that any of y'all
noticed. :)
Essentially, if you transfer quota, the mail sent as a record is now from YOU
as opposed to from ME. Which is nice. :)
Briar

--------------------------


Message 217 on *Core-DB-Issues(#350):
Date:     Thu Apr 15 00:37:33 1993 EDT
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350)
Subject:  set_linelen/set_pagelen

added to $player

--------------------------


Message 218 on *Core-DB-Issues(#350):
Date:     Thu Apr 15 01:05:10 1993 EDT
From:     The_Blue_Wizard (#2037)
To:       *Core-DB-Issues (#350)
Subject:  $player:set_pagelen

The verb $player:set_pagelen bombs....verb[4..length(verb)] with verb ==
"set_pagelen" gives "_pagelen", not "pagelen"....also, the wizard should put
in the argument checks to match that found in @pagelength.  Ditto for
:set_linelen.           Cheers!     TBW

--------------------------


Message 219 on *Core-DB-Issues(#350):
Date:     Sun Apr 18 00:54:48 1993 EDT
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  .eval_time

I set my .eval_time property to on and now when I do:
;me
I get:
=> #114  (Anne_Merkel)
[used -2 ticks, 0 seconds.]

Why -2 ticks?

--------------------------


Message 220 on *Core-DB-Issues(#350):
Date:     Sun Apr 18 01:33:29 1993 EDT
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Future Task_perms

Is there a way to find out who owns a given verb before calling it?  I know
you can use verb_info() but that only works when the verb is readable.  Think
it should be possible to find out if you can trust a verb before you call it.

--------------------------


Message 221 on *Core-DB-Issues(#350):
Date:     Sun Apr 18 05:24:22 1993 EDT
From:     Praecox (#711)
To:       Anne_Merkel (#114) and *Core-DB-Issues (#350)
Subject:  Re: .eval_time

>  I set my .eval_time property to on and now when I do:
>  ;me
>  I get:
>  => #114  (Anne_Merkel)
>  [used -2 ticks, 0 seconds.]
>
>  Why -2 ticks?

| @d #114.eval_ticks
| ,eval_ticks              Anne_Merkel (#114)    r c    5

I'm not sure whether you were asking this question, or rather, why let the
number get below zero at all.  It doesn't seem to me that the negative number
is necessarily problematic at all.  Totally artificial anyways.  Well, kinda.
Not a big problem, anyway.

prae

--------------------------


Message 222 on *Core-DB-Issues(#350):
Date:     Sun Apr 18 14:01:36 1993 EDT
From:     JoeFeedback (#390)
To:       Anne_Merkel (#114) and *Core-DB-Issues (#350)
Subject:  Re: .eval_time

Programmers should use the @setenv command (or call :set_eval_env directly) to
set their .eval_env properties.  $prog:set_eval_env makes sure your .eval_env
will compile properly--a broken .eval_env is a pain--and sets your .eval_ticks
to the number of ticks .eval_env takes.

--------------------------


Message 223 on *Core-DB-Issues(#350):
Date:     Sun Apr 18 14:06:02 1993 EDT
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  .name and .aliases

Is it possible to make the .name and .aliases properties on an object !c on
objects other than $player?

--------------------------


Message 224 on *Core-DB-Issues(#350):
Date:     Sun Apr 18 15:25:16 1993 EDT
From:     Praecox (#711)
To:       Anne_Merkel (#114) and *Core-DB-Issues (#350)
Subject:  Re: .name and .aliases

Shouldn't all these questions be on *Q&A?

--------------------------


Message 225 on *Core-DB-Issues(#350):
Date:     Sun Apr 18 20:19:01 1993 EDT
From:     Blackbriar (#110)
To:       Anne_Merkel (#114) and *Core-DB-Issues (#350)
Subject:  Re: .name and .aliases

Anne Merkel:

>  Is it possible to make the .name and .aliases properties on an
>  object !c on objects other than $player?

The .name property isn't -really- a property in the same sense as most of the
others. It's one of the few server built-in properties, and it's always
'owned' by the owner of the object. The .aliases property is +c for most
purposes.

I'd recommend putting :set_name and :set_aliases verbs on the parent object;
that way you can control the names and aliases of your childrens' objects
without owning those properties.

Blackbriar

--------------------------


Message 226 on *Core-DB-Issues(#350):
Date:     Sun Apr 18 20:22:16 1993 EDT
From:     Blackbriar (#110)
To:       Anne_Merkel (#114) and *Core-DB-Issues (#350)
Subject:  Re: Future Task_perms

Anne Merkel:

>  Is there a way to find out who owns a given verb before calling
>  it?  I know you can use verb_info() but that only works when the
>  verb is readable.  Think it should be possible to find out if you
>  can trust a verb before you call it.

Does anyone see a good reason why there shouldn't be something like
  $object_utils:verb_owner(object, verb)
  => objnum of owner of verb, if it exists
  => E_VERBNF if no such verb
?

Bb

--------------------------


Message 227 on *Core-DB-Issues(#350):
Date:     Sun Apr 18 21:41:43 1993 EDT
From:     Anne_Merkel (#114)
To:       Praecox (#711) and *Core-DB-Issues (#350)
Subject:  Re: .name and .aliases

>  From:     Praecox (#711)
>  Shouldn't all these questions be on *Q&A?

You're right.  They should.  Unfortunately, I didn't realize that we had such
a group.  I guess I overlooked the announcement or forgot about it.  Thanks!

--------------------------


Message 228 on *Core-DB-Issues(#350):
Date:     Sun Apr 18 22:12:58 1993 EDT
From:     BabyBriar (#2)
To:       Anne_Merkel (#114) and *Core-DB-Issues (#350)
Subject:  Re: Future Task_perms

Blackbriar, for Anne Merkel:

>  Does anyone see a good reason why there shouldn't be something
>  like
>    $object_utils:verb_owner(object, verb)
>    => objnum of owner of verb, if it exists
>    => E_VERBNF if no such verb

Installed.

--------------------------


Message 229 on *Core-DB-Issues(#350):
Date:     Mon Apr 19 15:55:39 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  @transfer-quota

I made an eensy change to this command. No big deal.
Briar

--------------------------


Message 230 on *Core-DB-Issues(#350):
Date:     Mon Apr 19 15:56:16 1993 EDT
From:     Opal (#72)
To:       *Core-DB-Issues (#350)
Subject:  RE: eensy changes

What is the change, o'great one?
Opal

--------------------------


Message 231 on *Core-DB-Issues(#350):
Date:     Mon Apr 19 15:57:09 1993 EDT
From:     Blackbriar (#110)
To:       Opal (#72) and *Core-DB-Issues (#350)
Subject:  RE: eensy changes

>  What is the change, o'great one?
>  Opal

Eensy change: @transfer-quota <amount> to <player> [reason]
						   ^^^^^^^^
						   eensy teensy
Happy? Sheesh.
Bb

--------------------------


Message 232 on *Core-DB-Issues(#350):
Date:     Mon Apr 19 15:57:57 1993 EDT
From:     Opal (#72)
To:       *Core-DB-Issues (#350)
Subject:  Am I happy?

Yes

--------------------------


Message 233 on *Core-DB-Issues(#350):
Date:     Mon Apr 19 19:16:25 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350) and *Theme-Issues (#120)
Subject:  ANNOUNCED: A PUZZLE!

LET IT BE PROCLAIMED that as of this time, a PUZZLE has been introduced to
OpalMOO.

There is a security hole in the OpalMOO database which allows one to gain
unlimited quota. A prize is offered -- one hundred quota -- to the first
player to identify this hole, specifically, through mail to the *Wizard-List
group. (Mail to a wizard specifically, and/or conversations with wizards, do
NOT count.)

This is a known hole. It is being left unpatched for purposes of this contest.
(Extra quota for someone who finds a -different- hole!)

Wizards and their other incarnations are not elegible. Nor are players who
already know about it. Good luck!

Baby Briar, on behalf of herself and Opal

--------------------------


Message 234 on *Core-DB-Issues(#350):
Date:     Mon Apr 19 21:27:30 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Latest $mail_recipient

I just installed the latest version of the $mail_recipient code from
LambdaMOO. This closes up a few security holes (e.g. being able to renumber
messages on lists you don't control), and introduces a property .rmm_own_msgs
which a list owner may set to allow a player to remove eir own mail from
lists.

Report bugs to me.

Briar

--------------------------


Message 235 on *Core-DB-Issues(#350):
Date:     Tue Apr 20 06:07:04 1993 EDT
From:     Praecox (#711)
To:       *Core-DB-Issues (#350)
Subject:  $player:@mess

I think that $player:@mess should aviod printing out the .help_msg property,
even if it is !r.  I know that one can just change the readability of the prop
and prevent it from being shown, but that seems against a lotta the idea of
help (though, sure, it still works)....plus it's another thing to remember ;)

prae

--------------------------


Message 236 on *Core-DB-Issues(#350):
Date:     Tue Apr 20 10:07:55 1993 EDT
From:     Blackbriar (#110)
To:       Praecox (#711) and *Core-DB-Issues (#350)
Subject:  Re: $player:@mess

Praecox:

>  I think that $player:@mess should aviod printing out the .help_msg
>  property, even if it is !r.  I know that one can just change the
>  readability of the prop and prevent it from being shown, but that
>  seems against a lotta the idea of help (though, sure, it still
>  works)....plus it's another thing to remember ;)

Are you asking -- I just wanna be clear -- that the @messages command filter
out .help_msg before displaying the messages? I'm not sure I like this idea,
but I see it could cut down on spammage. (Then again, try a @messages on #2
and get really spammed.)

Comments?

Bb

--------------------------


Message 237 on *Core-DB-Issues(#350):
Date:     Tue Apr 20 12:13:14 1993 EDT
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350) and *Theme-Issues (#120)
Subject:  Re: ANNOUNCED: A PUZZLE!

HINTS ON THE PUZZLE:
--------------------

The hole you are looking for does NOT require that you do anything destructive
to yourself or anyone else. You do not, for example, have to @chparent
yourself out of the $player heirarchy (for that is a known hole which, in
addition to gaining unlimited quota for yourself, also makes you unable to log
on to the MOO ever again.)

Just a bit of clarification.

Blackbriar

--------------------------


Message 238 on *Core-DB-Issues(#350):
Date:     Tue Apr 20 14:52:05 1993 EDT
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350)
Subject:  Modifications to Exits

I've just finished making some changes to $exit and added some support
elsewhere. Here is a summary of the changes made:

The .source and .dest properties on $exit are now !c properties owned by
Hacker. This means that these properties may no longer be changed directly by
players. In order to change the source or destination of an exit, call the
exit's :set_source or :set_dest verb, passing it the room you want to link to.
The verb will return one of the following values:
  => the room you pass it, if all goes well and the exit is linked
  => E_NACC if the property's value is changed, but the new link is not
permitted (for example, if the new room is not owned by you).
  => E_PERM if your permissions do not allow you to change the property value
anyway
  => $nothing if you try to link to a bogus locale
This change was made to maintain consistency. When you change the source or
destination of the exit, its -old- source and destination are informed, so
they stop thinking that the exit is still attached.

In a similar vein, $room.exits and $room.entrances were modified to be owned
by Hacker; the support verbs on $room (:add_exit & co.) have been modified to
support this change.

Two support verbs have been added to $exit: source_linked and dest_linked will
return a true value if the source or destination (respectively) is properly
linked, a false value otherwise.

A verb on $wiz_utils has been added: $wiz_utils:fix_exits, which spams the DB,
touching all exits and all rooms and making sure they are all properly in
sync. (This one is of no practical use to most players.)

A verb on $builder has been added: @link. The basic syntax for this verb is:
  @link <exit> from <new source>
  @link <exit> to <new destination>
.. and it serves as a friendly front-end to :set_source and :set_dest. Once
again, it will deliver error messages if the link was not completed.

I hope this all worked. I really do. :) Let me know if it didn't.

Blackbriar

--------------------------


Message 239 on *Core-DB-Issues(#350):
Date:     Tue Apr 20 15:23:52 1993 EDT
From:     Anne_Merkel (#114)
To:       Blackbriar (#110), Praecox (#711), and *Core-DB-Issues (#350)
Subject:  Re: $player:@mess

Perhaps @mess should only print the first two screen lines worth of output.
If the value is longer than that, it can just append the truncated display
with a couple of dots (. . .) to indicate that there's more.

--------------------------


Message 240 on *Core-DB-Issues(#350):
Date:     Tue Apr 20 15:26:17 1993 EDT
From:     Anne_Merkel (#114)
To:       Blackbriar (#110) and *Core-DB-Issues (#350)
Subject:  Re: Modifications to Exits

How about changing the verbname to @link-exit instead of just @link.  @link is
a pretty generic term which might be useful in other places.

--------------------------


Message 241 on *Core-DB-Issues(#350):
Date:     Tue Apr 20 16:03:58 1993 EDT
From:     BabyBriar (#2)
To:       Anne_Merkel (#114), Praecox (#711), and *Core-DB-Issues (#350)
Subject:  Re: $player:@mess

Anne Merkel suggests an alternate solution:

>  Perhaps @mess should only print the first two screen lines worth
>  of output.  If the value is longer than that, it can just append
>  the truncated display with a couple of dots (. . .) to indicate
>  that there's more.

$player:@messages now will only print up to fifteen lines of output per
message. Any more will get a buncha ellipses at the end.

Briar

--------------------------


Message 242 on *Core-DB-Issues(#350):
Date:     Tue Apr 20 19:26:17 1993 EDT
From:     BabyBriar (#2)
To:       The_Blue_Wizard (#2037) and *Core-DB-Issues (#350)
Subject:  Re: $player:set_pagelen

The Blue Wizard:

> The verb $player:set_pagelen bombs....verb[4..length(verb)] with
> verb == "set_pagelen" gives "_pagelen", not "pagelen"....also,
> the wizard should put in the argument checks to match that found
> in @pagelength.  Ditto for :set_linelen.           Cheers!
> TBW

Both fixed.

Briar

--------------------------


Message 243 on *Core-DB-Issues(#350):
Date:     Tue Apr 20 19:28:52 1993 EDT
From:     BabyBriar (#2)
To:       Anne_Merkel (#114) and *Core-DB-Issues (#350)
Subject:  Re: Modifications to Exits

Anne Merkel:

>  How about changing the verbname to @link-exit instead of just
>  @link.  @link is a pretty generic term which might be useful in
>  other places.

Done. Good idea.

Briar

--------------------------


Message 244 on *Core-DB-Issues(#350):
Date:     Wed Apr 21 13:36:39 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350) and *Wizard-List (#141)
Subject:  Addition to $wiz.

I've just added the @newts command to the generic wizard; this delivers brief
information on all current newts. I've also updated the help screen for @newt,
and added a help screen for @newts.

None of this information matters to non-wizards.

Briar

--------------------------


Message 245 on *Core-DB-Issues(#350):
Date:     Fri Apr 23 12:30:09 1993 EDT
From:     BabyBriar (#2)
To:       Praecox (#711), *Wizard-List (#141), and *Core-DB-Issues (#350)
Subject:  Re: $ownership_utils help -- yay!

Thank you, Praecox. I've installed the new $ownership_utils help information.

Briar

--------------------------


Message 246 on *Core-DB-Issues(#350):
Date:     Fri Apr 23 12:33:45 1993 EDT
From:     BabyBriar (#2)
To:       Praecox (#711), *Wizard-List (#141), and *Core-DB-Issues (#350)
Subject:  Re: @copy bug fix

>  Date:     Thu Apr 22 17:45:24 1993 EDT
>  From:     Praecox (#711)
>  To:       *Wizard-List (#141)
>  Subject:  @copy bug fix
>
>  You should core the new code.  If you lost the listing, you can
>  get if from #711:@copy...

I think this is installed. I think this works. I'm not sure -- bug reports?

Briar

--------------------------


Message 247 on *Core-DB-Issues(#350):
Date:     Fri Apr 23 18:00:14 1993 EDT
From:     BabyBriar (#2)
To:       Dagard (#636) and *Core-DB-Issues (#350)
Subject:  Old Job Fixed (?)...

Check out $player:tell_contents, courtesy of Dagard. One can change the way
one's inventory appears to the casual observer now.
Briar

--------------------------


Message 248 on *Core-DB-Issues(#350):
Date:     Sun Apr 25 18:28:08 1993 EDT
From:     Profane (#603)
To:       *Core-DB-Issues (#350)
Subject:  Parsing, Prepositions, and You

Whilst playing with various things, most notably the ''layered look'' thingy
(which some kind wiz has yet to install) I was struck by a thought:
Preposition parsing is backwards.
Ya see, currently a sentance like ''get crucible from oven with tongs'' will
end up with verb ''get'', dobjstr ''crucible'', prepstr ''from'', and
iobjstr ''oven with tongs''. So we have to write a funky get verb on the
crucible. But, if it's in the oven, well, it won't match while we're outside
the oven. What a headache!
Why does this happen? Because the parser matches the _leftmost_ preposition.
I think it would make more sense to match the _rightmost_ preposition.
In the above example we would then get verb ''get'', dobjstr
''crucible from oven'', preposition ''with'', and iobjstr ''tongs''.
Now we write our get verb on the tongs, which we'll be carrying so it'll
match. What do we do with the ''crucible from oven'' part? Well we set up
our ''get'' verb to handle it.
With the layered look, I set up it up so rooms would (with a roundabout way)
match the rightmost preposition and call the resulting iobj (in our example,
the tongs) with the dobjstr (''crucible from oven''). The iobj would then
break down the dobjstr to its parts (we get dobjstr ''crucible'', prep
''from'' and iobjstr ''oven'') and then call _that_ iobj (''oven'') with
the remainder (''crucible''), etc.
This means you've called each object involved in the process once, which lets
you put various conditions on various actions on the objects they belong.
Instead of having the oven check to see if what was being taken is being taken
with the tongs, we have the tongs _doing_ the taking.
Of course, changing to all this would require changes in the server, so I
don't expect to see it. I think it would make more sense. What do you all
think? Did I even make myself clear?
To sum up: have the parser match the _rightmost_ prep, not the _leftmost_.

-Profane

--------------------------


Message 249 on *Core-DB-Issues(#350):
Date:     Sun Apr 25 18:30:06 1993 EDT
From:     BabyBriar (#2)
To:       Profane (#603) and *Core-DB-Issues (#350)
Subject:  Re: Parsing, Prepositions, and You

Profane asks if we can make the parser use the -rightmost- preposition as
opposed to the -leftmost- one. Unfortunately, the only way we can do this is
by hacking the server itself, and that's something I have been avoiding doing
(mainly because I haven't the slightest idea what's going on in the server).
Briar

--------------------------


Message 250 on *Core-DB-Issues(#350):
Date:     Sun Apr 25 18:46:14 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Minor change to @transfer-quota

I modified @transfer-quota so you can't transfer quota to yourself (because
that's a pretty silly thing to do anyway).
Briar

--------------------------


Message 251 on *Core-DB-Issues(#350):
Date:     Mon Apr 26 18:32:24 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Minor change to $player:disfunc

The .responsible property is cleared at disconnect now.
Briar

--------------------------


Message 252 on *Core-DB-Issues(#350):
Date:     Tue Apr 27 10:31:45 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  $container:open

1. Small permissions change made to $container:open
2. You gotta have a container to open it now
Briar

--------------------------


Message 253 on *Core-DB-Issues(#350):
Date:     Tue Apr 27 16:01:00 1993 EDT
From:     Sadric (#358)
To:       *Core-DB-Issues (#350)
Subject:  RE: $container:open

I object to this. What if someone makes something like a mailbox or other
large container. Or say a backpack? You CAN'T have these things to open them.
Its just not feasible. I think the optiuon ought to be programmed in and left
to the owner to decide.

--Sadric

--------------------------


Message 254 on *Core-DB-Issues(#350):
Date:     Tue Apr 27 16:01:58 1993 EDT
From:     Blackbriar (#110)
To:       Sadric (#358) and *Core-DB-Issues (#350)
Subject:  RE: $container:open

Sadric sez:

>  I object to this. What if someone makes something like a mailbox
>  or other large container. Or say a backpack? You CAN'T have these
>  things to open them. Its just not feasible. I think the optiuon
>  ought to be programmed in and left to the owner to decide.

I should have been more clear. Specifically, you wither have to have a
container or be in the room with the container in order to open it. Is this
still objecitonable? I can take it right back out.

Bb

--------------------------


Message 255 on *Core-DB-Issues(#350):
Date:     Wed Apr 28 17:47:27 1993 EDT
From:     Sadric (#358)
To:       *Core-DB-Issues (#350)
Subject:  Ahhh...

So thats what you meant.. I thought this limitation was already in place. Hmm.
Usefull.

--------------------------


Message 256 on *Core-DB-Issues(#350):
Date:     Wed Apr 28 21:48:46 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Bug Patches

I've just made small changes to
  $recycler:setup_toad
  $login:connect
  $player:@password
to close up a security hole I discovered earlier this week.

BTW, this is -not- the hole mentioned in the contest. Natch.

Briar

--------------------------


Message 257 on *Core-DB-Issues(#350):
Date:     Wed Apr 28 22:02:18 1993 EDT
From:     BabyBriar (#2)
To:       Alea (#756) and *Core-DB-Issues (#350)
Subject:  Ok, it's not a core issue...

But I modified the generic detailed room so that you can edit your noises in
the note editor. There.

--------------------------


Message 258 on *Core-DB-Issues(#350):
Date:     Thu Apr 29 13:00:36 1993 EDT
From:     Blackbriar (#110)
To:       *Core-DB-Issues (#350)
Subject:  Updated help on `page'.

I updated help on 'page'.

--------------------------


Message 259 on *Core-DB-Issues(#350):
Date:     Thu Apr 29 19:08:18 1993 EDT
From:     Edison_Carter (#200)
To:       *Wizard-List (#141) and *Core-DB-Issues (#350)
Subject:  First Official Act: $player:@traceback

I have just installed a new verb on $player called @traceback.  This is a
handy little verb that allows you to find the full traceback of callers for
heard text.  It uses the same access as @check so it requires that you have
@paranoid switched on before hearing the text.  For more details, see `help
@traceback'.

--- Edison

--------------------------


Message 260 on *Core-DB-Issues(#350):
Date:     Thu Apr 29 22:16:33 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Minor bug fix: $ownership_utils:delete_owner

I've fixed $ownership_utils:delete_owner so that if you are the real owner of
an object, and you are removed from the .owners list, the object does -not-
remove itself from your .owned_objects list.
Briar

--------------------------


Message 261 on *Core-DB-Issues(#350):
Date:     Sat May  1 06:02:35 1993 EDT
From:     Edison_Carter (#200)
To:       *Core-DB-Issues (#350) and *Wizard-List (#141)
Subject:  $Player:@Traceback now works with any Linelength

I jiggled the code around a bit so that it now works with any linelength.
Well, actually, if you use a linelength less than 28, you won't be able to
read object numbers greater than #999 but I don't think many people use that
short a linelength.
In any case, it did cost a little bit in ticks but not much.  I also added a
suspend_if_needed(3) between each listing matched to be on the safe side.
It still uses player:notify() so pagelength will work and linelength is taken
into consideration when generating the chart so it won't wrap funny.

--- Edison

--------------------------


Message 262 on *Core-DB-Issues(#350):
Date:     Tue May  4 10:56:56 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  Minor changes:

Added $mail_agent:is_recipient
... and @rn
... from LambdaMOO.

--------------------------


Message 263 on *Core-DB-Issues(#350):
Date:     Tue May  4 22:26:09 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350) and *Wizard-List (#141)
Subject:  IMPORTANT SERVER MODIFICATIONS

I have just modified the server so that the following three functions are no
longer available to non-wizards:
  create()
  recycle()
  chparent()

The core will be modified to take into account these changes, but for now be
warned that attempts to build will not be successful. I hope to make these
changes later tonight or tomorrow.

Ask me later why I did this.

Briar

--------------------------


Message 264 on *Core-DB-Issues(#350):
Date:     Tue May  4 23:44:53 1993 EDT
From:     Porcupine (#807)
To:       *Core-DB-Issues (#350)
Subject:  Suggestion: make .contents unreadable except by wizards

If this is at all possible, I suggest making .contents (and .location?)
unreadable to everyone except a wizard.  This would make sure :contents() is
used more often.

--------------------------


Message 265 on *Core-DB-Issues(#350):
Date:     Wed May  5 00:09:00 1993 EDT
From:     Porcupine (#807)
To:       *Core-DB-Issues (#350)
Subject:  create() and +f

If create() has been made wiz-only, would it not be logical to remove the "f"
bit from the server?

Also, recycle() need no longer check ownership permissions.

--------------------------


Message 266 on *Core-DB-Issues(#350):
Date:     Wed May  5 13:58:59 1993 EDT
From:     Blackbriar (#110)
To:       Porcupine (#807) and *Core-DB-Issues (#350)
Subject:  Re: create() and +f

Porcupine:

> If create() has been made wiz-only, would it not be
> logical to remove the "f" bit from the server?

No -- the reason create() and chparent() are wizonly is only so we can enforce
usage of an in-DB version of them -- more details once I've got them ready.

> Also, recycle() need no longer check ownership permissions.

It will.

Blackbriar

--------------------------


Message 267 on *Core-DB-Issues(#350):
Date:     Wed May  5 19:39:16 1993 EDT
From:     JoeFeedback (#390)
To:       Blackbriar (#110), Porcupine (#807), and *Core-DB-Issues (#350)
Subject:  Re: create() and +f

>  No -- the reason create() and chparent() are wizonly is only so we
>  can enforce usage of an in-DB version of them -- more details once
>  I've got them ready.

Could you maybe give us a hint?

--------------------------


Message 268 on *Core-DB-Issues(#350):
Date:     Thu May  6 02:20:56 1993 EDT
From:     Edison_Carter (#200)
To:       *Core-DB-Issues (#350) and *Wizard-List (#141)
Subject:  $player:@Rooms Stuff Now Added

I have added @rooms/@addroom/@rmroom/lookup_room to $player since I feel that
this sort of data would be best stored on a central location.
The functions are simple:
Usage: @Rooms
Displays your stored list of rooms.

@AddRoom [<any>] as <name> - Store a room in your @Rooms list.  <any> may be
an object number or `here'.  It defaults to `here'.

@RmRoom <name> - Remove room from @Rooms list.  <Name> is names as listed in
@Rooms.

$player:lookup_room(string) => Returns room object number matching `string',
$failed_match or $ambiguous_match as appropriate.

Additionally, I copied all the rooms-lists for each player from the
Teleportation Feature (#151) and the barely used @Rooms Feature (#1958) to the
players themselves.  Now, when a program needs to match a string with a
room-object, it can simply call the player's :lookup_room() with the string
and get an object back.

-- Edison

--------------------------


Message 269 on *Core-DB-Issues(#350):
Date:     Thu May  6 12:33:43 1993 EDT
From:     Blackbriar (#110)
To:       JoeFeedback (#390), Porcupine (#807), and *Core-DB-Issues (#350)
Subject:  Re: create() and +f

JoeFeedback (quoting me):

>  >  No -- the reason create() and chparent() are wizonly is only so we
>  >  can enforce usage of an in-DB version of them -- more details once
>  >  I've got them ready.

>  Could you maybe give us a hint?

This is a pretty good question. Ok, here's the scoop.

I am making create() and chparent() and recycle() wizonly so that players are
required to use the in-DB versions of them to manipulate the parentage
heirarchy in any way. Specifically, I am implementing a variant of Rog's
MOO-Cows proposal (Sep 10 1992) which details hooks (a la :initialize and
:recycle) for parent changing.

Blackbriar

--------------------------


Message 270 on *Core-DB-Issues(#350):
Date:     Thu May  6 13:45:31 1993 EDT
From:     Lyssa (#1280)
To:       Blackbriar (#110), Jander (#2093), and *Core-DB-Issues (#350)
Subject:  changes

OK, for the sake of us who have no idea what you are talking about, how is
this change going to affect us casual creators?

--------------------------


Message 271 on *Core-DB-Issues(#350):
Date:     Thu May  6 20:38:05 1993 EDT
From:     Sadric (#358)
To:       *Core-DB-Issues (#350)
Subject:  RE: changes

It ain't. Just like $recycler:_recycler and $recycler:_create, you'll just be
using a DB verb to do the creating so that certain things are gaurenteed to
happen in addition to what the server requires. However, I don't know where
chparent will be located so ask Bb about that.

--------------------------


Message 272 on *Core-DB-Issues(#350):
Date:     Thu May  6 23:10:19 1993 EDT
From:     The_Blue_Wizard (#2037)
To:       *Core-DB-Issues (#350)
Subject:  Re: change

One may assume the logical in-DB version of chparent() would be on
$object_utils.....right, Bb?         Cheers!      TBW

--------------------------


Message 273 on *Core-DB-Issues(#350):
Date:     Thu May  6 23:42:45 1993 EDT
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Chparent()

I like the idea of including a hook for chparent but it should be different
than intialize.  I would suggest a verb called :chparent_initialize() which is
only called when chparenting to an object not already in the object's
heriarchy.  However, letting the verb pass(@args) could be disastrous so it
may be necessary for the system to chparent up one step at a time, calling the
verb, then chaparenting again to the next parent until we reach the target
parent.

--------------------------


Message 274 on *Core-DB-Issues(#350):
Date:     Thu May  6 23:48:11 1993 EDT
From:     Blackbriar (#110)
To:       The_Blue_Wizard (#2037) and *Core-DB-Issues (#350)
Subject:  Re: change

The Blue Wizard:

>  One may assume the logical in-DB version of chparent() would be on
>  $object_utils.....right, Bb?         Cheers!      TBW

Nope. $perm_utils == $ownership_utils. But it's not finished yet, so nyah.

Bb

--------------------------


Message 275 on *Core-DB-Issues(#350):
Date:     Fri May  7 00:24:16 1993 EDT
From:     Anne_Merkel (#114)
To:       Blackbriar (#110), The_Blue_Wizard (#2037), and *Core-DB-Issues (#350)
Subject:  Re: change

>  The Blue Wizard:
>
>  >  One may assume the logical in-DB version of chparent() would be
>  on
>  >  $object_utils.....right, Bb?         Cheers!      TBW
>
>  Nope. $perm_utils == $ownership_utils. But it's not finished yet,
>  so nyah.

Why not the underused $building_utils?  This maybe a good way to flesh that
utility out.

--------------------------


Message 276 on *Core-DB-Issues(#350):
Date:     Fri May  7 12:40:02 1993 EDT
From:     Blackbriar (#110)
To:       Anne_Merkel (#114), The_Blue_Wizard (#2037), and *Core-DB-Issues (#350)
Subject:  Re: change

Anne Merkel proposes, for the impending utilities:

>  Why not the underused $building_utils?  This maybe a good way to
>  flesh that utility out.

Hm. Actually, I think sometime soon would be a generally good time to shift
around some of the messed-up $_utils stuff. For example, there're some verbs
on $wiz_utils that might as well go on $object_utils, and so forth.

I'm not volunteering. :)

Bb

--------------------------


Message 277 on *Core-DB-Issues(#350):
Date:     Fri May  7 14:11:03 1993 EDT
From:     Hemlock (#1989)
To:       *Core-DB-Issues (#350)

First _utils switch:  @copy $string_utils:match_player to $match_utils.
*haha*

--------------------------


Message 278 on *Core-DB-Issues(#350):
Date:     Fri May  7 15:19:13 1993 EDT
From:     Blackbriar (#110)
To:       Hemlock (#1989) and *Core-DB-Issues (#350)

Hemlock:

>  First _utils switch:  @copy $string_utils:match_player to
>  $match_utils.  *haha*

Ya know, this would be a totally cool idea, actually.
(And the more changes we make to OpalCore, the better 'cause people won't be
able to randomly mindlessly inanely port gibberish from LambdaMOO, and the
people who wanna port cool things will be clueful, etc.)

Blackbriar, supporting ideas he's not gonna implement

--------------------------


Message 279 on *Core-DB-Issues(#350):
Date:     Fri May  7 19:04:02 1993 EDT
From:     JoeFeedback (#390)
To:       *Core-DB-Issues (#350)

Why $perm_utils or $ownership_utils for the in-db chparent?  What does it have
to do with permissions or ownership?

--------------------------


Message 280 on *Core-DB-Issues(#350):
Date:     Sat May  8 00:39:26 1993 EDT
From:     Rog (#737)
To:       Hemlock (#1989) and *Core-DB-Issues (#350)

>  First _utils switch:  @copy $string_utils:match_player to $match_utils.
*haha*

actually, this was indeed something I had wanted to do on Lambda (i.e., either
blow away $match_utils or update it and move *all* of the matching verbs
there).  It's basically a bunch of old G7 matching routines, but since (on
Lambda at least) there were lots of RPG and other things depending on it
(surprise) and one can't really *remove* verbs from core without lots of
people screaming bloody murder, my hands were tied --- the joys of backwards
compatibility.  As it happens, none of the other core routines depend on it,
so if you haven't ported over the G7/Gemba RPG system, it's (probably) safe to
remove $match_utils (i.e., what's currently there) and/or use it for something
else --- you might want to do some @greps to be sure, though...

If I had it to do over again, I'd probably choose a name like $match:player
and completely forbid the use of the name "_utils", but never mind...

Note that if you are going to shuffle verbs, it might not be a bad idea for
someone to keep a list of correspondences, just so that the poor sod who's
trying to port something over from Lambda isn't *completely* at sea...

--------------------------


Message 281 on *Core-DB-Issues(#350):
Date:     Sat May  8 11:56:23 1993 EDT
From:     Hemlock (#1989)
To:       *Core-DB-Issues (#350)
Subject:  @copy $string_utils:match_player to $match_utils

Well, I meant the change seriously.  It's just a really big one-- requiring a
lot of :grep_and_replace action.

--------------------------


Message 282 on *Core-DB-Issues(#350):
Date:     Sat May  8 16:00:25 1993 EDT
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  $object_utils:verb_or_property() ?

Didn't there used to be $object_utils:verb_or_property()?  Was it moved to a
different utility or jusr plain removed?

--------------------------


Message 283 on *Core-DB-Issues(#350):
Date:     Sat May  8 16:01:10 1993 EDT
From:     JoeFeedback (#390)
To:       *Core-DB-Issues (#350)

$code_utils:verb_or_property, I think.

--------------------------


Message 284 on *Core-DB-Issues(#350):
Date:     Sun May  9 21:53:56 1993 EDT
From:     Blackbriar (#110)
To:       Hemlock (#1989) and *Core-DB-Issues (#350)
Subject:  Re: @copy $string_utils:match_player to $match_utils

Hemlock:

>  Well, I meant the change seriously.  It's just a really big one--
>  requiring a lot of :grep_and_replace action.

It's actually half-done. $string_utils:match_player points directly (and
trivially) to the $match_utils verb of the same name; I am replacing core
verbs to use the new location.

Blackbriar

--------------------------


Message 285 on *Core-DB-Issues(#350):
Date:     Sun May  9 22:38:51 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  $match_utils modifications.

$match_utils:match_exit -- with an appropriate change made to
$room:match_exit.
$match_utils:player_match -- with an appropriate change made to
$string_utils:player_match.

. anything else?
Briar

--------------------------


Message 286 on *Core-DB-Issues(#350):
Date:     Sun May  9 23:37:31 1993 EDT
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Create, Recycle, Chparent?

Are they working now or is it still in progress?

--------------------------


Message 287 on *Core-DB-Issues(#350):
Date:     Sun May  9 23:39:58 1993 EDT
From:     Blackbriar (#110)
To:       Anne_Merkel (#114) and *Core-DB-Issues (#350)
Subject:  Re: Create, Recycle, Chparent?

>  Date:     Sun May  9 23:37:31 1993 EDT
>  From:     Anne_Merkel (#114)
>  To:       *Core-DB-Issues (#350)
>  Subject:  Create, Recycle, Chparent?
>
>  Are they working now or is it still in progress?

They're `working' now, in the old familiar way.
It's `still in progress' in that the new versions are still being debugged
(and, in some cases, written).

Bb

--------------------------


Message 288 on *Core-DB-Issues(#350):
Date:     Mon May 10 07:36:13 1993 EDT
From:     Jordan (#830)
To:       *Core-DB-Issues (#350)
Subject:  Match result stuff...

I think the match result/fail stuff oughta be on $match_utils also, and I
think someone oughta the ordinal matching stuff in $match_utils too. :)

-C.

--------------------------


Message 289 on *Core-DB-Issues(#350):
Date:     Mon May 10 10:44:20 1993 EDT
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  Re: Match result stuff...

>  From:     Jordan (#830)
>  I think the match result/fail stuff oughta be on $match_utils

But the match result doesn't actually do matching.  It just displays
information about matches.  That would be like putting
$string_utils:english_ordinal() onto $math_utils.

>  think someone oughta the ordinal matching stuff in $match_utils

What ordinal matching stuff?

--------------------------


Message 290 on *Core-DB-Issues(#350):
Date:     Mon May 10 10:45:53 1993 EDT
From:     Anne_Merkel (#114)
To:       *Core-DB-Issues (#350)
Subject:  :lose_a_kid()/:gain_a_kid()

When the chparent() :lose_a_kid()/:gain_a_kid() stuff gets implemented, what
args will the verbs take?

--------------------------


Message 291 on *Core-DB-Issues(#350):
Date:     Mon May 10 13:04:23 1993 EDT
From:     Blackbriar (#110)
To:       Anne_Merkel (#114) and *Core-DB-Issues (#350)
Subject:  Re: :lose_a_kid()/:gain_a_kid()

Anne Merkel asks:

>  When the chparent() :lose_a_kid()/:gain_a_kid() stuff gets
>  implemented, what args will the verbs take?

Both verbs, in their present implementation, take the same arguments:
  oldparent:lose_a_kid(perms, object, oldparent, newparent);
  newparent:get_a_kid(perms, object, oldparent, newparent);

Anything anyone thinks I'm missing?

Bb

--------------------------


Message 292 on *Core-DB-Issues(#350):
Date:     Mon May 10 15:24:07 1993 EDT
From:     Wilson (#738)
To:       *Core-DB-Issues (#350)
Subject:  other _utils

it seems that all of $building_utils can be moved to $object_utils and still
be appropriate...

--------------------------


Message 293 on *Core-DB-Issues(#350):
Date:     Tue May 11 05:11:32 1993 EDT
From:     Praecox (#711)
To:       Wilson (#738) and *Core-DB-Issues (#350)
Subject:  Re: other _utils


Yeah, I agree.  The only verb on $building_utils which is really specific to
building is :make_exit.

Prolly, if you grepped for $building_utils, I would guess you'd find < 10
uses...heh.

praecox
>  it seems that all of $building_utils can be moved to $object_utils
>  and still be appropriate...

--------------------------


Message 294 on *Core-DB-Issues(#350):
Date:     Tue May 11 10:54:50 1993 EDT
From:     Edison_Carter (#200)
To:       *Core-DB-Issues (#350) and *Wizard-List (#141)
Subject:  @Forked Update and $command_utils:suspend_database_info()

In an attempt to make it easier to keep track of tasks, I have made a change
to $prog:@forked.
Now, when listing the forked tasks, calls to
$command_utils:suspend_if_needed() are followed by a quick note displaying the
owner, verb-location, verb-name, and `this' (when different than
verb-location), of the verb that called $command_utils:suspend_if_needed().
To facilitate this, I added a simple verb to $command_utils called
:suspend_database_info() which can be called with a task_id and get back the
callers of that task, provided that the task is in the
$command_utils:suspend_if_needed() database.  The caller_perms() must either
be a Wizard or the owner of the task.

--------------------------


Message 295 on *Core-DB-Issues(#350):
Date:     Tue May 11 15:46:52 1993 EDT
From:     BabyBriar (#2)
To:       Praecox (#711), Wilson (#738), and *Core-DB-Issues (#350)
Subject:  Re: other _utils

Praecox:

>  Prolly, if you grepped for $building_utils, I would guess you'd
>  find < 10 uses...heh.

Actually, twenty-one verbs in the DB call $building_utils. The most common
call is to :parse_names, which is used in object creation and naming.

Briar

--------------------------


Message 296 on *Core-DB-Issues(#350):
Date:     Thu May 13 16:21:51 1993 EDT
From:     BabyBriar (#2)
To:       *Wizard-List (#141) and *Core-DB-Issues (#350)
Subject:  $wiz:@make-player

I've just installed $wiz:@make-player from me. Check out #2:@make-guest and
feel free to hack/install. Whatever.

--------------------------


Message 297 on *Core-DB-Issues(#350):
Date:     Thu May 13 19:58:40 1993 EDT
From:     Porcupine (#807)
To:       *Core-DB-Issues (#350)
Subject:  Minor, stupid, timesaving suggestion

How about adding the alias `@ps' to @forked?  It's faster to type, and makes
logical sense.

--------------------------


Message 298 on *Core-DB-Issues(#350):
Date:     Fri May 14 00:38:40 1993 EDT
From:     Anne_Merkel (#114)
To:       Porcupine (#807) and *Core-DB-Issues (#350)
Subject:  Re: @ps instead on @forked

>  From:     Porcupine (#807)
>  How about adding the alias `@ps' to @forked?  It's faster to type,
>  and makes logical sense.

@ps?  I don't understand.  Is it an acronym for something?  The only thing I
can think of offhand is `post script' like at the end of a letter.

--------------------------


Message 299 on *Core-DB-Issues(#350):
Date:     Fri May 14 01:45:40 1993 EDT
From:     Dagard (#636)
To:       Anne_Merkel (#114) and *Core-DB-Issues (#350)
Subject:  re: @ps

Well, in un*x environments, ps is the command to tell you what processes you
have running, so I can understand the reasoning behind it. Heck, I kinda like
the idea personally.
UnixDag

--------------------------


Message 300 on *Core-DB-Issues(#350):
Date:     Fri May 14 07:16:28 1993 EDT
From:     Anne_Merkel (#114)
To:       Dagard (#636) and *Core-DB-Issues (#350)
Subject:  re: @ps

>  From:     Dagard (#636)
>  Well, in un*x environments, ps is the command to tell you what
>  processes you have running, so I can understand the reasoning
>  behind it. Heck, I kinda like the idea personally.
>  UnixDag

Ah, that explains why I didn't know about it.  (My school is very stingy with
UNIX accounts and us proles have to settle for VAX/VMS.)
MOO does have a lot of UNIX-references in the commands (@grep, @rn, etc) but I
don't know if @ps is really analogous.  @Forked doesn't actually show you all
your currently running tasks/processes; it shows you your forked tasks.
Forked tasks being processes that have been paused and stuck back into the
queue to await their turn to execute.

--------------------------


Message 301 on *Core-DB-Issues(#350):
Date:     Fri May 14 07:55:11 1993 EDT
From:     BabyBriar (#2)
To:       Anne_Merkel (#114), Porcupine (#807), *Core-DB-Issues (#350), and Dagard (#636)
Subject:  Re: @ps instead on @forked

Porcupine:
> How about adding the alias `@ps' to @forked?  It's faster to type,
> and makes logical sense.

Anne Merkel:
> @ps?  I don't understand.  Is it an acronym for something?  The
> only thing I can think of offhand is `post script' like at the end
> of a letter.

I like it -- not that I'll remember to use it instead of @forked. But.

+ Added @ps as an alias to $prog:@forked
+ Added a mention of @ps to $prog_help.@forked
+ Added a help entry for @ps in $prog_help, pointing to @forward

Briar

--------------------------


Message 302 on *Core-DB-Issues(#350):
Date:     Fri May 14 14:39:03 1993 EDT
From:     Hemlock (#1989)
To:       *Core-DB-Issues (#350)

Sheez.  Why not just make it @f*orked?

--------------------------


Message 303 on *Core-DB-Issues(#350):
Date:     Sat May 15 04:42:47 1993 EDT
From:     Xiombarg (#360)
To:       *Core-DB-Issues (#350)
Subject:  @ps/@forked

How about @jobs? That's a less ambigious UNIXism.
	 -Xi

--------------------------


Message 304 on *Core-DB-Issues(#350):
Date:     Sat May 15 07:00:23 1993 EDT
From:     Anne_Merkel (#114)
To:       Xiombarg (#360) and *Core-DB-Issues (#350)
Subject:  Re: @ps/@forked

>  From:     Xiombarg (#360)
>  How about @jobs? That's a less ambigious UNIXism.

Well... @ps is cryptic enough that you won't assume it means something else
while `@jobs' might be a reference to the projects board or OpalMOO employment
agency.

--------------------------


Message 305 on *Core-DB-Issues(#350):
Date:     Sat May 15 17:39:32 1993 EDT
From:     Hemlock (#1989)
To:       *Core-DB-Issues (#350)

I never thought @forked was very difficult to type.  Now if we were talking
about @queued, then I'd rally for an easier alias.  But we aren't.

--------------------------


Message 306 on *Core-DB-Issues(#350):
Date:     Sun May 16 16:47:02 1993 EDT
From:     Porcupine (#807)
To:       *Core-DB-Issues (#350)
Subject:  User Interfaces

Re: Hemlock

It may not be "easier to type" for you, but for me it is easier to remember.
I am used to doing all my work on my Unix system at home here, and typing "ps"
to list the processes I have running.  On Monohaze I also added "@ls" as an
alias for @contents, and created an "@ll" which is like ls -l on Unix.  This
has very little to do with being easy to type, and more to do with a general
consistency in user interface.

--------------------------


Message 307 on *Core-DB-Issues(#350):
Date:     Mon May 17 06:27:45 1993 EDT
From:     Edison (#200)
To:       *Wizard-List (#141) and *Core-DB-Issues (#350)
Subject:  $command_utils:player_name_available()

I have installed a new verb called $command_utils:player_name_available()
which takes two arguments and is documented.
Basically, it works like the object_match_failed stuff and the like.  It
checks to see if a name is available and valid and, if it isn't explains why
and even offers alternate spellings, otherwise, it returns 1.
I've got some ideas on things to use this for but haven't implemented them
yet.

--------------------------


Message 308 on *Core-DB-Issues(#350):
Date:     Mon May 17 20:03:30 1993 EDT
From:     Jordan (#830)
To:       Edison (#200) and *Core-DB-Issues (#350)
Subject:  Re: $command_utils:player_name_available()

Is this really the best place for it?  Maybe $player_db:available_failed might
be a better choice...

--------------------------


Message 309 on *Core-DB-Issues(#350):
Date:     Tue May 25 00:21:20 1993 EDT
From:     Edison (#200)
To:       *Core-DB-Issues (#350) and *Wizard-List (#141)
Subject:  $player:ownership_quota() replaced by $ownership_utils:ownership_quota()

The verb $player:ownership_quota() would return the player's quota value if
caller_perms() was allowed to control the player according to
$perm_utils:controls().  For some purposes this was innocent enough but since
a player could easily hack their own version to always return a large number,
it would become a major security hole if used in any form of creation.
The only current core usage was in $player:inventory(), used to simply tell
you the value.

Since a player should still be able to find out their own quota but not hack
their own, I moved the verb to $ownership_utils:ownership_quota() which is
passed a player-objnum and returns the .ownership_quota value of the object if
caller_perms() still meets the same permission requirements.
Luckily there were only 8 verbs on OpalMOO that used $player:ownership_quota()
and I've hacked them to work appropriately.

--------------------------


Message 310 on *Core-DB-Issues(#350):
Date:     Tue May 25 14:13:29 1993 EDT
From:     Wilson (#738)
To:       *Core-DB-Issues (#350) and *Wizard-List (#141)
Subject:  creation problem.

Do an @audit on me.  You will see I have made 8 objects.  Look at my
inventory.  I create all the way up to 21 objects.  @count returns 8.  I own
the newly created objects, yet they are not in my .owned_objects list.  I use
@create $thing named "Objectxx" for each one.
This is more of an annoyance than anything.

--------------------------


Message 311 on *Core-DB-Issues(#350):
Date:     Tue May 25 20:31:48 1993 EDT
From:     Edison (#200)
To:       *Core-DB-Issues (#350)
Subject:  Quota Contest

The Quota Contest described in the OpalMOO News is still on.  The
$player:ownership_quota() problem wasn't the hole.  Actually, it wasn't even a
hole yet, just a potential hole.
So keep looking for the quota hole and let us know when you find it.
(Exploiting the hole is a no-no.)  Find it and the prize of ONE HUNDRED QUOTA
will be yours!
--- Edison

--------------------------


Message 312 on *Core-DB-Issues(#350):
Date:     Tue May 25 22:08:00 1993 EDT
From:     Edison (#200)
To:       Wilson (#738), *Core-DB-Issues (#350), and *Wizard-List (#141)
Subject:  Re: creation problem.

With Silly's help, I found the problem.  As it turns out, the
$perm_utils:controls() check in #1:initialize() was failing because
$perm_utils:controls() always failed when the .owners property on an object
was clear and since that property gets set AFTER the perms check, it would
always fail on new objects (not made by $recycler:_recreate().)
I changed $perm_utils to simply fix clear .owners props and continue without
stopping so that it should work okay, I think.

Oh, and I also scanned through the DB and fixed all .owned_objects lists so
everything should be hunky-dorey now.

--- Edison

PS - This error had no effect on quota so it is not the quota hole in the
contest.

--------------------------


Message 313 on *Core-DB-Issues(#350):
Date:     Thu May 27 09:58:11 1993 EDT
From:     Dreamy (#1038)
To:       *Core-DB-Issues (#350)
Subject:  $ownership_utils:delete_owner


Ok, I know there was a problem once with :delete_owner, and I had a chat
with BlackBriar about it once.  Upon sharing objects with another
character, it would delete that object from the .owned_objects property
but when you do an inventory, it will say that you are broke (can't
make anything else).
So someone may think that they can make more things, while that's not
possible.
That was one small hole that was there, and no one noticed it.
Bb fixed it tho.  :)

Dreamer


--------------------------


Message 314 on *Core-DB-Issues(#350):
Date:     Sat May 29 22:51:12 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  New Command: @oops / @undo

I'd like to invite people to check out the new @oops/@undo command for
programmers. (There is a help screen for it as well.) I've tried to test it,
but I'd like feedback -- anyone got any suggestions or bug reports?

Briar

--------------------------


Message 315 on *Core-DB-Issues(#350):
Date:     Mon May 31 19:18:26 1993 EDT
From:     Edison (#200)
To:       *Wizard-List (#141) and *Core-DB-Issues (#350)
Subject:  $old_names_db

I have created and installed an $old_names_db.  This database is linked
through  the $player_db.  Whenever a name is removed from the $player_db by
:delete(), the $old_names_db:insert() verb is called and stores the name and
previous player object on the $old_names_db.
The purpose of this database is to help track down people who cause trouble
and then change their name.  Previously, it was almost impossible to find out
who was causing the trouble but the $old_names_db now makes it possible to
find out who a name _used_ to belong to.

--------------------------


Message 316 on *Core-DB-Issues(#350):
Date:     Mon May 31 20:38:59 1993 EDT
From:     BabyBriar (#2)
To:       *Core-DB-Issues (#350)
Subject:  MINOR $room chance

I killed $room:room_announce*_all_but and added the relevant aliases to the
real verbs on $room (i.e. $room:announce, :announce_all, :announce_all_but).

--------------------------


Message 317 on *Core-DB-Issues(#350):
Date:     Tue Jun  1 15:20:13 1993 EDT
From:     Edison (#200)
To:       *Wizard-List (#141) and *Core-DB-Issues (#350)
Subject:  New Networking Stuff Added!

I have just finished installing several new verbs.

$player:@netforward [<message-sequence>] [on *<recipient>]
     This documented command allows you to forward messages from yourself or a
readable-by-you mailing list to your registered email address.  This is a good
thing because you can use this command to easily archive your old mail and
mailing list stuff and delete it from storage on OpalMOO.  Trimming your mail
is very important because mail takes up a LOT of DB space and if get too big,
we may get switched off.

$network:valid_email_address(string)
       Since only a wizard can see a player's .email_address, this probably
won't be of much use to most players but its purpose is to return true or
false as to whether or not an email address seems viable.  It several
different checks to make its guess but we can't really know for sure until the
address bombs on a netmail-send.  I added this because it was getting tiresome
duplicating the same checks over and over and centralizing a multiply-used
check is always a good thing.

-----

Now that you can easily archive your lists, I'm going to get working on having
the mailing lists age out old messages.  Don't worry, I'll give list owners
plenty of warning before activating this.

--- Edison, Slayer of DB Bloat

--------------------------


Message 318 on *Core-DB-Issues(#350):
Date:     Tue Jun  1 16:37:58 1993 EDT
From:     BabyBriar (#2)
To:       Edison (#200), *Wizard-List (#141), and *Core-DB-Issues (#350)
Subject:  Re: New Networking Stuff Added!

Ande Edison didn't mention it, I figured I might as well mention the last
@mail-option: netmail.

If you @mail-option +netmail, your MOOMail will not be delivered to you here
on the MOO, but rather will be delivered to your RL Internet EMail mailbox
(the mailbox your character is registered to).  Thanks to Edison for provoking
this change.

Briar

--------------------------



