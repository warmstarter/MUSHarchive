@set me=quiet
@switch [isdbref(num(TurboLift Main Parent))]=0,{think [ansi(hm,INSTALL:)] No "TurboLift Main Parent" object found -- creating...;@create TurboLift Main Parent},1,{think [ansi(hm,INSTALL:)] "TurboLift Main Parent" object already exists... skipping creation.}
@switch [isdbref(num(TurboLift Entrance Parent))]=0,{think [ansi(hm,INSTALL:)] No "TurboLift Entrance Parent" object found -- creating...;@create TurboLift Entrance Parent},1,{think [ansi(hm,INSTALL:)] "TurboLift Entrance Parent" object already exists... skipping creation.}
@switch [isdbref(num(TurboLift Exit Parent))]=0,{think [ansi(hm,INSTALL:)] No "TurboLift Exit Parent" object found -- creating...;@create TurboLift Exit Parent},1,{think [ansi(hm,INSTALL:)] "TurboLift Exit Parent" object already exists... skipping creation.}
think [ansi(hm,INSTALL:)] Setting TurboLift Main Parent Flags...
@set TurboLift Main Parent = LINK_OK
@set TurboLift Main Parent = NO_COMMAND
@STARTUP TurboLift Main Parent=@tr me/TRI_RESET=SYSTEM
@set TurboLift Main Parent/STARTUP=no_command
@DESCRIBE TurboLift Main Parent=[oemit(%#,u(MSG_SHOW.Dests,%#))][ifelse(words(v(DESC_AddOn)),[u(DESC_AddOn,%#)]%r,)][u(DRAW_DESTINATIONS,%#)]
@set TurboLift Main Parent/DESCRIBE=no_command visual
think [ansi(hm,INSTALL:)] Downloading TurboLift Commands...
&CMD_LIFT TurboLift Main Parent=$*,*:@tr me/[ifelse(match(v(DATA_SYSTEM.Alias),%0),LISTEN_ACTION,NULL)]=%#,squish(trim(secure(%1))),Typed
&CMD_SETUP.FULL TurboLift Main Parent=$setup/full *:[switch([u(FUN_PLR.Valid,%#)][t(controls(%!,%l))][t(controls(%l,%!))][not(eq(words(xget(%l,DATA_PANEL)),1))][not(not(words(v(LIST_DECKS))))][not(member(iter(u(FUN_Entrances,%l,%!),[t(controls(%!,##))] [t(controls(##,%!))]),0))][and(controls(last(lexits(%l)),%!),controls(%!,last(lexits(%l))))][not(member(iter(v(LIST_DECKS),or(hastype(##,ROOM),hastype(##,THING))),0))][and(hastype(v(PTR_TL.Entrance),THING),member(owner(v(PTR_TL.Entrance)),owner(parent(me))))][and(hastype(v(PTR_TL.Exit),THING),member(owner(v(PTR_TL.Exit)),owner(parent(me))))][not(member(iter(v(LIST_DECKS),[t(controls(%!,##))] [t(controls(##,%!))]),0))],0??????????,u(TRI_ERROR,%#,PLR_!VALID),10?????????,u(TRI_ERROR,%#,ME_!CONTROL_HERE),110????????,u(TRI_ERROR,%#,HERE_!CONTROL_ME),1110???????,u(TRI_ERROR,%#,ALREADY_SETUP),11110??????,u(TRI_ERROR,%#,NO_DECKS),111110?????,u(TRI_ERROR,%#,ENTRANCES_!VALID),1111110????,u(TRI_ERROR,%#,EXIT_!VALID),11111110???,u(TRI_ERROR,%#,DECKS_!VALID),111111110??,u(TRI_ERROR,%#,ENTRANCE-Parent_!VALID),1111111110?,u(TRI_ERROR,%#,EXIT-Parent_!VALID),11111111110,u(TRI_ERROR,%#,DECKLIST_!VALID),11111111111,u(TRI_SETUP.Full,%#,secure(%0)),u(TRI_SYSERR,%#))]
&CMD_SETUP.PARTIAL TurboLift Main Parent=$setup/partial *:[ifelse(u(me/FUN_PLR.valid,%#),u(me/TRI_SETUP.Partial,%#,secure(%0)),u(me/TRI_ERROR,%#,PLR_!VALID))]
think [ansi(hm,INSTALL:)] Downloading TurboLift Data...
&DATA_DECK.QUEUE TurboLift Main Parent=
&DATA_DECK.CURRENT TurboLift Main Parent=1
&DATA_WAIT.DOORS TurboLift Main Parent=15
&DATA_WAIT.MOVE TurboLift Main Parent=6
&DATA_PREFIX.SYSTEM TurboLift Main Parent=The [v(DATA_SYSTEM.Alias)] says,
&DATA_SYSTEM.NAME TurboLift Main Parent=TurboLift
&DATA_DECK.NAME TurboLift Main Parent=deck
&DATA_SYSTEM.ALIAS TurboLift Main Parent=lift
&DATA_VERSION TurboLift Main Parent=4.1
think [ansi(hm,INSTALL:)] Downloading TurboLift Soft Flags...
&FLAG_TRI TurboLift Main Parent=0
&FLAG_DOORS TurboLift Main Parent=1
&FLAG_MOVING TurboLift Main Parent=0
&FLAG_BUSY TurboLift Main Parent=0
think [ansi(hm,INSTALL:)] Downloading Turbolift Triggers...
&TRI_RESUME TurboLift Main Parent=@switch [v(CNF_CAN.Halt)][v(FLAG_MOVING)][not(not(words(v(DATA_DECK.Queue))))]=0??,{@tr me/TRI_ERROR[ifelse(and(v(CNF_LOUD.Errors),match(VERBAL,%2)),.LOUD,)]=%0,HALT_!ENABLED},11?,{@tr me/TRI_ERROR[ifelse(and(v(CNF_LOUD.Errors),match(VERBAL,%2)),.LOUD,)]=%0,SYSTEM_MOVING},100,{@tr me/TRI_ERROR[ifelse(and(v(CNF_LOUD.Errors),match(VERBAL,%2)),.LOUD,)]=%0,DECKS_!REMAIN},101,{@tr me/TRI_RESUME2=%0},{@tr me/TRI_SYSERR=%0}
&TRI_RESUME2 TurboLift Main Parent=@emit [u(DATA_PREFIX.System)] "[u(me/MSG_CMD.Ackn,%0,%1)]";@emit [u(DATA_PREFIX.System)] "[u(me/MSG_RESUME)]";&FLAG_MOVING me=1;&FLAG_TRI me=1;&FLAG_BUSY me=0;@tr me/TRI_MOVE.[extract(DOWN UP,inc(lt(v(DATA_DECK.Current),first(v(DATA_DECK.Queue)))),1)]
&TRI_HALT TurboLift Main Parent=[switch([v(CNF_CAN.Halt)][v(FLAG_MOVING)],0?,u(TRI_ERROR[ifelse(and(v(CNF_LOUD.Errors),match(VERBAL,%2)),.LOUD,)],%0,HALT_!ENABLED),10,u(TRI_ERROR[ifelse(and(v(CNF_LOUD.Errors),match(VERBAL,%2)),.LOUD,)],%0,SYSTEM_!MOVING),11,u(TRI_HALT2,%0),u(TRI_SYSERR,%0))]
&TRI_HALT2 TurboLift Main Parent=[iter(u(FUN_ENTRANCES,%l,%!),remit(home(##),u(MSG_SYSTEM.Halted)))][emit([u(DATA_PREFIX.System)] "[u(me/MSG_CMD.Ackn,%0,%1)]")][emit([u(DATA_PREFIX.System)] "[u(me/MSG_HALT)]")][set(me,FLAG_MOVING:0)][set(me,FLAG_TRI:0)][set(me,FLAG_BUSY:0)]
&TRI_ACTION.ARRIVE TurboLift Main Parent=@pemit %0=* Type [ansi(v(FONT_HELP.Cmds),'[v(DATA_SYSTEM.Alias)], help')] for information on how to use the [name(me)].
&TRI_ACTION.DEFAULT TurboLift Main Parent=@emit [u(DATA_PREFIX.System)] "We have arrived at [capstr(lcstr(v(DATA_DECK.Name)))] [v(DATA_DECK.Current)]. Type '[name(last(lexits(here)))]' to leave."
&TRI_MOVE.STOP TurboLift Main Parent=think [link(last(lexits(here)),extract(v(LIST_DECKS),ifelse(trunc(member(v(LIST_DECKS.Nums),v(DATA_DECK.Current))),member(v(LIST_DECKS.Nums),v(DATA_DECK.Current)),v(DATA_DECK.Current)),1))][set(me,DATA_DECK.Queue:[remove(v(DATA_DECK.Queue),v(DATA_DECK.Current))])][u(TRI_DOORS.Open)];@tr me/TRI_ACTION.[ifelse(hasattr(me,TRI_ACTION.[v(DATA_DECK.Current)]),v(DATA_DECK.Current),Default)];@wait [v(DATA_WAIT.Doors)]={think [if(words(v(DATA_DECK.Queue)),u(TRI_DOORS.Close))];@tr me/[ifelse(words(v(DATA_DECK.Queue)),TRI_MOVE.[extract(DOWN UP,inc(lt(v(DATA_DECK.Current),first(v(DATA_DECK.Queue)))),1)],)];&FLAG_TRI [ifelse(not(words(v(DATA_DECK.Queue))),me,)]=0}
&TRI_MOVE.DOWN TurboLift Main Parent=think [set(me,FLAG_MOVING:1)][emit([u(MSG_DOORS.Ding-Inside)])][remit(extract(v(LIST_DECKS),ifelse(member(v(LIST_DECKS.Nums),v(DATA_DECK.Current)),member(v(LIST_DECKS.Nums),v(DATA_DECK.Current)),v(DATA_DECK.Current)),1),u(MSG_DOORS.Ding-Outside))];@wait [v(DATA_WAIT.Move)]={think [if(v(FLAG_TRI),set(me,DATA_DECK.Current:[ifelse(v(CNF_CONTINUOUS.Move),dec(v(DATA_DECK.Current)),ifelse(member(v(LIST_DECKS.Nums),v(DATA_DECK.Current)),extract(v(LIST_DECKS.Nums),dec(member(v(LIST_DECKS.Nums),v(DATA_DECK.Current))),1),dec(v(DATA_DECK.Current))))]))];@tri me/[if(v(FLAG_TRI),ifelse(member(v(DATA_DECK.Queue),v(DATA_DECK.Current)),TRI_MOVE.Stop,TRI_MOVE.[ifelse(lt(v(DATA_DECK.Current),ifelse(words(v(LIST_DECKS.Nums)),first(sort(v(LIST_DECKS.Nums),n)),1)),UP,DOWN)]))]}
&TRI_MOVE.UP TurboLift Main Parent=think [set(me,FLAG_MOVING:1)][emit([u(MSG_DOORS.Ding-Inside)])][remit(extract(v(LIST_DECKS),ifelse(member(v(LIST_DECKS.Nums),v(DATA_DECK.Current)),member(v(LIST_DECKS.Nums),v(DATA_DECK.Current)),v(DATA_DECK.Current)),1),u(MSG_DOORS.Ding-Outside))];@wait [v(DATA_WAIT.Move)]={think [if(v(FLAG_TRI),set(me,DATA_DECK.Current:[ifelse(v(CNF_CONTINUOUS.Move),inc(v(DATA_DECK.Current)),ifelse(member(v(LIST_DECKS.Nums),v(DATA_DECK.Current)),extract(v(LIST_DECKS.Nums),inc(member(v(LIST_DECKS.Nums),v(DATA_DECK.Current))),1),inc(v(DATA_DECK.Current))))]))];@tri me/[if(v(FLAG_TRI),ifelse(member(v(DATA_DECK.Queue),v(DATA_DECK.Current)),TRI_MOVE.Stop,TRI_MOVE.[ifelse(gt(v(DATA_DECK.Current),ifelse(words(v(LIST_DECKS.Nums)),last(sort(v(LIST_DECKS.Nums),n)),words(v(LIST_DECKS)))),DOWN,UP)]))]}
&TRI_DOORS.OPEN TurboLift Main Parent=[emit(u(MSG_DOORS.Open-Inside))][remit(extract(v(LIST_DECKS),ifelse(member(v(LIST_DECKS.Nums),v(DATA_DECK.Current)),member(v(LIST_DECKS.Nums),v(DATA_DECK.Current)),v(DATA_DECK.Current)),1),u(MSG_DOORS.Open-Outside))][set(me,FLAG_DOORS:1)][set(me,FLAG_MOVING:0)]
&TRI_DOORS.CLOSE TurboLift Main Parent=[emit(u(MSG_DOORS.Close-Inside))][remit(extract(v(LIST_DECKS),ifelse(member(v(LIST_DECKS.Nums),v(DATA_DECK.Current)),member(v(LIST_DECKS.Nums),v(DATA_DECK.Current)),v(DATA_DECK.Current)),1),u(MSG_DOORS.Close-Outside))][set(me,FLAG_DOORS:0)][set(me,FLAG_MOVING:1)]
&TRI_DESTINATIONS TurboLift Main Parent=[emit(u(MSG_SHOW.Dests,%0))][pemit(%0,u(DRAW_DESTINATIONS,%0))][set(me,FLAG_BUSY:0)]
&TRI_ERROR.LOUD TurboLift Main Parent=[emit([u(DATA_PREFIX.System)] "[u(ERR_%1,%2,%3,%4)][set(me,FLAG_BUSY:0)]")]
&TRI_COMMAND.OK TurboLift Main Parent=@tr me/TRI_[ifelse(match(first(%1),v(DATA_DECK.Name)),DECK,grab(v(LIST_COMMANDS),[edit(%1,space(1),_)]*))]=%0,%1,%2
&TRI_SYSERR TurboLift Main Parent=[pemit(%0,[u(DATA_PREFIX.SysErr)] There is a bug in the code. Report this to an Admin immediately.[set(me,FLAG_BUSY:0)])]
&TRI_SETUP.FULL TurboLift Main Parent=[u(TRI_SETUP.Partial,%0,%1)][set(here,DATA_PANEL:%!)][iter(u(FUN_Entrances,%l,%!),[set(##,!NO_COMMAND)][set(##,!HALT)][parent(##,)][parent(##,v(PTR_TL.Entrance))][lock(##,SAMEDECK/1)])][iter(last(lexits(%l)),[set(##,!NO_COMMAND)][set(##,!HALT)][parent(##,)][parent(##,v(PTR_TL.Exit))][lock(##,DOOROPEN/1)])][pemit(%0,[u(DATA_PREFIX.Game)] Full-Setup Phase Complete.)]
&TRI_SETUP.PARTIAL TurboLift Main Parent=[u(TRI_RESET,%0)][set(me,STARTUP:@tr me/TRI_RESET=SYSTEM)][wipe(me,DATA_CURR_DECK)][wipe(me,AT_REST)][set(me,DATA_SYSTEM.Alias:%1)][set(me,LISTEN_COMMAND:[u(me/LISTEN_STRING,%1)]:@tr me/LISTEN_ACTION=%%#\,trim(squish(edit(secure(%%1),\\,,space(0))))\,Verbal)][set(me,CMD_LIFT:$%1*:@tr me/LISTEN_ACTION=%%#\,trim(squish(edit(secure(%%0),\\,,space(0))))\,Typed)][set(me,LISTEN_ARRIVE:^* has arrived.:@tr me/TRI_ACTION.Arrive=%%#)][set(me,MONITOR)][pemit(%0,[u(DATA_PREFIX.Game)] Partial-Setup Phase Complete.%r[u(DATA_PREFIX.Game)] Setup complete with keyword: %1)]
&TRI_ERROR TurboLift Main Parent=[pemit(%0,[u(DATA_PREFIX.Error)][space(not(not(words(u(DATA_PREFIX.Error)))))][u(ERR_%1,%2,%3,%4)][set(me,FLAG_BUSY:0)])]
&TRI_DESTS TurboLift Main Parent=[u(TRI_DESTINATIONS,%0,%1,%2)]
&TRI_HELP TurboLift Main Parent=@pemit %0=[ansi(v(FONT_HELP.Border),repeat(-,78))]%r[ansi(v(FONT_HELP.Border),<<<<<)][center(ansi(v(FONT_HELP.Title),LIFT -- HELP SECTION),68)][ansi(v(FONT_HELP.Border),>>>>>)]%r[ansi(v(FONT_HELP.Border),repeat(-,78))]%rThe [capstr(v(DATA_SYSTEM.Name))] System was basically designed to serve as an elevator.  If you have authorization\, you can easily setup and cutomize the code as documented. Normal operational commands are:[ifelse(v(CNF_VERBAL.Cmds),%r%r[ansi(v(FONT_HELP.Header),VERBAL COMMANDS:)]%r%b%bSAY [ansi(v(FONT_HELP.Cmds),'[v(DATA_SYSTEM.Alias)]\, [lcstr(v(DATA_DECK.Name))] <#/alias>')] to go to a [lcstr(v(DATA_DECK.Name))].%r%b%bSAY [ansi(v(FONT_HELP.Cmds),'[v(DATA_SYSTEM.Alias)]\, destinations')] for a list of destinations.%r%b%bSAY [ansi(v(FONT_HELP.Cmds),'[v(DATA_SYSTEM.Alias)]\, halt')] to halt the system.%r%b%bSAY [ansi(v(FONT_HELP.Cmds),'[v(DATA_SYSTEM.Alias)]\, resume')] to resume motion of the system.%r%b%bSAY [ansi(v(FONT_HELP.Cmds),'[v(DATA_SYSTEM.Alias)]\, copyright')] to return Copyright information.,)][ifelse(v(CNF_TYPED.Cmds),%r%r[ansi(v(FONT_HELP.Header),TYPED COMMANDS:)]%r%b%bTYPE [ansi(v(FONT_HELP.Cmds),'[v(DATA_SYSTEM.Alias)]\, [lcstr(v(DATA_DECK.Name))] <#/alias>')] to go to a [lcstr(v(DATA_DECK.Name))].%r%b%bTYPE [ansi(v(FONT_HELP.Cmds),'[v(DATA_SYSTEM.Alias)]\, destinations')] for a list of destinations.%r%b%bTYPE [ansi(v(FONT_HELP.Cmds),'[v(DATA_SYSTEM.Alias)]\, halt')] to halt the system.%r%b%bTYPE [ansi(v(FONT_HELP.Cmds),'[v(DATA_SYSTEM.Alias)]\, resume')] to resume motion of the system.%r%b%bTYPE [ansi(v(FONT_HELP.Cmds),'[v(DATA_SYSTEM.Alias)]\, copyright)] to return Copyright information.,)][ifelse(u(FUN_PLR.Valid,%0),%r%r[ansi(v(FONT_HELP.Header),SETUP COMMANDS:)]%r%b%bTYPE [ansi(v(FONT_HELP.Cmds),'setup/partial <keyword>')] to perform a partial setup.%r%b%bTYPE [ansi(v(FONT_HELP.Cmds),'setup/full <keyword>')] to perform a full setup.%r%b%bTYPE [ansi(v(FONT_HELP.Cmds),'[v(DATA_SYSTEM.Alias)], help setup')] for more information.,)]%r;&FLAG_BUSY me=0
&TRI_HELP_SETUP TurboLift Main Parent=@pemit %0=[ansi(v(FONT_HELP.Border),repeat(-,78))]%r[ansi(v(FONT_HELP.Border),<<<<<)][center(ansi(v(FONT_HELP.Title),LIFT -- HELP SETUP SECTION),68)][ansi(v(FONT_HELP.Border),>>>>>)]%r[ansi(v(FONT_HELP.Border),repeat(-,78))]%rIf you've gotten this far, you at least have this code partially installed.  Before performing a full installation be sure you complete the following steps:%r%r[space(3)]1. Make sure all rooms and exits \(that will be a part of this [v(DATA_SYSTEM.Name)]\)%r[space(6)]are owned by the same builder as the [name(me)].%r[space(3)]2. List all decks by DB# in the attribute &LIST_DECKS on [name(me)].%r[space(3)]3. Set all of your exits and entrances !HALT and !NO_COMMAND.%r[space(3)]4. Set [name(me)] MONITOR.%r[space(3)]5. Finally\, type [ansi(v(FONT_HELP.Cmds),'setup/full <keyword>')]%r%rAssuming your installation was successful\, you now have the opportunity to customize your [v(DATA_SYSTEM.Name)]. There are many methods of customization -- all of which can be found in the following help files \(type [ansi(v(FONT_HELP.Cmds),'[v(DATA_SYSTEM.Alias)], help <topic>')]\):%r%r[space(3)]BASICS[space(9)]MESSAGES[space(9)]COLORS[space(9)]ACTIONS%r;&FLAG_BUSY me=0
&TRI_COPYRIGHT TurboLift Main Parent=@pemit %0=TurboLift Code v[v(DATA_VERSION)] -- Created by: Demonic \(1999\);&FLAG_BUSY me=0
&TRI_HELP_MESSAGES TurboLift Main Parent=@pemit %0=[ansi(v(FONT_HELP.Border),repeat(-,78))]%r[ansi(v(FONT_HELP.Border),<<<<<)][center(ansi(v(FONT_HELP.Title),LIFT -- HELP MESSAGES SECTION),68)][ansi(v(FONT_HELP.Border),>>>>>)]%r[ansi(v(FONT_HELP.Border),repeat(-,78))]%rThe following is a list of attributes you can set to change various messages of this system\, along with a brief description of each:%r%r[ansi(v(FONT_HELP.Cmds),ljust(MSG_SHOW.Dests,25))]- Emitted when someone accesses the system.%r[ansi(v(FONT_HELP.Cmds),ljust(MSG_CMD.Ackn,25))]- Emitted when someone requests a [lcstr(v(DATA_DECK.Name))].%r[ansi(v(FONT_HELP.Cmds),ljust(MSG_DOORS.Ding-Inside,25))]- Emitted inside the [v(DATA_SYSTEM.Name)] when moving.%r[ansi(v(FONT_HELP.Cmds),ljust(MSG_DOORS.Ding-Outside,25))]- Emitted outside the [v(DATA_SYSTEM.Name)] when moving.%r[ansi(v(FONT_HELP.Cmds),ljust(MSG_DOORS.Close-Inside,25))]- Emitted inside when the doors close.%r[ansi(v(FONT_HELP.Cmds),ljust(MSG_DOORS.Close-Outside,25))]- Emitted outside when the doors close.%r[ansi(v(FONT_HELP.Cmds),ljust(MSG_DOORS.Open-Inside,25))]- Emitted inside when the doors open.%r[ansi(v(FONT_HELP.Cmds),ljust(MSG_DOORS.Open-Outside,25))]- Emitted outside when the doors open.%r[ansi(v(FONT_HELP.Cmds),ljust(MSG_PROCESSING,25))]- Pemitted when executing a command.%r;&FLAG_BUSY me=0
&TRI_HELP_COLORS TurboLift Main Parent=@pemit %0=[ansi(v(FONT_HELP.Border),repeat(-,78))]%r[ansi(v(FONT_HELP.Border),<<<<<)][center(ansi(v(FONT_HELP.Title),LIFT -- HELP COLORS SECTION),68)][ansi(v(FONT_HELP.Border),>>>>>)]%r[ansi(v(FONT_HELP.Border),repeat(-,78))]%rThe following is a list of attributes you can set to change various colors of this system\, along with a brief description of each. Simply set the attribute to the color codes you desire \(for example: [ansi(v(FONT_HELP.Cmds),'&FONT_DEST.Border\ [name(me)]=hc')] would set the border in the Destination display to higlight-cyan\):%r%r[ansi(v(FONT_HELP.Cmds),ljust(FONT_HELP.Title,25))]- Color of title-text in Help files.%r[ansi(v(FONT_HELP.Cmds),ljust(FONT_HELP.Header,25))]- Color of header-text in Help files.%r[ansi(v(FONT_HELP.Cmds),ljust(FONT_HELP.Cmds,25))]- Color of commands in Help files.%r[ansi(v(FONT_HELP.Cmds),ljust(FONT_HELP.Border,25))]- Color of the border in Help files.%r%r[ansi(v(FONT_HELP.Cmds),ljust(FONT_DEST.Title,25))]- Color of title-text in Destinations display.%r[ansi(v(FONT_HELP.Cmds),ljust(FONT_DEST.Header,25))]- Color of header-text in Destinations display.%r[ansi(v(FONT_HELP.Cmds),ljust(FONT_DEST.Border,25))]- Color of the border in Destinations display.%r[ansi(v(FONT_HELP.Cmds),ljust(FONT_DEST.Cmds,25))]- Color of commands in Destinations display.%r[ansi(v(FONT_HELP.Cmds),ljust(FONT_DEST.Deck,25))]- Color of deck numbers in Destinations display.%r[ansi(v(FONT_HELP.Cmds),ljust(FONT_DEST.Alias,25))]- Color of deck aliases in Destinations display.%r[ansi(v(FONT_HELP.Cmds),ljust(FONT_DEST.Deck-Destined,25))]- Color of symbols for destined decks.%r[ansi(v(FONT_HELP.Cmds),ljust(FONT_DEST.Deck-Current,25))]- Color of symbols for current decks.%r[ansi(v(FONT_HELP.CMds),ljust(FONT_DEST.Deck-Moving,25))]- Color of symbols for current deck with closed doors.%r[ansi(v(FONT_HELP.Cmds),ljust(FONT_DEST.Deck-NoAccess,25))]- Color of symbol for deck you can't access.;&FLAG_BUSY me=0
&TRI_HELP_ACTIONS TurboLift Main Parent=@pemit %0=[ansi(v(FONT_HELP.Border),repeat(-,78))]%r[ansi(v(FONT_HELP.Border),<<<<<)][center(ansi(v(FONT_HELP.Title),LIFT -- HELP ACTIONS SECTION),68)][ansi(v(FONT_HELP.Border),>>>>>)]%r[ansi(v(FONT_HELP.Border),repeat(-,78))]%rYou can customize two types of actions that [name(me)] will perform when certain events occur.  You can specify numerous commands by simply separating each one with a semicolon \(\;\). It is recommended that you have at least a basic understanding of coding before attempting to use this 'ACTION' feature.%r%r[ansi(v(FONT_HELP.Cmds),TRI_ACTION.Arrive)] is the attribute you use to set which actions occur when a person enters the same room as [name(me)]. Use %%0 to return the DB# of the person who arrives.%r%r[ansi(v(FONT_HELP.Cmds),TRI_ACTION.<Deck#>)] is the attribute you use to set which actions occur when the [v(DATA_SYSTEM.Name)] arrives at the specified [lcstr(v(DATA_DECK.Name))]. <Deck#> should be a numeric value [ifelse(words(v(LIST_DECKS)),between 1 and [words(v(LIST_DECKS))].,which cannot be determined right now\, because no [lcstr(v(DATA_DECK.Name))]s are listed.)]%r;&FLAG_BUSY me=0
&TRI_HELP_BASICS TurboLift Main Parent=@pemit %0=[ansi(v(FONT_HELP.Border),repeat(-,78))]%r[ansi(v(FONT_HELP.Border),<<<<<)][center(ansi(v(FONT_HELP.Title),LIFT -- HELP BASICS SECTION),68)][ansi(v(FONT_HELP.Border),>>>>>)]%r[ansi(v(FONT_HELP.Border),repeat(-,78))]%rThe following is a list of data registers and configuration registers that can be used to customize the [v(DATA_SYSTEM.Name)].%r%r[ansi(v(FONT_HELP.Cmds),ljust(DATA_SYSTEM.Name,20))]- The name of this system.%r[ansi(v(FONT_HELP.Cmds),ljust(DATA_SYSTEM.Alias,20))]- The alias of this system which is%r[space(22)]used to access its commands.%r[ansi(v(FONT_HELP.Cmds),ljust(DATA_DECK.Name,20))]- The name you want to call your decks.%r[ansi(v(FONT_HELP.Cmds),ljust(DATA_PREFIX.System,20))]- The prefixing text when the system "speaks".%r[ansi(v(FONT_HELP.Cmds),ljust(DATA_WAIT.Move,20))]- The number of seconds it takes for the system%r[space(22)]to move from [lcstr(v(DATA_DECK.Name))] to [lcstr(v(DATA_DECK.Name))].%r[ansi(v(FONT_HELP.Cmds),ljust(DATA_WAIT.Doors,20))]- The number of seconds the doors remain open.%r%r[ansi(v(FONT_HELP.Cmds),ljust(CNF_CONTINUOUS.Move,20))]- Set to 0 to skip decks when LIST_DECKS.Nums is set.%r[ansi(v(FONT_HELP.CMds),ljust(CNF_SYSTEM.Active,20))]- Set to 1 to enable or 0 to disable the System.%r[ansi(v(FONT_HELP.Cmds),ljust(CNF_CAN.Halt,20))]- Set to 1 to enable or 0 to disable Halt/Resume-features.%r[ansi(v(FONT_HELP.Cmds),ljust(CNF_VERBAL.Cmds,20))]- Set to 1 to enable or 0 to disable verbal commands.%r[ansi(v(FONT_HELP.Cmds),ljust(CNF_TYPED.Cmds,20))]- Set to 1 to enable or 0 to disable typed commands.%r[ansi(v(FONT_HELP.Cmds),ljust(CNF_LOUD.Errors,20))]- Set to 1 to enable or 0 to disable loud errors.%r[space(22)]\(Loud errors are emitted to the whole room\)%r%r[ansi(v(FONT_HELP.Cmds),ljust(LIST_DECKS,20))]- List of DB#'s for each [lcstr(u(DATA_DECK.Name))].%r[ansi(v(FONT_HELP.Cmds),ljust(LIST_DECKS.Names,20))]- List of Aliases for each [lcstr(u(DATA_DECK.Name))].%r[ansi(v(FONT_HELP.Cmds),ljust(LIST_DECKS.Nums,20))]- List of [lcstr(u(DATA_DECK.Name))] numbers.%r[ansi(v(FONT_HELP.Cmds),ljust(DESC_AddOn,20))]- Additional description for your system. If you do NOT%r[space(22)]want the 'Destinations' to show\, use @desc instead.%r;&FLAG_BUSY me=0
&TRI_RESET TurboLift Main Parent=[link(last(lexits(here)),first(v(LIST_DECKS)))][set(me,FLAG_DOORS:1)][set(me,DATA_DECK.Current:1)][set(me,FLAG_BUSY:0)][set(me,FLAG_TRI:0)][set(me,FLAG_MOVING:0)][set(me,DATA_DECK.Queue:)][oemit(%0,[name(me)] has been [ansi(hg,<<< RESET >>>)] by [ifelse(match(SYSTEM,%0),the System,name(%0))].)]
&TRI_DECK2 TurboLift Main Parent=think [emit([u(DATA_PREFIX.System)] "[u(MSG_CMD.Ackn,%0,%1)]")][set(me,DATA_DECK.Queue:[setunion(v(DATA_DECK.Queue),%3)])][if(and(not(v(FLAG_TRI)),v(FLAG_DOORS)),u(TRI_DOORS.Close))];@tr me/[if(not(v(FLAG_TRI)),TRI_MOVE.[extract(DOWN UP,inc(lt(v(DATA_DECK.Current),first(v(DATA_DECK.Queue)))),1)])];think [set(me,FLAG_TRI:1)][set(me,FLAG_BUSY:0)]
&TRI_HELP_SECURITY TurboLift Main Parent=@pemit %0=[ansi(v(FONT_HELP.Border),repeat(-,78))]%r[ansi(v(FONT_HELP.Border),<<<<<)][center(ansi(v(FONT_HELP.Title),LIFT -- HELP ACTIONS SECTION),68)][ansi(v(FONT_HELP.Border),>>>>>)]%r[ansi(v(FONT_HELP.Border),repeat(-,78))]%rSecurity is often a big issue when it comes to code. Using this feature you can decide who is able to access which [lcstr(u(DATA_DECK.Name))]s of this [u(DATA_SYSTEM.Name)]. It is recommended that you have at least a basic understanding of coding before attempting to use this 'SECURITY' feature.%r%r[ansi(v(FONT_HELP.Cmds),AUTH_DECK.<#/All>)] is the attribute you use to dictate which type of players can access the specified [lcstr(u(DATA_DECK.Name))] of the [u(DATA_SYSTEM.Name)]. Simply type in a function that will evaluate to true \(a non-zero number\) or false (zero). For example, if you were forming a Female-Only Organization, you might type:%r%r[space(5)][ansi(v(FONT_HELP.Cmds),&AUTH_DECK.All %!=\[match\(female,\[xget\(\%0\,sex\)\]*\)\])]%r%rThe above function would restrict access to ALL [lcstr(u(DATA_DECK.Name))]s to only people with a female gender. If you only want to restrict an individual [lcstr(u(DATA_DECK.Name))] \(for example\, [lcstr(u(DATA_DECK.Name))] 4\), you would type:%r%r[space(5)][ansi(v(FONT_HELP.Cmds),&AUTH_DECK.4 %!=\[match\(female,\[xget\(\%0\,sex\)\]*\)\])]%r%rIf you set BOTH attributes \(with different functions\), it will check the 'ALL' attribute first. IF the 'ALL' attribute passes as true, it will then (and ONLY then) check the individual [lcstr(u(DATA_DECK.Name))]'s attribute.%r;&FLAG_BUSY me=0
think [ansi(hm,INSTALL:)] Downloading TurboLift Fonts...
&FONT_DEST.TITLE TurboLift Main Parent=hm
&FONT_DEST.BORDER TurboLift Main Parent=hb
&FONT_DEST.HEADER TurboLift Main Parent=hc
&FONT_DEST.DECK TurboLift Main Parent=hc
&FONT_DEST.DECK-CURRENT TurboLift Main Parent=hm
&FONT_DEST.DECK-DESTINED TurboLift Main Parent=hc
&FONT_DEST.ALIAS TurboLift Main Parent=h
&FONT_DEST.CMDS TurboLift Main Parent=hm
&FONT_HELP.BORDER TurboLift Main Parent=hb
&FONT_HELP.TITLE TurboLift Main Parent=hm
&FONT_HELP.CMDS TurboLift Main Parent=hc
&FONT_HELP.HEADER TurboLift Main Parent=hm
&FONT_DEST.DECK-MOVING TurboLift Main Parent=hr
&FONT_DEST.DECK-NOACCESS TurboLift Main Parent=hr
think [ansi(hm,INSTALL:)] Downloading TurboLift Error Messages...
&ERR_HALT_!ENABLED TurboLift Main Parent=Halting and resuming of this [u(DATA_SYSTEM.Name)] is not enabled.
&ERR_SYSTEM_!ACTIVE TurboLift Main Parent=This [u(DATA_SYSTEM.Name)] is currently out of order. Please check the number, and try your call again.
&ERR_DECKS_!REMAIN TurboLift Main Parent=But I am not destined to go to any more [lcstr(v(DATA_DECK.Name))]s.
&ERR_SYSTEM_MOVING TurboLift Main Parent=But the [u(DATA_SYSTEM.Name)] is already in motion.
&ERR_SYSTEM_!MOVING TurboLift Main Parent=But the [u(DATA_SYSTEM.Name)] is not in motion.
&ERR_TYPE_!VALID TurboLift Main Parent=Sorry, but [ucstr(%0)] commands are not enabled here.
&ERR_DECK_SAME TurboLift Main Parent=Wake up, [name(%0)]! You are already there.
&ERR_DECK_!VALID TurboLift Main Parent=That is not a valid destination.
&ERR_CMD_!VALID TurboLift Main Parent=That is not a valid request.
&ERR_PLR_!AUTH TurboLift Main Parent=You are not authorized to use the [v(DATA_SYSTEM.Name)].
&ERR_BUSY TurboLift Main Parent=Sorry, the [v(DATA_SYSTEM.Name)] is busy.
&ERR_EXIT-PARENT_!VALID TurboLift Main Parent=The dbref number for the Exit Parent specified in the attribute "PTR_TL.Exit" is not valid.  Be sure it is typed correctly.
&ERR_ENTRANCE-PARENT_!VALID TurboLift Main Parent=The dbref number for the Entrance Parent specified in attribute "PTR_TL.Entrance" is not valid.  Be sure it is typed correctly.
&ERR_DECKS_!VALID TurboLift Main Parent=One or more of your [lcstr(u(DATA_DECK.Name))]s listed in 'LIST_DECKS' are not valid. Be sure they are all typed correctly, and that they are using the dbrefs of the rooms.
&ERR_EXIT_!VALID TurboLift Main Parent=There is an error with the Exit leading from the [u(DATA_SYSTEM.Name)]. Be sure it is owned by the same player as the [name(me)], and has the same permissions. This code uses the LAST exit listed in the room -- in this case, [last(lexits(%l))].
&ERR_ENTRANCES_!VALID TurboLift Main Parent=There is an error with one or more of the Entrances leading to the [u(DATA_SYSTEM.Name)]. Be sure they are all owned by the same player as the [name(me)], and all have the same permissions.
&ERR_NO_DECKS TurboLift Main Parent=You have no decks listed in the 'LIST_DECKS' attribute on the [name(me)].
&ERR_ALREADY_SETUP TurboLift Main Parent=It looks as though this system has already been setup.  Type '&DATA_PANEL here' if you want to override this safety check.
&ERR_HERE_!CONTROL_ME TurboLift Main Parent=This room does not have control over [name(me)].  You must make sure they are both owned by the same person, and have the same permissions.
&ERR_ME_!CONTROL_HERE TurboLift Main Parent=The [name(me)] does not control the room it is in. You must make sure they are both owned by the same person, and have the same permissions.
&ERR_PLR_!VALID TurboLift Main Parent=You are not authorized to use that command.
&ERR_DECK_!AUTH TurboLift Main Parent=You are not allowed to access that [lcstr(u(DATA_DECK.name))], [name(%0)].
&ERR_DECKLIST_!VALID TurboLift Main Parent=There is an error with one or more of the DB#'s listed in LIST_DECKS. Be sure they are all owned by the same player as [name(me)], and all have the same permissions.
think [ansi(hm,INSTALL:)] Downloading TurboLift Game Messages...
&MSG_SYSTEM.HALTED TurboLift Main Parent=You hear a terrible screeching noise as the [u(DATA_SYSTEM.Name)] comes to a halt.
&MSG_RESUME TurboLift Main Parent=Movement of the [u(DATA_SYSTEM.Name)] has been resumed.
&MSG_HALT TurboLift Main Parent=The [u(DATA_SYSTEM.Name)] has been halted.
&MSG_PROCESSING TurboLift Main Parent=Processing...
&MSG_DOORS.OPEN-OUTSIDE TurboLift Main Parent=The doors to the [v(DATA_SYSTEM.Name)] swish open.
&MSG_DOORS.OPEN-INSIDE TurboLift Main Parent=The [v(DATA_SYSTEM.Name)] doors swish open, leading to [capstr(lcstr(v(DATA_DECK.Name)))] [v(DATA_DECK.Current)]: [name(extract(v(LIST_DECKS),[ifelse(words(v(LIST_DECKS.Nums)),member(v(LIST_DECKS.Nums),v(DATA_DECK.Current)),v(DATA_DECK.Current))],1))]
&MSG_DOORS.CLOSE-OUTSIDE TurboLift Main Parent=The doors to the [v(DATA_SYSTEM.Name)] swish close.
&MSG_DOORS.CLOSE-INSIDE TurboLift Main Parent=The doors to the [v(DATA_SYSTEM.Name)] swish close.
&MSG_DOORS.DING-OUTSIDE TurboLift Main Parent=You feel a slight rumbling as the [v(DATA_SYSTEM.Name)] moves by.
&MSG_DOORS.DING-INSIDE TurboLift Main Parent=The [v(DATA_SYSTEM.Name)] dings softly as it moves to the next [lcstr(v(DATA_DECK.Name))].
&MSG_CMD.ACKN TurboLift Main Parent=Command acknowledged, [name(%0)].
&MSG_SHOW.DESTS TurboLift Main Parent=The [v(DATA_SYSTEM.Alias)] screen flickers with data as [name(%0)] accesses it.
think [ansi(hm,INSTALL:)] Downloading TurboLift Functions...
&FUN_INPUT2DECKNUM TurboLift Main Parent=[ifelse(isnum(%0),%0,trunc(extract(v(LIST_DECKS.Nums),match(v(LIST_DECKS.Names),%0*),1)))]
&FUN_DECK.VALID TurboLift Main Parent=[setq(7,u(FUN_Input2DeckNum,%0))][ifelse(words(v(LIST_DECKS.Nums)),t(member(v(LIST_DECKS.Nums),%q7)),and(gt(%q7,0),lte(%q7,words(v(LIST_DECKS)))))]
&FUN_STRIP.INPUT TurboLift Main Parent=[edit(edit(edit(secure(%0),.,),!,),?,)]
&FUN_CMD.VALID TurboLift Main Parent=[or(match(v(LIST_COMMANDS),[edit(%0,space(1),_)]*),match(v(DATA_DECK.Name),first(%0)))]
&FUN_PLR.AUTH TurboLift Main Parent=[hastype(%0,PLAYER)]
&FUN_ENTRANCES TurboLift Main Parent=[trim(squish(iter(entrances(%0),ifelse(hastype(##,EXIT),##,))))]
&FUN_PLR.VALID TurboLift Main Parent=[or(orflags(%0,Wr),member(owner(me),%0))]
&FUN_PLR.ACCESS TurboLift Main Parent=[ifelse(u(AUTH_DECK.All,%0),ifelse(words(u(AUTH_DECK.%1)),u(AUTH_DECK.%1,%0),1),0)]
think [ansi(hm,INSTALL:)] Downloading TurboLift Configuration Options...
&CNF_CONTINUOUS.MOVE TurboLift Main Parent=0
&CNF_CAN.HALT TurboLift Main Parent=1
&CNF_SYSTEM.ACTIVE TurboLift Main Parent=1
&CNF_TYPED.CMDS TurboLift Main Parent=1
&CNF_VERBAL.CMDS TurboLift Main Parent=1
&CNF_LOUD.ERRORS TurboLift Main Parent=1
think [ansi(hm,INSTALL:)] Downloading TurboLift Monitors...
&LISTEN_ACTION TurboLift Main Parent=think [set(me,FLAG_BUSY:[inc(v(FLAG_BUSY))])][pemit(%0,u(MSG_PROCESSING,%0))];@switch [eq(v(FLAG_BUSY),1)][u(CNF_SYSTEM.Active)][u(FUN_PLR.Auth,%0)][ifelse(match(VERBAL,%2),trunc(v(CNF_VERBAL.Cmds)),trunc(v(CNF_TYPED.Cmds)))][u(FUN_CMD.Valid,setr(0,u(me/FUN_STRIP.Input,secure(%1))))][ifelse(match(first(%q0),v(DATA_DECK.Name)),u(FUN_DECK.Valid,rest(%q0)),1)][ifelse(match(first(%q0),v(DATA_DECK.Name)),not(and(eq(u(FUN_Input2DeckNum,rest(%q0)),v(DATA_DECK.Current)),not(v(FLAG_MOVING)))),1)]=0??????,{think [u(TRI_ERROR[ifelse(and(v(CNF_LOUD.Errors),match(VERBAL,%2)),.LOUD,)],%0,BUSY)]},10?????,{think [u(TRI_ERROR[ifelse(and(v(CNF_LOUD.Errors),match(VERBAL,%2)),.LOUD,)],%0,SYSTEM_!ACTIVE,%0)]},110????,{think [u(TRI_ERROR[ifelse(and(v(CNF_LOUD.Errors),match(VERBAL,%2)),.LOUD,)],%0,PLR_!AUTH)]},1110???,{think [u(TRI_ERROR[ifelse(and(v(CNF_LOUD.Errors),match(VERBAL,%2)),.LOUD,)],%0,TYPE_!VALID,%2)]},11110??,{think [u(TRI_ERROR[ifelse(and(v(CNF_LOUD.Errors),match(VERBAL,%2)),.LOUD,)],%0,CMD_!VALID)]},111110?,{think [u(TRI_ERROR[ifelse(and(v(CNF_LOUD.Errors),match(VERBAL,%2)),.LOUD,)],%0,DECK_!VALID)]},1111110,{think [u(TRI_ERROR[ifelse(and(v(CNF_LOUD.Errors),match(VERBAL,%2)),.LOUD,)],%0,DECK_SAME,%0)]},1111111,{@tr me/TRI_[setq(3,1)][ifelse(match(first(%q0),v(DATA_DECK.Name)),ifelse(setr(3,u(FUN_PLR.Access,%0,setr(2,trunc(u(FUN_Input2DeckNum,rest(%q0)))))),DECK2,ERROR[ifelse(and(v(CNF_LOUD.Errors),match(VERBAL,%2)),.LOUD,)]),grab(v(LIST_COMMANDS),[edit(%q0,space(1),_)]*))]=%0,ifelse(%q3,%q0,DECK_!AUTH),%2,%q2},{think [u(TRI_SYSERR,%0)]}
&LISTEN_STRING TurboLift Main Parent=^* says, "%0*"
think [ansi(hm,INSTALL:)] Downloading TurboLift ASCII-Art...
&DRAW_DESTINATIONS TurboLift Main Parent=%r[ansi(v(FONT_DEST.Title),The following destinations are available:)]%r[space(3)][rjust(ansi(v(FONT_DEST.Header),#),3)] [ansi(v(FONT_DEST.Border),|)] [ljust(ansi(v(FONT_DEST.Header),Alias),10)] [ansi(v(FONT_DEST.Border),|)] [ansi(v(FONT_DEST.Header),Full Name)]%r[space(3)][ansi(v(FONT_DEST.Border),----+-[repeat(-,10)]-+-[repeat(-,20)])][iter(v(LIST_DECKS),%r[space(3)][rjust([ifelse(u(FUN_PLR.Access,%0,setr(5,ifelse(trunc(extract(v(LIST_DECKS.Nums),#@,1)),trunc(extract(v(LIST_DECKS.Nums),#@,1)),#@))),[ifelse(member(v(DATA_DECK.Queue),%q5),ansi(v(FONT_DEST.Deck-Destined),\(),ifelse(member(v(DATA_DECK.Current),%q5),ifelse(v(FLAG_DOORS),ansi(v(FONT_DEST.Deck-Current),\[),ansi(v(FONT_DEST.Deck-Moving),<)),%b))][ansi(v(FONT_DEST.Deck),%q5)][ifelse(member(v(DATA_DECK.Queue),%q5),ansi(v(FONT_DEST.Deck-Destined),\)),ifelse(member(v(DATA_DECK.Current),%q5),ifelse(v(FLAG_DOORS),ansi(v(FONT_DEST.Deck-Current),\]),ansi(v(FONT_DEST.Deck-Moving),>)),%b))],ansi(v(FONT_DEST.Deck-NoAccess),%bX%b))],4)]%b [ljust(ansi(v(FONT_DEST.Alias),lcstr(left(extract(v(LIST_DECKS.Names),#@,1),10))),10)] %b [name(##)])]%r%r[space(2)][ansi(v(FONT_DEST.Deck-Current),\[ \])] is the [capstr(lcstr(v(DATA_DECK.Name)))] I am currently on.%r%b%b[ansi(v(FONT_DEST.Deck-Moving),< >)] is the [capstr(lcstr(v(DATA_DECK.Name)))] I am currently on\, but the doors are shut.%r%b%b[ansi(v(FONT_DEST.Deck-Destined),\( \))] are [capstr(lcstr(v(DATA_DECK.Name)))]s I am destined to go to.%r%b%b[ansi(v(FONT_DEST.Deck-NoAccess),%bX%b)] is a [capstr(lcstr(v(DATA_DECK.Name)))] you do not have access to.%r%b%b[setr(1,switch([v(CNF_VERBAL.Cmds)][v(CNF_TYPED.Cmds)],10,SAY,01,TYPE,11,SAY or TYPE,SYSERR:))] [ansi(v(FONT_DEST.Cmds),'[v(DATA_SYSTEM.Alias)], [lcstr(v(DATA_DECK.Name))] <#/alias>')] to go to a [lcstr(v(DATA_DECK.Name))].[ifelse(v(CNF_CAN.Halt),%r%b%b%q1 [ansi(v(FONT_DEST.Cmds),'[v(DATA_SYSTEM.Alias)]\, halt')] to stop movement of the [u(DATA_SYSTEM.Name)].%r%b%b%q1 [ansi(v(FONT_DEST.Cmds),'[v(DATA_SYSTEM.Alias)]\, resume')] to resume movement of the [u(DATA_SYSTEM.Name)].,)]%r
think [ansi(hm,INSTALL:)] Downloading TurboLift Miscellaneous Info...
&AUTH_DECK.ALL TurboLift Main Parent=1
&DESC_ADDON TurboLift Main Parent=You see nothing special.
&LIST_COMMANDS TurboLift Main Parent=Help Destinations Dests Help_Setup Help_Basics Help_Messages Help_Colors Help_Actions Help_Security Halt Resume Copyright
think [ansi(hm,INSTALL:)] Setting-up Entrance Parent...
@lock/Basic TurboLift Entrance Parent=SAMEDECK/1
@set TurboLift Entrance Parent = LINK_OK
@OSUCCESS TurboLift Entrance Parent=walks through  the exit marked '[name(me)]' and into the [capstr(lcstr(xget(xget(loc(me),DATA_PANEL),DATA_SYSTEM.Name)))].
@SUCCESS TurboLift Entrance Parent=You walk into the [capstr(lcstr(xget(xget(loc(me),DATA_PANEL),DATA_SYSTEM.Name)))].
@OFAILURE TurboLift Entrance Parent=presses the [capstr(xget(xget(loc(me),DATA_PANEL),DATA_SYSTEM.Name))] button.
@FAILURE TurboLift Entrance Parent=You press the [capstr(xget(xget(loc(me),DATA_PANEL),DATA_SYSTEM.Name))] button.
@AFAILURE TurboLift Entrance Parent=think [set(me,FLAG_BUSY2:[inc(v(FLAG_BUSY2))])][set(setr(0,xget(loc(me),DATA_PANEL)),DATA_DECK.Queue:[setunion(xget(%q0,DATA_DECK.Queue),ifelse(trunc(extract(xget(%q0,LIST_DECKS.Nums),member(xget(%q0,LIST_DECKS),home(me)),1)),extract(xget(%q0,LIST_DECKS.Nums),member(xget(%q0,LIST_DECKS),home(me)),1),member(xget(%q0,LIST_DECKS),home(me))))])][if(and(and(eq(v(FLAG_BUSY2),1),not(xget(%q0,FLAG_TRI))),xget(%q0,FLAG_DOORS)),u(TRI_DOORS.Close))];@tr %q0/[ifelse(and(eq(v(FLAG_BUSY2),1),not(xget(%q0,FLAG_TRI))),TRI_MOVE.[extract(DOWN UP,inc(lt(xget(%q0,DATA_DECK.Current),first(xget(%q0,DATA_DECK.Queue)))),1)],)];&FLAG_TRI %q0=1;@wait 2=&FLAG_BUSY2 me=0
&SAMEDECK TurboLift Entrance Parent=[and(and(not(xget(xget(loc(me),DATA_PANEL),FLAG_MOVING)),eq(ifelse(trunc(extract(xget(xget(loc(me),DATA_PANEL),LIST_DECKS.Nums),member(xget(xget(loc(me),DATA_PANEL),LIST_DECKS),home(me)),1)),trunc(extract(xget(xget(loc(me),DATA_PANEL),LIST_DECKS.Nums),member(xget(xget(loc(me),DATA_PANEL),LIST_DECKS),home(me)),1)),member(xget(xget(loc(me),DATA_PANEL),LIST_DECKS),home(me))),xget(xget(loc(me),DATA_PANEL),DATA_DECK.Current))),xget(xget(loc(me),DATA_PANEL),FLAG_DOORS))]
think [ansi(hm,INSTALL:)] Setting-up Exit Parent...
@lock/Basic TurboLift Exit Parent=SAMEDECK/1
@set TurboLift Exit Parent = LINK_OK
@set TurboLift Exit Parent = NO_COMMAND
@OSUCCESS TurboLift Exit Parent=walks through the exit marked '[name(me)]' and heads toward [name(loc(me))].
@SUCCESS TurboLift Exit Parent=You depart the [xget(xget(home(me),DATA_PANEL),DATA_SYSTEM.Name)] and head toward [name(loc(me))].
@OFAILURE TurboLift Exit Parent=tries leaving the [xget(xget(home(me),DATA_PANEL),DATA_SYSTEM.Name)] but rams into the closed doors.
@FAILURE TurboLift Exit Parent=[u([xget(home(me),DATA_PANEL)]/DATA_PREFIX.System)] "The [xget(xget(home(me),DATA_PANEL),DATA_SYSTEM.Name)]'s doors are closed -- you cannot leave."
&DOOROPEN TurboLift Exit Parent=[and(not(xget(xget(home(me),DATA_PANEL),FLAG_MOVING)),xget(xget(home(me),DATA_PANEL),FLAG_DOORS))]
think [ansi(hm,INSTALL:)] Downloading TurboLift Prefixes...
&DATA_PREFIX.WARN TurboLift Main Parent=[ansi(hy,WARN:)]
&DATA_PREFIX.GAME TurboLift Main Parent=[ansi(hg,GAME:)]
&DATA_PREFIX.ERROR TurboLift Main Parent=[ansi(hr,ERROR:)]
&DATA_PREFIX.SYSERR TurboLift Main Parent=[ansi(fhr,SYSERR:)]
think [ansi(hm,INSTALL:)] Attempting to set pointers...
@fo me=&PTR_TL.Entrance TurboLift Main Parent=[num(TurboLift Entrance Parent)]
@fo me=&PTR_TL.Exit TurboLift Main Parent=[num(TurboLift Exit Parent)]
think [ansi(hm,INSTALL:)] [ansi(hr,Download is complete!  Now you must do the following:)]
think [ansi(hm,INSTALL:)] Dig the structure the TurboLift will be moving within.
think [ansi(hm,INSTALL:)] %b%b%bDo this by @digging one TurboLift room, and  open an
think [ansi(hm,INSTALL:)] %b%b%bentrance into that room from EACH room that will have
think [ansi(hm,INSTALL:)] %b%b%baccess to the TurboLift.  Then open an exit from the
think [ansi(hm,INSTALL:)] %b%b%bTurboLift Room to any ONE of the rooms leading into it.
think [ansi(hm,INSTALL:)]
think [ansi(hm,INSTALL:)] Next @create the Control Panel and @parent it to the
think [ansi(hm,INSTALL:)] %b%b%bTurboLift Main Parent.  Drop that object into the TurboLift
think [ansi(hm,INSTALL:)] %b%b%broom and type 'setup/full <keyword>'.  Then SAY:
think [ansi(hm,INSTALL:)] %b%b%b%b%b%b[ansi(hr,<keyword>\, help)]
think [ansi(hm,INSTALL:)] 
think [ansi(hm,INSTALL:)] The Copyright must stay with this code.  If you have any questions
think [ansi(hm,INSTALL:)] or complaints \(bug reports\) concerning this code\, please contact
think [ansi(hm,INSTALL:)] me at: [ansi(hc,worldwar@bb6.betterbox.net)].  Thank you.
@set me=!quiet

