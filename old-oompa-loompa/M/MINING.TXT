@create Mining Console Parent
@lock/Basic Mining Console Parent==me
@lock/Use Mining Console Parent=canuse/1
@set Mining Console Parent = WIZARD
@set Mining Console Parent = SAFE
@set Mining Console Parent = NO_COMMAND
&BETWEEN Mining Console Parent=[and([gte(%0,%1)],[lte(%0,%2)])]
&CAPACITY_AVAILABLE Mining Console Parent=414
&CAPACITY_NEEDED Mining Console Parent=0
&CMD_ALLOCATE Mining Console Parent=$alloc *=*:th [switch({[u(ismaterial,[secure(%0)])][cand([lte(%1,[add([v(free_power)],[v(%0_alloc)])])],[gte(%1,0)])]},11,[u(fun_alloc_power,[secure(%0)],[secure(%1)])],10,[pemit(%#,Not enough power to do that.)],01,[pemit(%#,That is not a valid material.)],00,[pemit(%#,That is not a valid material.)])]
&CMD_ALLOW Mining Console Parent=$allow *:th [switch([hasflag(%#,Wiz)],1,[u(fun_allow,%0)],0,[pemit(%#,Permission denied.)])]
&CMD_DESTINATION_LIST Mining Console Parent=$list destinations:th [pemit(%#,[ansi(v(border_color),[repeat(=,76)])]%r[center([ansi(v(title_color),[name(me)] Destination List)],76)]%r[ansi(v(border_color),[repeat(=,76)])]%r [iter([edit([v(destination_list)],|,%b)],[ljust(##,8)][name(##)]%r)][ansi(v(border_color),[repeat(=,76)])])]
&CMD_DISALLOW Mining Console Parent=$disallow *:th [switch([hasflag(%#,Wiz)],1,[switch([hasattr(me,material_%0)],1,[wipe(me/material_%0)][pemit(%#,[name(me)] can no longer mine %0)][wipe(me/producing_%0)][wipe(me/alloc_%0)][u(fun_calc_power_needed)][u(fun_calc_power_used)][u(fun_calc_capacity_remaining)],0,[pemit(%#,Invalid material.)])],0,[pemit(%#,Permission denied.)])]
&CMD_HOUSE_LIST Mining Console Parent=$house list:th [pemit(%#,[ansi(v(border_color),[repeat(=,76)])]%r[center([ansi(v(title_color),[name(me)] House List)],76)]%r[ansi(v(border_color),[repeat(=,76)])]%r [iter([edit([v(house_list)],|,%b)],[ljust(##,8)][name(##)]%r)][ansi(v(border_color),[repeat(=,76)])])]
&CMD_MATERIAL_INFO Mining Console Parent=$material info *:th [switch([hasattr(me,material_%0)],1,[pemit(%#,[ljust([ansi(hr,Material:)],14)][ansi(h,[capstr([lcstr(%0)])])]%r[ljust([ansi(hr,Productivity:)],13)] [ansi(h,[v(%0.production)])]%r[ljust([ansi(hr,Energy Req.:)],13)] [ansi(h,[v(%0.energy)])]%r[ljust([ansi(hr,Capacity per Unit:)],13)] [ansi(h,v(%0.weight))]%r[ljust([ansi(hr,Description:)],13)] [ansi(h,[v(%0.desc)])])],0,[pemit(%#,No such material.)])]
&CMD_MINE Mining Console Parent=$mine *=*:th [switch([hasattr(me,house)],1,[u(fun_calc_used_workers)][switch([u(ismaterial,[secure(%0)])][lte([ceil(%1)],[add([switch(hasattr(u(house),workers_[num(me)]),1,[sub([get(u(house)/workers_[num(me)])],[v(used_workers)])],0,0)],[switch([hasattr(me,producing_%0)],1,[v(producing_%0)],0,1)])])][gte(%1,0)],111,[u(fun_set_mining,[secure(%0)],[ceil([secure(%1)])])],110,[pemit(%#,Number must be greater than 0.)],101,[pemit(%#,Not enough workers to do that.)],100,[pemit(%#,Not enough workers to do that.)],011,[pemit(%#,That is not a valid material.)],001,[pemit(%#,That is not a valid material.)],000,[pemit(%#,That is not a valid material.)],010,[pemit(%#,That is not a valid material.)])],0,[pemit(%#,You do not have a house for your workers!)])]
&CMD_POWER_PLANT_LIST Mining Console Parent=$list power sources:th [pemit(%#,[ansi(v(border_color),[repeat(=,76)])]%r[center([ansi(v(title_color),[name(me)] Power Sources List)],76)]%r[ansi(v(border_color),[repeat(=,76)])]%r [iter([edit([v(power_plant_list)],|,%b)],[ljust(##,8)][name(##)]%r)][ansi(v(border_color),[repeat(=,76)])])]
&CMD_PROSPECTS Mining Console Parent=$prospects:th [pemit(%#,[ansi(v(border_color),[repeat(=,76)])]%r[center([ansi(v(title_color),Mining Prospects)],76)]%r[ansi(v(border_color),[repeat(=,76)])]%r%b[ansi(v(title_color),[ljust(Material,15)][ljust(Productivity,15)][ljust(Energy/Unit,15)]Quantity)]%r[if([lattr(me/MATERIAL_*)],[u(fun_mining_prospects)],%bNone%r)][ansi(v(border_color),[repeat(=,76)])]
&CMD_SET_DESTINATION Mining Console Parent=$set destination *:th [switch([strmatch([v(destination_list)],*|%0|*)],1,[set(me,destination:%0)][pemit(%#,The raw materials are now transferred to [name(%0)] hourly.)],0,[pemit(%#,Invalid destination.)])]
&CMD_SET_HOUSE Mining Console Parent=$set house *:th [switch([strmatch([v(house_list)],*|%0|*)],1,[set(me,house:%0)][pemit(%#,The new house for workers is [name(%0)].)],0,[pemit(%#,Invalid house.)])]
&CMD_SET_POWER_PLANT Mining Console Parent=$set power plant *:th [switch([strmatch([v(power_plant_list)],*|%0|*)],1,[set(me,power_plant:%0)][pemit(%#,The new source of power is [name(%0)].)],0,[pemit(%#,Invalid power plant.)])]
&CMD_STOP_MINING Mining Console Parent=$stop mining *:th [switch({[u(ismaterial,[secure(%0)])][hasattr(me,PRODUCING_%0)]},01,{[pemit(%#,That is not a valid material.)]},10,{[pemit(%#,We are not mining that at this time.)]},00,{[pemit(%#,That is not a valid material.)]},11,{[wipe(me/producing_%0)][pemit(%#,No longer mining [capstr([lcstr(%0)])].)][wipe(me/%0_alloc)][u(fun_calc_power_used)][u(fun_calc_power_needed)][u(fun_calc_power_available)][u(fun_calc_used_workers)]})]
&CMD_STOREHOUSE Mining Console Parent=$storehouse:th [pemit(%#,[ansi(v(border_color),[repeat(=,76)])]%r[center([ansi(h,Storehouse Contents)],76)]%r[ansi(v(border_color),[repeat(=,76)])]%r[if([lattr([u(destination)]/STORAGE_*)],[u([u(destination)]/fun_find_contents2)],None%r)][ansi(v(border_color),[repeat(=,76)])]
&CREDITS Mining Console Parent=Dave@GalacticMUSH [EMAIL: davemilford@home.com] [ICQ: 8516328]
@set Mining Console Parent/CREDITS=no_command
&CURRENT_CAPACITY Mining Console Parent=0
@DESCRIBE Mining Console Parent=[squish([u(fun_calc_used_workers)][u(fun_calc_power_status)][u(fun_calc_power_available)][set(me,power_needed:0)][u(fun_calc_power_needed)])]%b[ansi(v(border_color),[repeat(_,74)]%r/)]%b[ljust([ansi(v(name_color),[v(planet)] Mining Console)],73)][ansi([v(border_color)],\\%r|[repeat(-,74)]|%r|)]%b[ljust([ansi(v(title_color),Owner:)] [v(owner)],73)][ansi([v(border_color)],|%r|)]%b[ljust([ansi(v(title_color),Destination:)] [switch([hasattr(me,destination)],1,[name([u(destination)])]%b%b%([u(destination)]%),0,None)],73)][ansi(v(border_color),|%r|[repeat(-,74)]|%r|)]%b[ljust([ansi(v(title_color),Housing Unit%b:)] [if(hasattr(me,house),name(u(house))%b%b%([u(house)]%),None)],73)][ansi(v(border_color),|%r|)]%b[ljust([ansi(v(title_color),Work Force%b%b%b:)] [u(fun_check_house)],73)][ansi(v(border_color),|%r|%b)][ljust([ansi(v(title_color),Worker Health:)] [if(not(strmatch(u(house),[v(none)])),[u(fun_show_worker_health)] %([if(not(strmatch(u(house),[v(none)])),[mul([fdiv([get(u(house)/worker_health)],10)],100)],0)]%%%),Not Available)],73)][ansi(v(border_color),|%r|[repeat(-,74)]|%r|)]%b[ljust([ansi(v(title_color),Power Plant:)]%b[switch([hasattr(me,power_plant)],1,[name([u(power_plant)])]%b%b%([u(power_plant)]%),0,None)],73)][ansi(v(border_color),|%r|)]%b[ljust([ansi(v(title_color),Power Supplied%b:)]%b[if(hasattr(me,power_plant),[u(fun_power_supplied)][if(strmatch(name(u(power_plant)),*Warehouse*),%b[ansi(v(border_color),%[)][ansi(v(subtitle_color),Batteries)][ansi(v(border_color),%])])],0)],36)][ljust([ansi(v(title_color),Power Used%b%b:)]%b[v(used_power)],37)][ansi(v(border_color),|%r|)]%b[ljust([ansi(v(title_color),Power Available:)]%b[v(free_power)],36)][ljust([ansi(v(title_color),Power Needed:)]%b[v(power_needed)],37)][ansi(v(border_color),|%r|[repeat(-,74)]|%r|)]%b[ljust([ansi(v(title_color),Currently Mining:)],73)][ansi(v(border_color),|%r|)]%b[ljust([ansi(v(subtitle_color),Material)],20)][ljust([ansi(v(subtitle_color),Workers)],9)][ljust([ansi(v(subtitle_color),Power)],8)][ljust([ansi(v(subtitle_color),Power Req.)],15)][ljust([ansi(v(subtitle_color),Hourly Production)],21)][ansi(v(border_color),|%r|)]%b[u(fun_find_mining)][ljust([ansi(v(title_color),Idle Workers:)] [if(hasattr(me,house),[if(hasattr(u(house),workers_[num(me)]),[sub([get(u(house)/workers_[num(me)])],[v(used_workers)])],0)],0)],73)][ansi(v(border_color),|)]%r[ansi(v(border_color),\\[repeat(_,74)]/)]
@set Mining Console Parent/DESCRIBE=no_command visual
&DESTINATION Mining Console Parent=[v(none)]
&DESTINATION_LIST Mining Console Parent=|
&FREE_POWER Mining Console Parent=0
&FUN_ALLOC_POWER Mining Console Parent=[set(me,%0_alloc:%1)][pemit(%#,[capstr([lcstr(%0)])] now has %1 power.)][u(fun_calc_power_used)][u(fun_calc_power_available)]
&FUN_ALLOW Mining Console Parent=[switch([and([hasattrp(v(itemdb),%0.PRODUCTION)],[hasattrp(v(itemdb),%0.ENERGY)])],1,[set(me,material_%0:yes)][pemit(%#,[name(me)] can now mine %0.)],0,[pemit(%#,Error: Either that material does not exist or has not been set up correctly.)])]
&FUN_CALC_CAPACITY_NEEDED Mining Console Parent=[set(me,capacity_needed:0)][iter([lattr(me/PRODUCING_*)],[set(me,capacity_needed:[add([v(capacity_needed)],[v(##)])])]
&FUN_CALC_ENERGY Mining Console Parent=[mul([v(%0.energy)],[v(producing_%0)])]
&FUN_CALC_POWER_AVAILABLE Mining Console Parent=[if(not(strmatch(u(power_plant),[v(none)])),[if(hasattr(u(power_plant),power_[num(me)]),[set(me,FREE_POWER:[sub([switch([hasattr(me,power_plant)],1,[u(fun_power_supplied)],0,0)],[v(used_power)])])])])]
&FUN_CALC_POWER_NEEDED Mining Console Parent=[set(me,power_needed:0)][iter([lattr(me/PRODUCING_*)],[set(me,power_needed:[add([v(power_needed)],[mul([v(##)],[v([edit(##,PRODUCING_,)].energy)])])]
&FUN_CALC_POWER_STATUS Mining Console Parent=[switch([hasattr(me,power_plant)],1,[set(me,powered:yes)],0,[set(me,powered:no)])]
&FUN_CALC_POWER_SUPPLIED Mining Console Parent=[u(fun_power_supplied)]
&FUN_CALC_POWER_USED Mining Console Parent=[set(me,used_power:0)][iter([lattr(me/*_ALLOC)],[set(me,used_power:[add([v(used_power)],[v(##)])])]
&FUN_CALC_PROD Mining Console Parent=[if(hasattr(me,house),[if([gt([mul(v(producing_%0),v(%0.energy))],v(%0_alloc))],[round([mul([mul([mul([v(%0.PRODUCTION)],[v(producing_%0)])],[fdiv([get(u(house)/worker_health)],10)])],[fdiv(v(%0_alloc),[mul(v(producing_%0),v(%0.energy))])])],2)],[round([mul([mul([v(%0.PRODUCTION)],[v(producing_%0)])],[fdiv([get(u(house)/worker_health)],10)])],2)])],0)]
&FUN_CALC_PROD_OLD Mining Console Parent=[if(hasattr(me,house),[mul([mul([v(%0.production)],[v(producing_%0)])],[fdiv([get([u(house)]/worker_health)],10)])],0)]
&FUN_CALC_USED_WORKERS Mining Console Parent=[set(me,used_workers:0)][if([lattr(me/PRODUCING_*)],[iter([lattr(me/PRODUCING_*)],[set(me,used_workers:[add(v(used_workers),v(##))])])]
&FUN_CHECK_HOUSE Mining Console Parent=[if([hasattr(me,house)],[if([hasattr(u(house),workers_[num(me)])],[get(u(house)/workers_[num(me)])],0)],0)]
&FUN_DELETE_BATTERIES Mining Console Parent=[set(u(power_plant),storage_batteries:[sub([get(u(power_plant)/storage_batteries)],[round(fdiv(v(used_power),400),2)])])][trigger(u(power_plant)/fun_calc_capacity_used)][trigger(u(power_plant)/fun_calc_capacity_remaining)]
&FUN_FIND_MINING Mining Console Parent=[if([lattr(me/PRODUCING_*)],{[iter([lattr(me/PRODUCING_*)],[ljust([capstr([lcstr([edit(##,PRODUCING_,)])])],20)][ljust([v(##)],9)][ljust([ansi([u(fun_power_color,##)],[v([edit(##,PRODUCING_,)]_alloc)])],8)][ljust([u(fun_calc_energy,[edit(##,PRODUCING_,)])],15)][ljust([ansi(nc,[u(fun_calc_prod,[edit(##,PRODUCING_,)])])],21)][ansi(v(border_color),|%r|)])][ansi(v(border_color),[repeat(-,74)]|%r|%b)]},{[ljust([ansi(hr,None)],73)][ansi(v(border_color),|%r|)][ansi(v(border_color),[repeat(-,74)]|%r|%b)]})]
&FUN_MINING_PROSPECTS Mining Console Parent=%b[iter([lattr(me/MATERIAL_*)],[ljust([capstr([lcstr([edit(##,MATERIAL_,)])])],15)][ljust([v([edit(##,MATERIAL_,)].production)],15)][ljust([v([edit(##,MATERIAL_,)].energy)],15)][switch(v(##),YES,Unlimited,v(##))]%r)]
&FUN_MOVE_COMMODS Mining Console Parent=[iter([lattr(me/STORAGE_*)],[set([u(destination)],##:[switch([hasattr([u(destination)],##)],1,[add([get([u(destination)]/##)],[v(##)])],0,[v(##)])])][wipe(me/##)])][trigger([u(destination)]/fun_calc_capacity_used)][trigger([u(destination)]/fun_calc_capacity_remaining)]
&FUN_POWER_COLOR Mining Console Parent=[switch([lt([v([edit(%0,PRODUCING_,)]_alloc)],[u(fun_calc_energy,[edit(%0,PRODUCING_,)])])],1,nr,0,[switch([gt([v([edit(%0,PRODUCING_,)]_alloc)],[u(fun_calc_energy,[edit(%0,PRODUCING_,)])])],1,nm,0,ng)])]
&FUN_POWER_STATUS Mining Console Parent=[switch([v(powered)],yes,[switch([gt([v(power_needed)],[v(used_power)])],1,[ansi(hr,Insufficient Power)],0,[ansi(hg,Powered)])],no,[ansi(hr,No Power)],insufficient,[ansi(hy,Insufficient Power)],None)]
&FUN_POWER_SUPPLIED Mining Console Parent=[switch(strmatch(name(u(power_plant)),*Warehouse*),1,[if(hasattr(u(power_plant),storage_batteries),[mul(get(u(power_plant)/storage_batteries),400)],0)],[if(hasattr(u(power_plant),power_[num(me)]),[get([u(power_plant)]/POWER_[num(me)])],0)])]
&FUN_PROD_CYCLE Mining Console Parent=[iter([lattr(me/PRODUCING_*)],[if(lte(ceil(mul([mul(v(##),v([edit(##,PRODUCING_,)].production))],v([edit(##,PRODUCING_,)].weight))),get(u(destination)/capacity_remaining)),[switch([hasattr(me,STORAGE_[edit(##,PRODUCING_,)])],1,[set(me,STORAGE_[edit(##,PRODUCING_,)]:[add([v(storage_[edit(##,PRODUCING_,)])],[u(fun_calc_prod,[edit(##,PRODUCING_,)])])])],0,[setq(5,[u(fun_calc_prod,[edit(##,PRODUCING_,)])])][set(me,STORAGE_[edit(##,PRODUCING_,)]:%q5)])][switch(v(MATERIAL_[edit(##,PRODUCING_,)]),YES, ,[u(fun_reduce_material,[edit(##,PRODUCING_,)],%q5)])])] [set(me,lastprod:[secs()])][trigger(me/fun_move_commods)]
&FUN_REDUCE_MATERIAL Mining Console Parent=[set(me,material_%0:[sub(v(material_%0),%1)])][if(lte(v(material_%0),0),[wipe(me/material_%0)][wipe(me/producing_%0)][wipe(me/%0_alloc)][u(fun_calc_used_workers)][u(fun_calc_power_used)][u(fun_calc_power_needed)][emit(Out of material [capstr(lcstr(%0))].)])]
&FUN_SET_CAPACITY Mining Console Parent=[set(me,current_capacity:%0)][u(fun_calc_capacity_needed)][pemit(%#,%0 workers are now available.)][switch([lt(%0,[v(capacity_needed)])],1,{[pemit(%#,Not enough workers, resetting allocations.)][iter([lattr(me/PRODUCING_*)],[set(me,##:0)])]})][u(fun_calc_capacity_remaining)][u(fun_calc_power_used)][u(fun_calc_power_needed)][u(fun_calc_power_available)][u(fun_calc_food_needed)][u(fun_calc_water_needed)]
&FUN_SET_MINING Mining Console Parent=[switch([hasattr(me,power_plant)],1,[switch([strmatch(u(destination),[v(none)])],1,[pemit(%#,You do not have a destination for the product set!)],0,[set(me,PRODUCING_%0:%1)][switch([hasattr(me,%0_alloc)],0,[set(me,%0_alloc:0)])][pemit(%#,%1 workers have been assigned to mine [capstr([lcstr(%0)])].)][u(fun_calc_power_used)][u(fun_calc_power_needed)][u(fun_calc_power_available)][u(fun_calc_used_workers)])],0,[pemit(%#,The Mine is unpowered.)])]
&FUN_SHOW_WORKER_HEALTH Mining Console Parent=[if([strmatch([get(u(house)/worker_health)],0)],[ansi(hr,Dying)])][if([u(between,[get(u(house)/worker_health)],0.1,4.9)],[ansi(hr,Bad)])][if([u(between,[get(u(house)/worker_health)],5.0,7.5)],[ansi(hy,Fair)])][if([u(between,[get(u(house)/worker_health)],7.6,8.9)],[ansi(hg,Good)])][if([u(between,[get(u(house)/worker_health)],9.0,10.0)],[ansi(hg,Excellent)])]
&FUN_SMARTALLOC Mining Console Parent=[set(me,AMOUNT_DONE:0)][iter([lattr(me/*_ALLOC)],[setq(0,[v(##)])][if([not([hasattr(me,ALLOC_DONE)])],[if([gte(v(##),[sub(%0,[v(amount_done)])])],[set(me,##:[sub([v(##)],[sub(%0,[v(amount_done)])])])][set(me,ALLOC_DONE:YES)],[set(me,##:0)][set(me,amount_done:[add(v(amount_done),%q0)])])])])][wait(1,[lit([wipe(me/amount_done)][wipe(me/alloc_done)][u(fun_calc_power_used)][set(me,free_power:0)])])]
&FUN_WAREHOUSE Mining Console Parent=[if([lattr(me/STORAGE_*)],%b[iter([lattr(me/STORAGE_*)],[ljust([capstr([lcstr([edit(##,STORAGE_,)])])],30)][u(##)]%r)],None%r)]
&HOUSE Mining Console Parent=[v(none)]
&HOUSE_LIST Mining Console Parent=|
&ISMATERIAL Mining Console Parent=[hasattr(me,material_%0)]
&LASTPROD Mining Console Parent=949021364
&MAX_CAPACITY Mining Console Parent=10
&OWNER Mining Console Parent=Administration Mining Corp.
&PLANET Mining Console Parent=Large
&POWERED Mining Console Parent=yes
&POWER_NEEDED Mining Console Parent=0
&POWER_PLANT Mining Console Parent=[v(none)]
&POWER_PLANT_LIST Mining Console Parent=|
&POWER_SWEEP Mining Console Parent=[u(fun_calc_power_needed)][switch(gt(v(used_power),u(fun_power_supplied)),1,[emit(Global power shortage. Resetting allocations.)][u(fun_smartalloc,[sub(v(used_power),u(fun_calc_power_supplied))])])][u(fun_calc_power_used)][u(fun_calc_power_needed)][u(fun_calc_power_available)][u(fun_calc_capacity_remaining)])]
&POWER_USED Mining Console Parent=300
&SWEEP Mining Console Parent=[u(fun_prod_cycle)][if(strmatch(name(u(power_plant)),*Warehouse*),[u(fun_delete_batteries)])][u(power_sweep)]
&SWEEP_OLD Mining Console Parent=[if([lt(get(u(destination)/capacity_used),get(u(destination)/capacity_remaining))],[u(fun_prod_cycle)])][if(strmatch(name(u(power_plant)),*Warehouse*),[u(fun_delete_batteries)])][u(power_sweep)]
&USED_POWER Mining Console Parent=0
&USED_WORKERS Mining Console Parent=0
&VERSION Mining Console Parent=3.0
@set Mining Console Parent/VERSION=no_command
