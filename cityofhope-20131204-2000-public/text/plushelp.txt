& help
[header()]
Index

  [argcol(More help commands:)] [pcol(+help morehelp)]

  [pcol(Gameplay Topics)]
[columns(sort(+glance|+ic|+knock|+shout|+timestop|+view|+view-setup|+warn|BACKGROUNDS|mutter|OOC|PLACES|places-config|places-options|placesreset|plook|+isapproved|+ooc|+meet|+weather|+moon|+time|+vote|+xp|+map|+roll|+desc|+lock|+rprooms|dir|+risk|+shift|+prove|+hangouts|+dir|+heal|+hurt|+dice|+combat|+roster|+census|+rent|+banality|+sheet|+boon|+effects|+gain|+lose|+mysheet|+equip|+renown|Extra Stats|Vehicle|+info|+pack|+chantry|+events|+phone|gauntlet|shroud|+invoke,a,|,|),19,|,2)]
  [pcol(Non-Gameplay Topics)]
[columns(sort(+beginner|+note|+finger|+finger-setup|+3who|+lwho|+staff|+staff/all|+timestamp|+uptime|+where|+who|CREDITS|bb|+watch|+ooc|+sheettally|+spam|+statsearch|+book|+xpspend|+sendspongehome|+ambience|+bg|approved|+vend|+vacation|+pageblock|+alts,a,|,|),19,|,2)]
  [pcol(Reality Related Topics)]
[columns(sort(reality|Fae|+rpeek|+enchant|Umbra|Wraith|+reality|+rexist|+rsee|+rreset|+shelby|+rstep|Reality Posing,a,|,|),19,|,2)]
  [pcol(Jobs and Requests)]
[columns(sort(+jobs|+myjobs|+xpreq|+renownreq|+buildreq|+equipreq,a,|,|),19,|,2)]

  To get help on any of the listed topics, type [pcol(+help)] [argcol(<topic>)].
  To learn more about how to read help, type [pcol(+help)] [argcol(helphelp)].
[footer()]

& +bg
& backgrounds
[header()]
Commands for Setting your Background:                     

  SYNTAX:  +bg <#>                 - Read a background section.
           +bglist                 - List out sections that have been created
           +bgadd <#>=<text>       - Add to a background section.
           +bgrem <#>=<text>       - Removes text from a background section.
           +bgrep <#>=<old>/<new>  - Replaces text in a background section.
           +bgclear <#>            - Clears a background section.
           +bglock <#>             - Locks a background section when finished.

  The '<#>' sign in the BG help stands for the number of the section you are
  working on. The BG commands allows for multiple sections so that your 
  background can be broken up into reasonably sized pieces of text.
[footer()]

& +beginner
[header()]
+beginner

  MUSH is new to some of you and probably a little daunting. To ease your 
  feelings of panic, we offer a very basic list of commands that will get you 
  looking around and using the various features of the game.

    "<message>                You say <message>.
    Say <message>             See above.
    ooc <message>             Makes an OOC statement or pose.
    page <person>=<message>   Pages <person> with <message>.
    look                      Shows you the room you are standing in.
    look <object or person>   Shows the desc for that object or person.
    pose <message>            You pose <message> EX: pose grins.->John Doe 
                              grins.
    :<message>                See 'pose" above
    WHO                       Shows a list of who is connected to the MUSH.
    +staff                    Shows connected Staff.
    +staff/all                Shows the staff roster.

  NOTE: MUSH commands may be case sensitive. You can always page a staffer 
  for help.

  '+beginner' also recalls this file
[footer()]

& CREDITS
[header()]
Credits

  SGP is a broad, cross platform coding effort with numerous contributors.  
  Current contributors of code and assistance in testing, writing helpfiles, 
  and pithy comments are as follows:

    Audumla@Everywhere   --A little bit of everything, +staff and +staff/all, 
                           +beginner, +version, and installer files.
    BEM@Granite          --Much of the base code including +who, joining 
                           and summon commands, debugging. 
    Miateila@Granite     --+finger and LOTS of pithy commentary
    Hilikiradi@Sandbox   --Debugging, Penn platform tests, +cnotes, 
                           +lwho, PLACES upgrades, and installer files. 
    Brazil@Everywhere    --MUX 2.0 issues
    Talek, Javelin, Raevnos, David,
    Vexon@M*U*S*H        --Penn Issues
    Ashen-Shugar         --RhostMUSH Issues, +motd
    Lilith@Sandbox       --Debugging, @register 
    Hunger@Pacifica      --Debugging, Aesthetics
    Jeff@TSC             --+version, @crontab 
[footer()]

& +time
[header(Time Information)]
The +time command displays the current time and other useful at-a-glance information. The time is real time, Pacific Standard Time following Daylight Savings time. Sunrise and Sunset are based on Naval Observatory data.

See also:       +moon   +weather
See in +policy: time
[footer()]
& +finger 
[header()]
+finger 

  SYNTAX: +finger <name>
           

  This command shows you various bits of information about and will also 
  accept "me" as an argument.  +finger is generally a command that notes OOC 
  information and should not be considered IC unless game policy 
  specifically says otherwise.

  See Also '+finger-setup' for configuration options.  
[footer()]

& +finger-setup
[header()]
Finger Setup

  Example: &FULLNAME me=Princess Angelina Contessa Louisa Francesca Banana Fanna Bobesca the Third
  
  Attributes read by this command:
        
  EMAIL:               Your email address (optional)   
  POSITION:            Your Position
  SHORT-DESC:          A short description of yourself  
  FULLNAME:            Your character's full name.
  AGE:                 Your real age
  FAME:                What you are known for.
  APP-AGE:             Your apparent age
  PLAN:                Any plans your character may have
  RP-PREFS:            Any RP Prefs that you may have as a person
  ALTS:                Alternate characters you may be known as
  THEMESONG:           Your Theme Song
  QUOTE:               A typical quote from your character
  OFF-HOURS:           When you are usually online.
  TEMPERMENT:          Should explain itself, really.
  VACATION:            The dates you expect to be gone.
  URL:                 Your homepage, if any.
  &FINGER-<whatever>:  Let's you add other fields.

  AFINGER:     Similar to @adesc, gets triggered when someone +fingers 
               you.%%N is the name of the person who +fingered you, 
               %%# is their dbref.
[footer()]

& +glance 
[header()]
+glance

  SYNTAX: [pcol(+glance)]

  Displays displays the &SHORT-DESC attributes of objects and connected 
  players in your present location.  Idle times of players are shown.  
  &SHORT-DESC information is truncated to 50 characters. 

  Here, [pcol(+glance)] has been upgraded to make checks for additional
  RP-related properties. This includes:

  Visible [pcol(+notes)]
  All [pcol(+view)](s)
  Effective Appearance - Set [pcol(&GLANCE_APP me=1)] to make yours visible.
  All [pcol(Places)]

See Also: +notes   +view   places
[footer()]

& +ic
[header(+ic)]

  The +ic command will take someone from the OOC area to the grid. It will
  only work if you're character is approved for RP and is not on the gird.

  When you use the +ooc command, your location is stored so that you can
  return to the last IC location you were in. You can clear this by clearing
  the LAST_OOC_LOC attribute on your character.

See Also: +ooc
[footer()]

& +knock
[header()]
+knock

  SYNTAX: +knock <exit name or alias>

  This command will allow you to 'knock' on any door in the MUSH. The players 
  on the other side of the door will get an emit telling them that someone is 
  knocking on the door. 

  NOTE: Using this command on the street grid on exits like South <S> is very 
  silly and people will think that you are dumb if you do.
[footer()]

& mp
[header()]
mp - multipaging:

  SYNTAX:  mp <names>=<message> - Allows multipaging to a list of players
           mp <message>         - Allows multipaging to the last group of 
                                  players multipaged.
[footer()]

& mutter
[header()]
mutter
  
  SYNTAX: mutter <target>=<string>
          mutter/tt <target>=<string>
          mutter/place <place number>=<string>

  The first form of this command behaves identically to "whisper", except 
  that the other players in the room will see that you have said something. 
  A regular message, or part of a pose enclosed in "quotes", will have some 
  of its words or groups of words replaced by "..." If you enclose a phrase 
  with <angle brackets>, it will not be replaced. Poses without "quotes" 
  will simply show that you have muttered something. <target> can be any 
  player in the same room as you.

  The second form of this command behaves like the first, except that instead 
  of the entire room hearing the mutter, only people at a place will do so. 
  If you are at a place, those at your place will hear the mutter;if you are 
  not, and the target is, those at that place will hear the mutter. If 
  neither of you are at a place, an error message will be generated.

  The final version of this command allows everyone at a place to hear the 
  message in full, while the rest of the room hears the mutter.

  This code was written by Deirdre@AmberMUSH.

  See Also: 'mutter2'
[footer()]

& mutter2
[header()]
mutter examples:

     mutter Finndo=Can you loan me thirty Pence? I'm broke!
     Meg mutters to Finndo, "Can... loan... thirty... broke!"

     mutter Bleys=:frowns. "What a <cheapskate> he is!" She shrugs.
     Meg frowns. She mutters to Bleys, "What... cheapskate..." She shrugs.

     mutter/place 1=:chuckles. "Thank you very much."
     Meg chuckles. She mutters to the long, mahogany bar, "Thank you..."

     mutter/tt Deirdre=Where did you hide those Trumps?
     At the bar, Meg mutters to Deirdre, "Where... Trumps?"
[footer()]

& OOC
[header()]
Out of Character speech:

  SYNTAX:  ooc <message>
           ' <message>
  
  Allows a player to speak or pose OOCly or out of character.
         
[footer()]

& update
& join
& mv
& depart
& sit
& places
& plook
& tt
& ttooc
[header()]
PLACES

  SYNTAX:  Mv from <#> to <#>          Moves a vacancy from one place to another.
           Join <place name>           Puts you at <place name>
           Join at #<num>              Puts you at place #<num>.
           Join with <name>            Puts you at the place with <name>.
           Depart                      Removes you from your place.
           sit *                        Alias for Join.
           Depart                      Removes you from your place.
           Places                      Lists who's present at all places.
           Place <num>                 Lists who's present at place <num>.
           Plook                       Lists in column format everyone around the 
                              room.
           Plook <num>                 Lists name of <num> and virtual desc.
           tt <message>                (Tete a tete) Relays a message to all those at
                              your place. This command takes the usual 
                              say/pose tokens, and TT |<message> will emit.
           ttooc <message>             (Tete a tete) Relays an OOC message
           Update <#>/<Option>=<text>  See '+help places-options'

  PLACES are virtual places to sit, stand or occupy. You remain in the same
  room, but join a group of people within that room who may or may not be
  having a quiet conversation only with others placed with them.

  For installation help, type '+help places-config'.

  This code originally provided courtesy of Deirdre, Meg, and Osric of 
  AmberMUSH. It has since been editted by Angel@Heaven

See Also: places-config   places-options   placesreset
[footer()]

& places-config
[header()]
PLACES configuration:
  
  SYNTAX: Configure <num> places
          Unconfigure places

  Notes: A null fixed message means vacancies can be moved freely to and from 
  the place.  This does not make sense for things like couches and rugs.  Set 
  it to something like "That makes no sense." if you are using such a place.

  (O)Join and (O)depart messages take like this: %%N. All Join and Depart 
  messages are appended with the place name.

  Functions:  WHICHPLACE(<loc num>,<dbnum>) gives the number of a place where 
              <dbnum> is.
              ATPLACE(<loc num>,<place num>) gives you a list of things at a 
              place.
              PLACEINFO(<loc num>,<place num>,<option>) gives the value of 
              <option> at place.
[footer()]

& places-options
[header()]
PLACES configuration:

  SYNTAX: Update <Place #>/<Option>=<Configuration Text>

  Option Description    <Option>        Default Configuration Text
  ------------------    --------        --------------------------
  Place Name            NAME            Table x
  Maximum # of seats    MAXPLACES       Random
  Current # of seats    CURPLACES       Random (1 >= # >= MAXPLACES)
  Fixed fail message    FIXED           <NULL>
  Full fail message     FULL            That table has no more room.
  Join message          JOIN            You sit down at <place>.
  Ojoin message         OJOIN           sits down at <place>.
  Depart message        DEPART          You stand and leave <place>.
  Odepart message       ODEPART         stands and leaves <place>.
  Say prefix            PREFIX          At your table
  Description           DESCRIBE        A table with 4 legs and some chairs 
[footer()]

& placesreset
[header(placesreset)]
  [pcol(placesreset)] - Fix places when they get confused.

The places system sometimes gets confused, says that tables are full when they aren't, etc. [pcol(placesreset)] will empty all places in your current location and set the back to a sane state.

See Also: places-config
[footer()]

& plook
[header()]
plook

  SYNTAX: plook
          plook <target>

  The first form gives you a list of places, in a three column format.

  The second form takes the number of the place as an argument, and gives the 
  name and description of the virtual place. Descriptions are in the final 
  field of the PLACE# attribute on the room, after the | in the list of 
  information.
[footer()]

& @register
[header()]

  SYNTAX: @register <RL Name>=<email>=<alts>

  All players must be registered and read and accept the conditions found in 
  'news AUP' before they are allowed out of the Registration room. 
  Unregistered character objects become subject to nuking at any time.
[footer()]

& +selfboot
[header()]
+selfboot

  SYNTAX: +selfboot

  This command allows you to boot 'ghost' connections that are usually caused 
  by dropped connections to your ISP.  
[footer()]

& +shout
[header()]
+shout
  
  SYNTAX: +shout <message>

  This command will allow you to shout a message so that is is heard in 
  adjacent rooms. Codewise, it propogates a given message through all non-
  audible exits leading from the room of the enactor.

  NOTE: People in adjacent rooms will not know who is shouting, but will be 
  told that 'A man', 'A woman', or 'Someone" is shouting.

  Overuse of this command can be very annoying to others.

  If you want to 'sound proof' an exit, to prevent a shout from being heard 
  through a particular exit, add &NO_SHOUT <exit name>=1.
[footer()]

& +staff
[header()]
+staff

  SYNTAX: +staff

  This command shows all connected staff who are not set DARK, along with 
  their alias, staff position, duty status, and how long they have been idle.
[footer()]

& +staff/all
[header()]
+staff/all

  SYNTAX: +staff/all

  This command shows all staff along with their alias, staff position, and if 
  they are connected or not.  For offline or DARK staff, it displays when they 
  were last connected.
[footer()]

& +timestamp
[header()]
+timestamp

  SYNTAX: +timestamp      
  
  Allows a player to read their current timestamps.
[footer()]

& +timestop
[header()]
+timestop

  SYNTAX:  +timestop     
           +resume
           
           
  +timestop create a timestop object and drops it in the room where the 
  timestop was requested.  Staff is notified.  The object itself will appear 
  in the location as:  TIMESTOP: <player> <timestamp> <location>

  +resume removes _all_ timestops from the room in which it is used.
[footer()]

& +uptime 
[header()]
+uptime

  SYNTAX: +uptime

  This command displays basic runtime statistics for the game.
[footer()]

& +view
[header()]
  SYNTAX:  +view                  List all objects in the room with views set.
           +view here             Lists all viewable items in the room.
           +view <object>         Lists all views on a particular object.
           +view <object>/<view>  Reads a view.

  Setting viewable objects using this code allows for greater detail to be 
  coded into a room without requiring huge, spammy descriptions. +view may 
  also be set on characters.

  Be sure to add "+view items" to your @descs so people know to look at them.

  See Also: '+help +view-setup'
[footer()] 

& +view-setup
[header()]
Setting views:

  Set an attribute on the object thus:

               &view-<name of view> <object>=<text>

  An example:  &view-painting here=You see a painting hanging on the walls, 
  that seems to be done in an Impressionist tone...

        To erase a view, simply leave the <text> area blank.

  You may also set messages to be displayed to other players when a view is 
  looked at. This is just like setting a view, but the attribute is called 
  &oview.

  An example.  &oview-painting here=takes a look at the painting hanging on 
  the wall.

  Mary and Fred are in a room and Mary does a "+view here/painting" 
  Fred would see 'Mary takes a look at the painting hanging on the wall.'
[footer()]

& +warn
[header()]
+warn

  SYNTAX:   +warn <player>         
  
  Issues an anonymous OOC warning of impending danger to the named player.

  This is only a generic warning -- players are encouraged to page or @pemit 
  more specific messages, but this will suffice in a pinch. Do not use this 
  command flippantly. Give players ample time to make up their minds. This is 
  to be used BEFORE a timestop occurs. The command DOES display a message to 
  staff when used.
[footer()]

& +3who
[header()]
+3who

  SYNTAX: +3who

  Displays +who in a 3 column format.
[footer()]

& +lwho
[header()]
+lwho

  SYNTAX: +lwho 

  This commands information as that displayed by +who, but only shows the 
  players in the same room. 
[footer()]

& +who
[header()]
+who

  SYNTAX: [pcol(+who)]
          [pcol(+who)] [argcol(<string>)]
          [pcol(+who/f\[ollow\])]
          [pcol(+who/w\[atch\])]

  This command displays Player, Gender, Alias, Idletime, Location, dbref of 
  location if findable and set JUMP_OK, and if the player is also staff.

  The second version of this command accepts an argument and allow you to see
  only connected players who match the argument given, such as looking for all
  players whose names start with an 'm'.

  The staff version of this code shows DARK staff, location, and dbref of 
  locations.

  [pcol(+who/f)] and [pcol(+who/w)] both display [pcol(+who)] information only for those connected players on your [pcol(+watch/follow)] list.

See Also: +watch
[footer()]

& +where
[header()]
+where

  SYNTAX: +where \[<partial room name>\]

  Shows the location of all findable players on the mush.  It sorts the list 
  by location and does not show DARK, UNFINDABLE, or those in UNFINDABLE 
  locations.

  You can also provide a partial room name to limit the list of rooms.
[footer()]
& morehelp
[header(Additional Help Commands)]
This MUSH strives to put as much helpful documenation online as possible.
However, this can lead to extremely bloated and hard to navigate help files.
In the interest of cutting down the clutter, we've created several different
help commands that provide help on a certain general subject. They are as
follows:

  [pcol(+rules)]  - Changes and clarifications to WoD rules
  [pcol(+policy)] - OOC rights and rules governing both staff and players
  [pcol(+shelp)]  - Information for staff members
  [pcol(+chelp)]  - Information regarding code
  [pcol(+bhelp)]  - Information regarding building
[footer()]
& bb
[header(Bulletin Board)]
     [mudname()] has a global, multi-threaded board with a rich set of features. To see help on a particular topic, type '+help <topic>' (Example: +help bbread).

     TOPIC                 DESCRIPTION
     ~~~~~                 ~~~~~~~~~~~
     bbread                Reading bulletin board messages.
     bbpost                Posting bulletin board messages.
     bbmisc                Other commands (removing messages, unsubscribing
                             groups, resubscribing to groups, etc)

     bbtimeout             Expanded help on the topic of message timeouts.
[footer()]

& bbread
[header(Bulletin Board Reading)]
     +bbread                         Scans joined bulletin board groups.
     +bbread <#>                     Scans messages in group <#>.
     +bbread <#>/<list>              Reads message(s). <list> can be a single
                                        number, multiple numbers, or a range
                                        of numbers (ie. 1-6), or any combo.
     +bbread <#>/u                   Reads all unread messages in group <#>.
     +bbcatchup <#>                  Marks all messages in group <#> as read.
                                        You can use multiple group #'s/names
                                        or may use the word 'all' to catchup
                                        on all messages on all boards.

     +bbscan        Totals unread postings (if any) in each joined group. You
                    can place this command in your @aconnect, and it's
                    recommended you do so.

     +bbnext        Pulls up the next unread +bb message to display it.

Note: You can use the boards name (or abbreviation) in place of it's number.
See also: +help bbpost, +help bbmisc
[footer()]

& bbpost
[header(Bulletin Board Posting)]
     +bbpost <#>/<title>             This starts a post to group <#>.
     +bbwrite <text>                 This adds text to an already started post.
     +bb <text>                      Same as +bbwrite.
     +bbedit <area>=<old>/<new>      Edits your post in progress. Valid areas
                                       are: text, title
     +bbproof                        Displays your current post in progress.
     +bbtoss                         Discards your current post in progress.
     +bbpost                         This will post your current post in
                                       progress.

     +bbpost <#>/<subject>=<body>    Posts a message to group <#>. This is a
                                       quick way of posting a message with
                                       one command.
     +bbedit <#>/<#>=<old>/<new>     Edits one of your posted messages.

Note: You can use the boards name (or abbreviation) in place of it's number.
See also: +help bbread, +help bbmisc
[footer()]

& bbmisc
[header(Bulletin Board Misc)]
     +bbremove <#>/<list>            Removes a message by you. <list> can be a
                                       single number, a group of numbers, or a
                                       range (10-14).
     +bbmove <#>/<#> to <#>          Moves one of your messages to a new group.
     +bbleave <#>                    Unsubscribe from group <#>.
     +bbjoin <#>                     Joins a group you've previously 'left'.
     +bblist                         Listing of all groups available to you
                                       along with their timeout values.
     +bbsearch <#>/<name>            Shows you a list of <name>'s postings on
                                       group <#>.
     +bbtimeout <#>/<#>=<days>       Changes timeout for a message to <days>.
     +bbnotify <#>=<on|off>          Turn post notification for group <#> on
                                       or off.


For a '.sig', set an attribute on you called BB_SIG, and place your
signature in that.

Note: You can use the board's name (or abbreviation) in place of its number.
See also: +help bbread, +help bbpost, +help bbtimeout, +help bbchanges
[footer()]

& bbtimeout
[header(Bulletin Board Timeouts)]
There's only a couple of things that need to be understood in order to take
full advantage of message timeouts.

1: Once a day, the TR_TIMEOUT attribute on the bbpocket should be triggered.
   Some games already have a way of accomplishing this. For games that do not,
   simply have a wizard execute set the 'autotimeout' global parameter:
      +bbconfig autotimeout=on
   Turning that parameter on sets up the board to take care of its own daily
   triggering.  Setting the paramenter to 'off' turns off the BBS's internal
   triggering.

Concluded in: +help bbtimeout2
[footer()]

& bbtimeout2
[header(Bulletin Board Timeouts Continued)]
2: There are 3 different timeout values:

   The global parameter 'timeout' (set via the '+bbconfig timeout=<days>'
   command) sets a default timeout that will be set on any new bb groups
   created after the execution of this command.

   The group parameter 'timeout' (set via the '+bbconfig <#>/timeout=<days>'
   command) sets a default timeout for the group <#>. Any new messages
   posted to this group will inherit that timeout.

   The user command '+bbtimeout <group>/<message list>=<days>' will set the
   specified timeout on individual messages. Players can only modify their
   own messages, wizards can modify any messages. Players can only set
   timeouts equal to or less than the default timeout for the board, wizards
   can set any timeout.

   In all cases, a timeout of '0' indicates no timeout.
[footer()]

& bbchanges
[header(Bulletin Board Changes)]
The most recent version of this code, bug fixes, and patches can be found at:
                    www.firstmagic.com/~merlin/mushcode

4.0.6:
     BugFix: Patched a security hole (thanks to Alierak for pointing it out)
     PennFix: Minor tweak to +bbremove that will keep Penn's cleaner and
              prevent odd behavior
     Feature: Message headers internal to the bbs now store dbref of the owner
              of the poster.

4.0.5:
     Improved +bbscan (Amberyl)
     Improved number range error handling (Kareila@ChaoticMUX)
     BugFix: +bbmove - better error handling, and replaced missing '}'
     BugFix: FN_SETR behaves better for those that need it.

4.0.4:
     BugFix: +bbsearch now checks permissions properly
     BugFix: base 36 to base 10 conversion tweaked to be friendlier to Penn
             (added a base case of '0' to fold()).
     BugFix: Posting to an anonymous board no longer appends your BB_SIG.
     BugFix: BBS is now aware of the 8k MUX buffer limit. This affects the
             'percentage' full meter.
     PennFix: +bbmove tweaked to be friendlier to PennMUSH.
     PennFix: Various other PennMUSH fixes, most involving flags. Should help
              the BBS run correctly on PennMUSH's.
     Feature: Post notification now includes board/#
     Help: Help files have been expanded in the areas of message timeouts and
           locking groups.

4.0.3:
     BugFix: +bbcleargroup now checks permissions properly
     BugFix: +bbcleargroup will no longer re-order remaining groups
     BugFix: Automatic post notification for anonymous boards now uses
             the anonymous 'title' instead of the poster's name.

4.0.2:
     BugFix: +bbsearch will now work properly on all servers
     Some attribute cleanup

4.0.1:
     BugFix: Message ID's no longer improperly sorted by certain commands
     BugFix: Update-Installer should no longer scramble message ID's

4.0.0:
     Misc. security enhancements.
     Up to 25 increase in storage capacity.
     Support for message timeouts. Fully configurable.
     Support for anonymous boards. Configurable 'From' field title. Obviously,
       MUSH staff can determine original poster.
     Post notification: online players are notified of new posts. Configurable
     New Command: +bbsearch. Allows user to search a group for posts by a
       specific author.
     New Command: +bbnotify. Allows user to toggle post notification for
       boards.
     New Staff Command: +bbconfig. For setting global/group timeout values,
       anonymous boards, built-in timeout monitor.
[footer()]

& +watch
[header(+watch)]
The +watch command controls your participation in the system that notifies yourself and others when a player connects and disconnects.

  +watch

  +watch/on
  +watch/off
  +watch/quiet

  +watch/follow <player>
  +watch/unfollow <player>

  +watch/ignore <player>
  +watch/unignore <player>

  +watch/hidefrom <player>
  +watch/unhidefrom <player>
  +watch/hidefromall
  +watch/unhidefromall

  +watch/cleanup

The +watch system has three modes: ON, OFF, and QUIET.
  * When set to ON, you see all player connects and disconnects, except those you specifically ignore.
  * When set to OFF, you see no player connects or disconnections.
  * When set to QUIET, you only see connects and disconnects of players you specifically follow.

The +watch command shows your current watch mode and the lists of players that you follow, ignore, and hide from.

The +watch/follow family of commands add a player to you follow list. When players you follow connect and disconnect, their names will be highlighted in white. You can use [pcol(+who/f)] and [pcol(+who/w)] (same command) to view [pcol(+who)] limited to your /follow list.

The +watch/ignore family of commands controls whether you see other players connecting and disconnecting. This has no effect on whether or not others see you connecting and disconnecting.

The +watch/hidefrom family of commands controls whether others see you connecting and disconnecting. This has no effect on you being notified of other players connecting and disconnecting. Adding staff to your hidefrom list will [ansi(h,not)] prevent them from being notified of your connections and disconnections.

The +watch/cleanup command will remove non-player objects from your follow, hide, and ignore lists.

See Also: +spam   +who
[footer()]
& +pitch
[header(+pitch <title>=<description>)]
   This command tosses an idea to staff. The idea can be story related or just an idea on how to make the game better. PITCH jobs are different from those created with +request. They are not issued due dates. Staff is under no obligation to even answer them. By procedure, they are either discarded with no fanfare, tucked away for future implementation or they are run with either in modified or unmodified form.  

   For story pitches, it puts a story idea into the RP jobs bucket.  Now, this is not a request for a TP, this is a method of giving story ideas, or theme ideas, to the staff for consideration. If you want to request a scene, use +request.
[footer()]
& +request
[header(+request <title>=<description>)]
   This command requests <title> and <description> from staff. The request is added to the jobs list and will be tended to as soon as possible.  Please do not bug staff - it will be handled shortly. There is a standard three day turnaround time on +requests.

See Also: +xpreq   +buildreq   +equipreq   +renownreq
[footer()]

& +bug
[header(+bug <title>=<description>)]
   This command is used for bug reporting. In <title> put the command that is bugged, or something else appropriate. Please be as descriptive as possible in the <description> field. What were the results you were expecting? What happened in its place? By giving lots of detail here, it saves us the time of tracking you down to drag the information out of you. Thanks.
[footer()]
& +typo
[header(+typo <typo description>)]
   This command reports a typo. Please be specific about where the typo is, what the typo is, and what you think it should be changed to.
[footer()]
& +myjobs
[header(+myjobs)]
   +myjobs
   +myjob <#>
   +myjob/add <#>=<comment>

   This suite of commands allows the submitter to view and modify jobs that they have submitted to the system. When viewing a job that you own, you can only see the comments that you have added, not comments added by others.

   Jobs can be tagged by staff for you to see. In those instances, you can see
   all comments added, not just those you have added.
[footer()]
& +jobs
[header(Jobs System)]
The jobs system is how players formally interact with staff to get things
done. It provides commands to allow players to pitch ideas to staff, make
requests of staff, and report typos and bugs.

See Also: +myjobs, +pitch, +request, +bug, +typo
[footer()]

& +isapproved
[header(+isapproved <player>)]
The +isapproved command displays whether or not someone is approved for RP. It
can be used by anyone.

  Examples:
    +isapproved tick
      Tick is [tcol(not)] approved for RP.
    +isapproved sponge
      Sponge is approved for RP.
[footer()]
& +ooc
[header(+ooc)]
  The [pcol(+ooc)] command teleports a character from the grid to the OOC region of
  the MU, provided the character is not already in the OOC region.

  When you use the [pcol(+ic)] command it stores your location so that you can return
  to the same place by doing [pcol(+ooc)]. If you don't have a stored location you are
  teleported to the OOC Nexus.

  To reset your last IC and OOC locations, run [pcol(+ooc/clear)].

See Also: +ooc
[footer()]
& +meet
[header(+meet)]
Sends an option to the player of <name> to join you, or decline to meet you within 5 minutes. Be advised that moving from the current position voids the +meet.

 Examples:
    +meet <name>
    +meet/accept
    +meet/reject
    +meet/abort
    
+meet <name> sends an option to the player of <name> from the person sending the +meet to join them.

+meet/accept accepts the person sending the +meet to join you.

+meet/reject rejects the +meet sent from the person that wishes to join you.

+meet/abort removes all meet-invites.
[footer()]

& +weather
[header(+weather\[/forecast\])]
The +weather command allows you to check sky conditions, temperature, wind,
humidity, and barometric pressure. This information is updated at hourly
intervals.

Using the form +weather/forecast you can see the weather forecast for the
evening and upcoming week. This information is also updated hourly.

To receive hourly updates without having to check, there is a Weather comm
channel. To join the Weather comm channel, type:

  addcom wea=Weather

See Also: +time   +moon
[footer()]
& +moon
[header(+moon)]
The +moon command shows and describes the current moon phase. It takes no
options. The moon phase is recalculated hourly.

See Also: +time   +weather
[footer()]
& +learnq
[header(Learning Queue)]
  +learnq

Allows you to view your current Learning Queue. The columns are as follows:

Stat:        The stat being learned.
Slot:        The number of learning slots being used.
XP:          The XP cost of the item.
Est. Finish: The estimated time when learning will be complete.
Progress:    A rough progress bar to display progress.

Slots determine how many things a player can learn at once. The number of slots a player has is determined by their Willpower where two points of Willpower grant a learning slot. Multiple learning slots can be used to speed the learning of a stat. Slots do [ansi(h,not)] multiply learning speed directly: i.e. using 2 slots does not make you learn twice as fast. A sample conversion is as follows:

1 slot:   100 days becomes 100 days
2 slots:  100 days becomes  75 days
3 slots:  100 days becomes  56 days
4 slots:  100 days becomes  42 days
5 slots:  100 days becomes  32 days

Continued in +learnq 2
[footer()]
& +learnq 2
[header(Learning Queue cont'd)]
  +learnq/slot <stat>=<slots>
  +learnq/unslot <stat>
  +learnq/abort <stat>

+learnq/slot allows you to spend time learning a preapproved <stat> using the desired number of <slots>. Using more slots increases the learning rate per the chart in '+help +learnq'. If no time has been spent learning <stat>, the proper amount of XP is spent to begin learning <stat>.

+learnq/unslot allows you to suspend learning a <stat>. This frees up slots for learning other stats. NOTE: when the learning time is complete for a stat it must be unslotted before staff can add the <stat> to the character sheet.

+learnq/abort allows you to reset a <stat> in your learning queue. This returns any XP you've spent on this stat but resets its progress and unslots it (if slotted). The +learnq/abort does [ansi(h,not)] ask for confirmation. It assumes you want your XP back and are willing to accept having to start over learning the <stat>.
[footer()]
& +vote
[header(+vote)]
  [pcol(+vote)] [argcol(<player> <player> <player...>)]  - Cast votes for one or more players.
  [pcol(+vote/here)]                           - Cast one vote each for everyone in the room.
  [pcol(+vote/history)]                        - Look at the history of votes you've cast.

The [pcol(+vote)] commands allow you to acknowledge good role play with a little bit of XP. The first form allows you to vote for one or more players with a single command. The second form allows you to vote for all the connected players in your current room. The third form shows who you've voted for recently.

The [pcol(+vote)] system will not allow you to vote for yourself, players who are not approved, or staff. The system keeps track of who you've voted for in the last 24 hours. Currently you're allowed to cast two votes per play per 24 hour period.

The base amount a vote is worth is not disclosed. We feel that this helps maintain the idea that votes are a reward for good RP, not a gift of XP.

See Also: +xp/nom
[footer()]
& +xp
[header(+xp)]
  [pcol(+xp)]
  [pcol(+xp/spent)]

The +xp command allows you to view various statistics about how much XP you've gained and spent. Note that each value is truncated to one decimal place. We do this to obscure the value of individual votes and other XP earnings as described in '+help +vote'.  

There is also [pcol(+xp/spent)] which shows you a history of all the XP spends that have been processed for you.

See Also: +vote   +xpspend   +xpreq   +xp/nom
[footer()]
& +map
[header(+map)]
The commands bellow allow you to view the different areas of the grid, see where your own location is as well as give you an overall look of the main grid. 

The following +map uses are as follows:
  +map - To view where you are.
  +map/all - To view the overall grid.
[footer()]
& +roll
[header(+roll)]
  [pcol(+roll)] [argcol(<stats> \[vs <diff>\])]
  [pcol(+roll/private)] [argcol(<stats> \[vs <diff>\])]
  [pcol(+roll/staff)] [argcol(<stats> \[vs <diff>\])]
  [pcol(+roll/page)] [argcol(<player1> \[<player2>..<playern>\]=<stats> \[vs <diff>\])]
  [pcol(+roll/job)] [argcol(<job #>=<stats> \[vs <diff>\])]

The [pcol(+roll)] command allows a player roll 10-sided dice against a certain difficulty. The default difficulty is 6 but all commands will allow 'vs <diff>' on the end to specify difficulty.

Stats can be either the name of stats or integer values, all separated by + signs. Integer values can be positive or negative. The +roll code does not understand negative stats.

There are three ways the roll can be displayed: SAFE, UNSAFE, and BLATANT.  SAFE shows only the total number of dice being rolled. UNSAFE shows the stats and additional dice as well as the total dice being rolled. BLATANT is like UNSAFE but it additional shows how many dice each stat contributes (eg.  Strength(3) as opposed to Strength). The player making the roll and staff witnesses see the BLATANT display, while others see the SAFE display. UNSAFE display is not currenlty used. Additionally, all players can set '&VERBOSE_ROLLS me=1' to see the results of individual dice for rolls they witness.

See Also: +combat
Continued in '+help +roll 2'
[footer()]
& +roll 2
[header(+roll Page 2)]
  [pcol(+roll)] [argcol(<stats> \[vs <diff>\])]

This is the most basic form of +roll and is visible to all those in the room.

  [pcol(+roll/private)] [argcol(<stats> \[vs <diff>\])]

This form allows a player to make a roll only visible to themselves. Not even
staff see the roll.

  [pcol(+roll/staff)] [argcol(<stats> \[vs <diff>\])]

This form allows a player to make a roll visible to themselves and all staff
present.

  [pcol(+roll/page)] [argcol(<player1> \[<player2>..<playern>\]=<stats> \[vs <diff>\])]

This form allows a player to make a roll visible to themselves and a list of players (names, aliases, or dbrefs). Those players will see the roll regardless of where they are.

  [pcol(+roll/job)] [argcol(<job #>=<stats> \[vs <diff>\])]

This form allows a player to make a roll that is added to an open job that can be verified by staff. You can use [pcol(+request)] to create such a job.

Continued in '+help +roll 3'
[footer()]
& +roll 3
[header(+roll Page 3)]
+roll Examples

  +roll Strength + Athletics + -1 vs 3
  +roll/private wits + Chemistry
  +roll/staff manipulation+leadership+-1 vs 8
  +roll/page sally jim spo=7 vs 8
  +roll/job 123=Wits + occ vs 7
  
[footer()]

& +descitem
[header(Description Items)]
  +descitem <name>=<description>
  +descitem/list
  +descitem/view <name>
  +desc <name>=<item> <item> <item>

  [argcol(This help is terrible and Sponge should feel bad)]

  This is the super-advanced mutlidescer for people who like descs way too much. The state of the help is deplorable.

  A description set assembles multiple description items into an 'outfit': a complete description. This allows players to describe part of a look only once but use it in as many different descriptions as they want.

  The first form creates or sets an 'outfit' to contain a list of description items in the specified order. The second form lists the existing description sets. The third form shows what items a description set is composed of and the complete description. The fourth form sets your current description to the description set specified.
  Description items are pieces of a description, like a hat, or a tattoo.  Several description items are intended to be assembled into a complete description (a description set).

  The first form creates or replaces item <name> with the specified <descripton>. The second form shows the currently existing description items. The third form shows the description for a specific item.

  There's no reason why one can't create a description item that is an entire description, then use that as the only item in a description set. This would be similar to a more basic multidescer. Before doing this manually, see the /quick option for +descset.

See also: +descset
[footer()]

& +desc
& +descset
[header(Description Sets)]
  [pcol(+desc/save)] [argcol(<name>)]                           - Save your current @desc as [argcol(<name>)]
  [pcol(+desc/list)]                                  - Show a list of your saved descs
  [pcol(+desc/view)] [argcol(<name>)]                           - Look at a specific desc without loading it
  [pcol(+desc/load)] [argcol(<name>)]                           - Load a saved desc, overwriting your current @desc
  [pcol(+desc/quick)] [argcol(<name>)]=[argcol(<complete description>)]   - Create a new saved desc without changing you current @desc

See also: +descitem
[footer()]

& +door
& +lock
& +unlock
[header(+lock and +unlock)]
  [pcol(+lock)] [argcol(<exit>)]
  [pcol(+lock/this)] [argcol(<exit>)]
  [pcol(+lock/other)] [argcol(<exit>)]
  [pcol(+lock/both)] [argcol(<exit>)]

  [pcol(+unlock)] [argcol(<exit>)]
  [pcol(+unlock/this)] [argcol(<exit>)]
  [pcol(+unlock/other)] [argcol(<exit>)]
  [pcol(+unlock/both)] [argcol(<exit>)]

  [pcol(+lock/hold)] [argcol(<exit>)]    - All same command: hold an exit open for 60 seconds.
  [pcol(+unlock/hold)] [argcol(<exit>)]
  [pcol(+door/hold)] [argcol(<exit>)]

  [pcol(+lock/keys)]          - Show which exits you have keys to.
  [pcol(+lock/locks)]         - Show which locks I control.
  [pcol(+lock/keywho)] [argcol(<exit>)] - Show who has keys to an exit you control.

  [pcol(+lock/givekey)] [argcol(<exit>)]=[argcol(<player>)] - Give [argcol(<player>)] a key to [argcol(<exit>)]
  [pcol(+lock/remkey)] [argcol(<exit>)]=[argcol(<player>)]  - Take [argcol(<players>)]'s key to [argcol(<exit>)] if they have one.

The [pcol(+lock)] system has three concepts to understand. The first two are Keys and Control. A key is the ability to pass through an exit and to lock and unlock an exit. Control is the ability to give and take keys to an exit. The third is "sides" of an exit: "this side" and "the other side".

If you visualize yourself standing in a room with a shut door the meaning is self-evident. "This side" of the exit is the side of the door you can see. Locking "this side" of the exit prevents you from leaving the room. Locking "the other side" of the door prevents people from coming in the room.

The [pcol(/hold)] commands allow a player to hold a locked door open for 60 seconds, as long as they have a key. In essence, it's temporarily unlocked. The player who uses [pcol(/hold)] does not need to wait for players to pass through the exit, as long as they pass within 60 seconds.

See also: '+bhelp +lock'
[footer()]

& +cnotes
& +jnotes
& +snotes
& +notes
[header(Unified Notes System)]
[mudname()] uses a single system for notes, rather than separate +cnotes/+snotes/+jnotes/+xnotes systems.

If you're not familiar with our [pcol(+notes)] system, read: [pcol(+help +note tutorial)].

Notes are accessed with the following commands:

  [pcol(+note)] [argcol(<title>)]     - View your note named [argcol(<title>)]
  [pcol(+notes)]           - Get a list of your own notes
  [pcol(+notes/all)]       - View all your notes at once
  [pcol(+notes)] [argcol(here|<player>|<object>)]  - See the notes you can view on [argcol(<target>)]
  [pcol(+note/read)] [argcol(<target>)]/[argcol(<notename>)]  - Read the note named [argcol(<notename>)] on [argcol(<target>)]
  [pcol(+notes/sweep)]     - Check your current location for notes.

  [pcol(+note/public)]  [argcol(me|here|<object>)]/[argcol(<title>)]=[argcol(<text>)]
  [pcol(+note/private)] [argcol(me|here|<object>)]/[argcol(<title>)]=[argcol(<text>)]
  [pcol(+note/provehere)] [argcol(<title>)]
  [pcol(+note/prove)] [argcol(<title>)]=[argcol(<player>)]

  Notes are set on yourself and objects you control using the /public and /private switches.

  Public notes are viewable by anyone. Private notes are viewable only by yourself and the appropriate staff. There are 'secret' notes which can be set on you by staff that are only viewable by the appropriate staff. The /sweep option allows a player to see which players and objects in the current location have viewable notes.

  When viewing notes on the current room, [argcol(here)] can be used for [argcol(<target>)] instead of the room name. Likewise for exits, any alias you would use to go through the exit (such as [argcol(o)] for the exit [pcol(Out <O>)]).

Continued in +notes2
[footer()]
& +notes2
[header(Unified Notes System - Page 2)]
  All notes have a status associated with them. These status are NOTREVIEWED, APPROVED, REJECTED, and LOCKED. When a note is set or adjusted its status is set to NOTREVIEWED to indicated that staff has not reviewed the note for approval or rejection.

  The APPROVED status states that a note has been reviewed and endorsed by staff. A REJECTED status indicates that the note has been reviewed by staff who has refused endorsement. Notes with the LOCKED status are considered APPROVED but they cannot be edited by the player.

  A private note can be 'proven' to another player. The /provehere option will display the private <note> to everyone in the room. The /prove option will display the private <note> only to the specified <player>

See Also: +view
[footer()]

& +rprooms
[header(+rprooms)]
[mudname()] features a set of "RP Rooms" located off the OOC Nexus that can be reserved by players and configured to function as any location.

  [pcol(+rprooms)]  - Lists the RP Rooms and which are available.
  [pcol(+rprooms/reserve)]  - Reserve an RP room for 24 hours (room selected automatically)
  [pcol(+rprooms/reserve)] [argcol(<hours>)]  - Reserve an RP room for a specific number of hours.
  [pcol(+rprooms/checkout)] [argcol(<room number>)]  - Unreserve and reset a given RP Room
  [pcol(+rprooms/desc)] [argcol(<room number>)][pcol(=)][argcol(<description>)]  - Set the description for an RP
                                               Room. (Blank to clear)
  [pcol(+rprooms/view)] [argcol(<room number>)][pcol(/)][argcol(<name>)][pcol(=)][argcol(<view>)]  - Set a +view on a room.
  [pcol(+rprooms/renew)] [argcol(<room number>)]               - Extend your reservation on an
                                               RP Room.
  [pcol(+rprooms/cleanup)] [argcol(<room number>)]  - Reset an RP Room to its original state, removing occupants.
  [pcol(+rprooms/expire)]  (Staff Only)  - Clear expired reservations and cleanup.
[footer()]

& +risk
[header(+risk)]
  [pcol(+risk/set)] [argcol(<level>)]  - Sets your risk level to [argcol(<level>)].
  [pcol(+risk/here)]  - Lists everyone present's risk level and notifies them that it has been checked.

+risk allows players to set their risk level and check the risk level of players in the current location (or of the location itself). This first command sets your risk level and must be between [argcol(0-3)]. The second command checks the risk level of your location and its occupants. Note that everyone present is notified of the check. Also note that you can always see your own risk level on your character sheet.

To ensure that you don't see other player's risk checks, do the following:
  [pcol(&RISK_QUIET)] [argcol(me)]=[argcol(yes)]

For more information: +policy risk
[footer()]

& +shift
[header(+shift)]
+shift, or, How to effectively deal with change.

  [pcol(+shift/forms)]   - List available forms
  [pcol(+shift)] [argcol(<form>)]  - Shift to <form>
  [pcol(&DATA_ASHIFT me=)][argcol(command;command;command)]
  [pcol(&DATA_ASHIFT_)][argcol(<form>)] [pcol(me=)][argcol(command;command;command)]

Shifters, masters of Protean, and others have the ability to shapeshift and gain stat modifications. This is captured in the [pcol(+shift)] command.

[pcol(+shift/forms)] will list what forms are available to you and what stat modifications they have. Your available forms may be based on race, tribe, level of a power, or other stats. If you have forms available that you don't expect or seem to be missing forms, please contact staff.

[pcol(+shift)] will change your form. If you've changed your form at least once your Current Form will show up on your character sheet. When you +shift, any stat changes given by your current form are cancelled, any stat changes for your new form are set, and optionally, a form-specific description is set on your character.

The [pcol(+shift)] system can also trigger commands when shifting. For each form you can set a [pcol(DATA_ASHIFT_)][argcol(<form>)] with a set of commands to be run when shifting into that form. Each form can have its own set of commands to be triggered. Optionally, commands stored in [pcol(DATA_ASHIFT)] will be triggered if no form-specific ASHIFT is present. For all ASHIFT triggers, the name of the form will be passed as %%0. [argcol(WARNING)]: Under no circumstances should you put a [pcol(+shift)] in one of your [pcol(ASHIFT)] triggers. The result will be shifting over and over again in an unending loop.

It is possible to have custom forms set on your character representing either unique forms or modifications to common forms (Protean, Demon, etc). To request a form with custom stats, please submit a [pcol(+request)].

See Also: +effects
[footer()]

& +prove
[header(Proving Stats)]
  [pcol(+prove/base)] [argcol(here)]|[argcol(<player>)]=[argcol(<stat>)]/[argcol(<value>)]
  [pcol(+prove/eff)] [argcol(here)]|[argcol(<player>)]=[argcol(<stat>)]/[argcol(<value>)]
  [pcol(+prove/maxbase)] [argcol(here)]|[argcol(<player>)]=[argcol(<stat>)]/[argcol(<value>)]
  [pcol(+prove/maxeff)] [argcol(here)]|[argcol(<player>)]=[argcol(<stat>)]/[argcol(<value>)]

The [pcol(+prove)] command allows one player to prove to another that they posess a stat of at least a certain value. A player can prove either their base stat (the stat without modifications or bonuses) or the effective stat (the stat with all modifications and bonuses). The stat can be proven to a specific player by specifying their name or alias, or proven to an entire room with [argcol(here)].

The name of the stat can be abbreviated, as long as the abbreviation matches only one stat on their +sheet. For example, [argcol(str)] will work for many characters but not for those with [pcol(streetwise)] because they both begin with [argcol(str)].

The value proven doesn't need to be the player's actual stat. If your strength is [pcol(4)], you can use [argcol(+prove/base here=stren/2)] to prove that it as [pcol(at least 2)].

[argcol(maxbase)] or [argcol(maxeff)] proves that the player's stat is [pcol(at most)] that amount.

See Also: +sheet   +effects
[footer()]

& +hangouts
& +dir
[header(+hangouts and +dir)]
  [pcol(+hangouts)]                        [pcol(+dir)]
  [pcol(+hangouts/all)]                    [pcol(+dir/all)]
  [pcol(+hangout/jump)] [argcol(<hangout>)]          [pcol(+dir/jump)] [argcol(<directory entry>)]
  [pcol(+hangout/map)] [argcol(<hangout>)]           [pcol(+dir/map)] [argcol(<directory entry>)]

The [pcol(+hangouts)] command will display a list of hangouts that you can see and how many players are online at that location. Some hangouts are 'restricted'; you must meet certain criteria to see them. Usually this is based on your faction. Restricted hangouts that you can see are marked with a star. By default, [pcol(+hangouts)] will only show occupied hangouts. To see all hangouts, use [pcol(+hangouts/all)].

The [pcol(+hangout/jump)] command allows you to jump to a hangout by name. You can only jump to hangouts you can see. You don't need to type the entire name of the hangout. As long as whatever you type matches a hangout you'll be sent there. For example:

  [pcol(+hangout/jump)] [argcol(mapl)]  - Sends you to Maple Park

Note: /jump will actually put you [pcol(outside)] the destination, allowing you to make a grand entrance.

[pcol(+hangout/map)] shows you where a hangout is located, in case you want to describe its location in a pose while you're somewhere else.

[pcol(+dir)] is a more specialized business directory that works the same way as +hangouts.
[footer()]

& +heal
& +hurt
[header(+heal/+hurt)]
  [pcol(+heal)] \[[argcol(<amount>)]|[pcol(all)]\]  - Heal some or all health levels
  [pcol(+hurt)] [argcol(<amount>)]        - Take some levels of damage (lose health levels)

  [pcol(+heal)]/[argcol(<type>)] [argcol(<amount>)]  - Heal a specified type of damage
  [pcol(+hurt)]/[argcol(<type>)] [argcol(<amount>)]  - Take a specified type of damage

The +heal and +hurt commands allow players to track damage on their character sheets. They allow you to take damage on your sheet and recover from it. A player cannot heal above full nor can they take damage below 1 health level (it's up to the player to decide that they are dead). The +heal and +hurt commands have no restrictions; they can be used by anyone at any time and are not dependent on any powers or abilities. It's up to players to use them properly with respect to their abilities, risk level, and game mechanics.

If [argcol(<type>)] is used, it can be 'bashing' or 'lethal' or 'aggravated' ('bash' or 'agg' also work). Use '[pcol(+mysheet combat)]' to see your damage by type. If you need to fix them, use [pcol(+gain)] or [pcol(+lose)] (note that they start at 0 and go up).

See Also: +sheet   +effects   +prove
[footer()]

& +dice
[header(+dice)]
  [pcol(+dice)] [argcol(<count>)]            - Roll [argcol(<count>)] dice showing the results to your room
  [pcol(+dice/me)] [argcol(<count>)]                - Roll [argcol(<count>)] dice privately to yourself
  [pcol(+dice/private)] [argcol(<player>)]=[argcol(<count>)]  - Roll [argcol(<count>)] dice privately to [argcol(<player>)]
  [pcol(+dice/p)] [argcol(<player>)]=[argcol(<count>)]        - Alias for [pcol(+dice/private)]

The [pcol(+dice)] command rolls [argcol(<count>)] d10s. There's no grading, no botches, just \(virtually\) tumbling quasi-regular solids with \(virtually\) inscribed numbers.

The first version shows the results to everyone in your location. The second shows the results only to you. The third shows them to yourself and a specific player. Use them with caution: your fate may depend on it.

[pcol(See Also:)] [argcol(columns(+roll|+combat,10,|))][footer()]

& +combat
[header(+combat)]
  [pcol(+combat/init)]                          - Roll initiative
  [pcol(+combat/init)] [argcol(<npc name>)]=[argcol(<wits + dex>)]  - Roll initiative for [argcol(<npc name>)] who
                                          has [argcol(<wits + dex>)]

Eventually [pcol(+combat)] will be a nifty system to streamline combat. Currently, only initiative is implemeted. The [pcol(+combat/init)] command rolls initiative for your character, adding your effective wits and dex to the roll of one die, showing the result to the room. No bonuses to initiative are taken into account: they should be noted OOC and +proven as needed.

The second version of the command will roll initiative for a named NPC. You must supply the total of their wits + dex. One die will be rolled and added, and the total will be shown to the room.

[pcol(See Also:)] [argcol(columns(+roll|+dice|+prove|+sheet|+effects,10,|))][footer()]

& +census
[header(+census)]
  [pcol(+census)]
  [pcol(+census)]/group [argcol(<vampire|shifter|mage|changeling|demon>)]

The +census command provides some numbers on character types by race and faction.

+census/group provides numbers on characters in that group (not including M+):
  * Vampire clans (Kuei-jin are treated as a single 'clan')
  * Garou tribes / Fera breeds
  * Mage Traditions / Conventions
  * Changeling kiths
  * Demon houses

Characters are only counted if:
  * They were approved at least six hours ago and:
  * They have logged in within the last week.

See Also: +roster
[footer()]

& +rent
[header(+rent)]
  [pcol(+rent/list)]                 - List rental properties
  [pcol(+rent/jump)] [argcol(<property>)]      - Teleport to a rental property
  [pcol(+rent/dir)]                  - List building tenants
  [pcol(+rent/lease)] [argcol(<unit>)]=[argcol(<name>)]  - Rent [argcol(<unit>)] as [argcol(<name>)]
  [pcol(+rent/unlease)] [argcol(<unit>)]       - Stop renting [argcol(<unit>)]
  [pcol(+rent/desc)] [argcol(here|<exit>)]=[argcol(<description>)]   - Sets the room or exit's description

[pcol(+rent/list)] will show a list of available rental properties on the grid.

[pcol(+rent/jump)] will teleport you to a rental property. You can use part of the property name like [argcol(coral)] or [argcol(sum)].

[pcol(+rent/dir)] will check the rental registry of your current location, listing who's occupying what apartments.

[pcol(+rent/lease)] will allow you to rent the apartment you choose, if you have the resources. You must be in the apartment building's lobby.

[pcol(+rent/unlease)] will stop the lease you have on the specified apartment. You'll probably lose your deposit, too.

[pcol(+rent/desc)] will set the description on the current room or named exit to the specified description. To set the description back to the default, set it equal to nothing:
  [pcol(+rent/desc)] [argcol(here)]=

The +rent system does [pcol(not)] prevent players from renting more apartments than they can afford. This may come later, but don't exceed your spending power!

[pcol(See Also:)] [argcol(columns(+lock,10,|))][footer()]

& +banality
[header(+banality)]
  [pcol(+banality)]       - Alias for [pcol(+banality/here)]
  [pcol(+banality/here)]  - Check banality in your current location.

Currently the [pcol(+banality)] command has only one option [pcol(/here)]. If you're a Changeling this command allows you to check the Banality of your current location and the effective Banality of those present.
[footer()]

& +sheettally
[header(+sheettally)]
  [pcol(+sheettally)]          - View dot tallies of some sheet sections
  [pcol(+sheettally)] [argcol(<player>)] - (Staff) View dot tallies of another player

The [pcol(+sheettally)] command is intended to speed cgen for new characters and staff. It will inspect various sections of your +sheet and count the dots invested.
[footer()]

& +sheet
[header(+sheet)]
  [pcol(+sheet)]                - View your own sheet.
  [pcol(+sheet)] [argcol(<player>)]       - View another player's sheet (Staff)
  [pcol(+sheet/show)] [argcol(<player>)]  - Show your sheet to another player.

See Also: [argcol(+mysheet   +effects   +sheettally)]
[footer()]

& +xpreq
[header(XP Spend Request)]
  [pcol(+xpreq)] [argcol(<stat>)]/[argcol(<level>)]=[argcol(<cost>)]  - Submit an XP Spend Request

[argcol(NOTE:)] Before using [pcol(+xpreq)], see [pcol(+help +xpspend)].

This command submits a specially-formatted job to the XP Spend Request bucket. [argcol(<stat>)] is the stat you'd like to buy or increase. [argcol(<level>)] is the level requested, or [pcol(NA)] or [pcol(0)] if it's not relevant. [argcol(<cost>)] is the expected cost of the XP spend. If the actual cost is less, the player will be charged less. If the cost is more, the job will be updated asking the player what they want to do.

When the command is run, it will open a new job for the player. This job can be viewed and updated with [pcol(+myjobs)]. If the spend might require justification or you have questions about it you can add those to the job once the job has been opened.

See Also:  +myjobs   +xpspend
[footer()]

& +roster
[header(+roster)]
  [pcol(+roster/list)]           - List rosters available to you
  [pcol(+roster)]                - List rosters available to you
  [pcol(+roster)] [argcol(<roster name>)]  - Display a roster
  [pcol(+roster/on)] [argcol(<roster name>)]  - Display a roster with only those online.
  [pcol(+roster/all)] [argcol(<roster name>)] - Display a complete roster
  [pcol(+roster/optin)] [argcol(<roster name>)]   - Include yourself in an opt-in roster.
  [pcol(+roster/optout)] [argcol(<roster name>)]   - Exclude your self from an opt-in roster.

The [pcol(+roster)] command allows players to see a list of characters related to them, usually by faction or sphere. The output is based on current information and may be incomplete where things are missing from someone's +sheet. By default, only players that have logged in in the last two weeks appear. To see everyone, use [pcol(+roster/all)].

Some rosters are opt-in; players must explicitely include themselves in the roster to see it or be shown in it. Opt-in rosters are indicated in the [pcol(+roster)] list by a [argcol(+)] or [argcol(-)] sign. The [argcol(+)] indicates an opt-in roster you're decided to include yourself in. The [argcol(-)] indicates a roster you haven't decided to include yourself in.

An asterisk (*) next to a player name indicates that they are currently online. A hyphen (-) next to a player name indicates the player last logged in over two weeks ago.

See Also: +census
[footer()]

& +boons
[header(+boons)]
  [pcol(+boons)]                                 - List current boons and offers
  [pcol(+boon/offer)] [argcol(<player>)]=[argcol(<status>)]/[argcol(<terms>)]  - Offer a boon to player
  [pcol(+boon/cancel)] [argcol(<player>)]                  - Cancel a boon offer you've made
  [pcol(+boon/reject)] [argcol(<player>)]                  - Reject a boon offered to you
  [pcol(+boon/accept)] [argcol(<player>)]                  - Accept a boon from <player>
  [pcol(+boon/forgive)] [argcol(<#>)]                      - Forgive a boon owed to you

Boons are how Acknowledged Camarilla vampires track favors. When a vampire renders a favor for another, she is loaned some status until the favor is repaid. The [pcol(+boon/offer)] command allows a vampire to offer another a favor, borrowing a certain amount of status in the meantime and specifying the terms under which it should be considered "repaid".

An acknowledged vampire can check their current boons and offers with [pcol(+boons)]. Any boon offers can be withdrawn with [pcol(+boon/cancel)]. Any boons a kindred has been offered can be rejected with [pcol(+boon/reject)].

To accept a boon and temporarly loan some of your status, use [pcol(+boon/accept)]. To forgive a boon you're owed (usually repaid) and return the status you've been borrowing, use [pcol(+boon/forgive)].
[footer()]

& +renownreq
[header(Renown Request)]
  [pcol(+renownreq)] [argcol(<types>)]=[argcol(<deed>)]

Example:
  [pcol(+renownreq)] [argcol(honor wisdom)]=[argcol(I mediated a dispute between a furious Ahroun and a young Galliard by finding a common ground)]...

This command submits a specially-formatted job to the Renown Request bucket. [argcol(<types>)] is the list of renown types relevant to the request. [argcol(<deed>)] is brief summary of the deed that demonstrated those types of renown. Each item in [argcol(<types>)] must have a corresponding temporary renown stat. For example, the code checks that you have [argcol(Temp Infamy)] on your sheet when you submit a request for [argcol(infamy)]. If the appropriate temp renown is missing from your sheet, submit a request to have it added.

When the command is run, it will open a new job for the player. This job can be viewed and updated with [pcol(+myjobs)]. If the request might require justification or you have questions about it you can add those to the job once the job has been opened.

See Also: +renown
[footer()]

& +effects
[header(+effects)]
  [pcol(+effects)]
  [pcol(+effects/clear)]

The Effects System allows code to make temporary stat changes to a character without modifying the actual stats. Effects can expire or require an opposite (negative) effect to cancel them out. Expiring effects have a time after which they are no longer counted. Cancelled effects don't go away until negated. For example, a +2 Strength might persist until you get two -1 Strength effects.

Your [pcol(+sheet)] shows two numbers for most stats: first the effective stat, then the base stat. The base stat is the normal level for that stat. When you spend XP to increase a stat you are increasing the base stat. The effective stat is the base stat, plus all the currently active (not expired) effects. [pcol(+roll)] and similar commands always use effective stat.

The [pcol(+effects)] command will show you the effects currently set on your character. [pcol(+effects/clear)] will remove expired and negated effects. Note: If everything is working properly, [pcol(+effects/clear)] should not cause any of your effective stats to change; it merely cleans up effects that aren't in play. Also note: effects are cleaned up for logged in players every 30 minutes.

See Also: +sheet
[footer()]

& +buildreq
[header(+buildreq)]
  [pcol(+buildreq)] [argcol(<project name>)]/[argcol(<number of rooms>)]=[argcol(<explanation>)]

The [pcol(+buildreq)] command submits a building project request to staff. Each building project needs a name and staff needs to know how many rooms to build. You should also provide an explanation of what the build project is, what the rooms should be (Main room, Office, and Bottomless Pit), and whether or not your character would own the property in-character. When the job is created, it will include your level of resources: this is just for staff reference.

See Also: +bhelp   +bhelp +build
[footer()]

& +gain
& +lose
[header(+gain/+lose)]
  [pcol(+gain/list)]
  [pcol(+lose/list)]

  [pcol(+gain)] [argcol(<stat>)]
  [pcol(+lose)] [argcol(<stat>)]

The [pcol(+gain)] and [pcol(+lose)] commands are used to spend and refresh pools. The [pcol(/list)] versions show what stats can you can adjust and whether or not they can currently be adjusted. The stats listed depend on your character sheet and whether or not they can be adjusted is determined by whether the pool is empty, full, or in-between.

Each time you use [pcol(+gain)] or [pcol(+lose)] on a stat, that stat is adjusted by one point. You and staff see the exact stat adjusted. Other players see a label that is intended to hide your supernatural type. For example, spending most pools such as Blood, Rage, Gnosis, Glamour, etc, are shown to other players as spending Magical Essence.

See Also: +effects   +heal
[footer()]

& +mysheet
[header(+mysheet)]
  [pcol(+mysheet)]
  [pcol(+mysheet)] [argcol(<sheet name>)]
  [pcol(+mysheets)] [argcol(<sheet name>)] [argcol(<sheet name>)] ...
  [pcol(+mysheet/show)] [argcol(<sheet name>)]=[argcol(<player>)]

The [pcol(+mysheet)] command allows players to make their own custom versions of [pcol(+sheet)] for their own use. With no arguments, [pcol(+mysheet)] lists which custom sheets you have available. Use [pcol(+mysheet)] [argcol(<sheet name>)] to display the custom sheet to yourself. Use [pcol(+mysheet/show)] to display a custom sheet to another player.

All players have two standard entries:

  [pcol(+mysheet)] [argcol(combat)] includes common combat stats, including Bashing / Lethal / Aggravated which can be updated via [pcol(+gain)] or [pcol(+lose)] or [pcol(+help)] or [pcol(+hurt)]. These are how much damage you've taken, so they start at 0 and go up.

  [pcol(+mysheet)] [argcol(counters)] includes ten arbitrary counters, which you can [pcol(+gain)] and [pcol(+lose)] to track anything you want. You need to [pcol(+gain)] or [pcol(+lose)] 'Counters' first, to select how many you're going to use.

To create a custom sheet, first choose a name. In this example we'll call it [argcol(Butt Sniffing)]. There are a handful of stats we want to see on this sheet. We set the following attribute on ourselves:

  [pcol(&LIST_MYSHEET_BUTT_SNIFFING me=)][argcol(Strength|Stamina|Health|Rituals|Gnosis|Primal Urge)]

Note that the name of the attribute must not use spaces. The list of stats are separated with pipe characters \([argcol(|)]\) and can have spaces. Only numeric stats will function properly. Now [argcol(Butt Sniffing)] shows up in [pcol(+mysheet)]:

  [pcol(+mysheet)]
  [header(My Sheets)]
    [pcol(Butt Sniffing)]
  [footer()]

And we can view the sheet:

  [pcol(+mysheet butt sniffing)]
  [header(My Sheet: [argcol(Butt Sniffing)])]
    [pcol(Strength.........)][argcol(03/03)]  [pcol(Stamina..........)][argcol(00/00)]  [pcol(Health...........)][argcol(07/07)]
    [pcol(Rituals..........)][argcol(00/00)]  [pcol(Gnosis...........)][argcol(00/00)]  [pcol(Primal Urge......)][argcol(00/00)]
  [footer()]

See Also: +sheet
[footer()]

& reality
[header(Reality Levels)]
  Currently Implemented:
    FAEDESC, Seeing Fae
    UMBRADESC, Seeing, Entering Umbra
    WRAITHDESC, Seeing, Entering Wraith

  Not Implemented:
    Invisiblity

  Commands:
    +rsee, +runsee, +rexist, +rpeek, +rstep, +rreset, +rscan

See Also: +reality   +rpeek   +rsee   +rexist   +rreset   +rscan   Fae   Umbra   Wraith   Reality Posing
[footer()]

& +rsee
& +runsee
[header(+rsee)]
  [pcol(+rsee)] [argcol(<reality>)]
  [pcol(+runsee)] [argcol(<reality>)]

The [pcol(+rsee)] and [pcol(+runsee)] commands allow players to activate and deactivate sight into various realities, such as FAE and UMBRA. This provides you with the ability to see FAEDESC, UMBRADESC, etc on players, objects, exits, and rooms.

See Also: reality   +rreset   +rpeek
[footer()]

& +rreset
[header(+rreset)]
  [pcol(+rreset)]

This command will set a player's reality levels back to a safe default state. This command is very useful in fixing reality level problems.
[footer()]

& +rscan
[header(+rscan)]
  [pcol(+rscan)] [argcol(<reality>)]

This command will tell you whether anyone else in the room can see the specified reality level. (No sense posing to a nonexistent audience.) It does not specify who they are.
[footer()]

& fae reality
[header(Fae Reality)]
  [pcol(Reality Name:)] [argcol(Fae)]
  [pcol(Description:)] [argcol(&FAEDESC me=Oh my God... It's full of glitter!)]

[argcol(Can be seen by:)]
  * Changelings
  * Kinain
  * Bygones
  * Enchanted characters
  * Characters with Spirit Sight merit
  * Mages with Spirit or Dimensional Science sphere
      - Should first roll (Arete vs 4)
      - Should only be used if the mage also has Lore Changeling
  * Kiasyd with Mytherceria 2 (Fae Sight)

[argcol(Can be entered by)] anyone who can see it (via a rath/trod, not +rstep)

See Also: Reality   +rsee   +rpeek   +enchant
[footer()]

& +rpeek
[header(+rpeek)]
  [pcol(+rpeek)] [argcol(<target>)]/[argcol(<reality>)]

The +rpeek command temporarily turns on viewing of [argcol(<reality>)], @forces you to look at [argcol(<target>)] (which can be "here", "me", a player, an object, a room, or an exit), then turns viewing of that reality back off if it weren't previously on.

See Also: reality   +rsee
[footer()]

& +enchant
[header(+enchant)]
  [pcol(+enchant)] [argcol(<player>)]=[argcol(<days>)]

Allows Changelings, Kinain, Mages with Spirit 2, and staff to enchant a player for given number of days. This places an effect on the player called [argcol(Fae Enchantment)] with the appropriate expiration. This effect allows the player to use [pcol(+rsee)], [pcol(+rpeek)], and other related commands to access [argcol(FAE)] reality. The target player cannot refuse or remove the effect. However, it's up to the target player to act on the enchantment with [pcol(+rsee)], etc.

See Also: +rsee   +rpeek    +rreset    reality   fae   +effects
[footer()]

& +spam
[header(+spam)]
Sponge writes code, Sponge loves data. Everyone loves data! Sponge code gives you data! But maybe you don't want all that data all the time.

  [pcol(+spam)]
  [pcol(+spam/off)]
  [pcol(+spam/on)]
  [pcol(+spam/addchan)] [argcol(<channel alias>)]
  [pcol(+spam/delchan)] [argcol(<channel alias>)]
  [pcol(+spam/onwatch)] [argcol(<+watch mode>)]
  [pcol(+spam/offwatch)] [argcol(<+watch mode>)]

The [pcol(+spam)] command makes it easier to control the amount of noise you receive. With it you can quickly disable and reenable common sources of distracting messages such as channels and +watch notifications. The command [pcol(+spam)] shows your current settings. [pcol(+spam/on)] will join the channels you specify and set the desired [pcol(+watch)] mode. [pcol(+spam/off)] will leave the channels you specify and set the desired [pcol(+watch)] mode.

The [pcol(+spam)] command maintains a list of channels that you consider spammy. You add and delete channels from this list using [pcol(+spam/addchan)] and [pcol(+spam/delchan)]. You must specify the channel alias. If you want your own code to manage this list, the relevant attribute on your character bit is [argcol(LIST_SPAM_CHAN)]. If I consider the Public channel to be spammy and I have its alias set to pub, I would run:
  [pcol(+spam/addchan)] [argcol(pub)]

The [pcol(+spam)] command also notes what mode you want [pcol(+watch)] to be in when spam is turned on and turned off. Use the [pcol(+spam/onwatch)] and [pcol(+spam/offwatch)] to set those modes. For example, I when I have spam turned on I want [pcol(+watch)] set to [argcol(QUIET)] and when I have spam turned off I want [pcol(+watch)] set to [argcol(OFF)]. I would do the following:
  [pcol(+spam/onwatch)] [argcol(QUIET)]
  [pcol(+spam/offwatch)] [argcol(OFF)]

See Also: +watch
[footer()]

& umbra reality
[header(Umbra Reality)]
  [pcol(Reality Name:)] [argcol(Umbra)]
  [pcol(Description:)] [argcol(&UMBRADESC me=Who you callin' a gaffling?)]

[argcol(Can be seen by:)]
  * Shifters
      - Should first roll (Gnosis vs Gauntlet + 3)
  * Characters with Spirit Sight merit
  * Mages with Spirit or Dimensional Science sphere
      - Should first roll (Arete vs 4)
  * Tremere with Spirit Manipulation
      - Should first spend BP and roll (Willpower vs 4)
  * Possessed with Spirit Sense
      - Should first spend WP and roll (Perception vs Gauntlet)
  * Vampires with Auspex 5 (Psychic Projection)
      - Should first spend WP and roll (Perception + Occult vs average 7)
  * Kuei-jin (Yang - Lifesight)
      - Should first roll (Perception + Occult vs Gauntlet + 2)
  * Bygones with Spirit Vision
  * For unusual cases, staff can add 'Umbra Sight' via +effect

[argcol(Can be entered by:)]
  * Garou, Ajaba, Ananasi, Corax, Kitsune, Nuwisha, Ratkin
  * Bastet with Walking Between Worlds (level 4, 2 for Swara) or Den Realm
  * Gurahl with Umbral Affinity merit
  * Mokole with Walking Between Worlds (level 3, 2 for Shrouded/Decorated Sun)
  * Rokea with Enter Sea's Soul (level 2) or Swim Sideways merit
      - All of these should first roll (Gnosis vs Gauntlet)
  * Gurahl with Rite of Rending the Gauntlet (level 1)
      - Should first spend Gnosis and roll (Charisma + Rituals vs Gauntlet)
  * Rokea with Rite of Passing the Net (level 2)
      - Should first roll (Charisma + Rituals vs 7)
  * Mages with Spirit or Dimensional Science 3 (Stepping Sideways)
      - Should first roll (Arete vs Gauntlet)
  * Vampires with Auspex 5 (Psychic Projection)
      - Should first spend WP and roll (Perception + Occult vs average 7)
  * Kuei-jin with Yang Prana 5 (Semblance of the Scarlet Queen)
      - Should first spend 3 Yang and roll (Yang + Rituals vs Gauntlet)
  * Kuei-jin with Rite of Imbuing the Jade (level 3)
      - Should first spend 2 Chi
  * Kuei-jin with Rite of Supplication (level 4)
      - Only at a Dragon Nest (or caern, node, balefire)
      - Should first roll (Yang vs Gauntlet + 4, minimum 6)
  * For unusual cases, staff can add 'Enter Umbra' via +effect
      - Includes bygones with Spirit Travel targeting the Umbra

See Also: Reality   +rsee   +rpeek   +enchant   gauntlet
[footer()]

& gauntlet
[header(Gauntlet)]
Based on WtA Revised pages 225 and 159, MtA Revised page 209

9  Science lab
8  Inner city / downtown
7  Most places
6  Rural countryside
5  Deep wilderness
4  Level 1-2 caern / node
3  Level 3-4 caern / node
2  Level 5 caern / node

Nodes sanitized by the Technocracy count as science labs for anyone else.
[footer()]

& wraith reality
[header(Wraith Reality)]
  [pcol(Reality Name:)] [argcol(Wraith)]
  [pcol(Description:)] [argcol(&WRAITHDESC me=Do these protruding hip bones make my ass look fat?)]

[argcol(Can be seen by:)]
  * Wraiths
  * Characters with Medium or Spirit Sight (level 4 only) merit
  * Demons with Lore of Realms 2 (Step Beyond the Veil) or 3 (Ghostwalk)
      - Should first roll 2: (Dexterity + Awareness vs Shroud)
                          3: (Stamina + Awareness vs Shroud)
  * Mages with Spirit or Dimensional Science sphere
      - Should first roll (Arete vs 4)
  * Giovanni/Samedi with Ash Path (Necromancy)
      - Should first roll (Perception + Alertness vs 7)
  * Sluagh
      - May(?) need to first spend Glamour or roll (Perception + Kenning vs 7)
  * Psychics with Channeling 2
      - Should first roll (Perception + Awareness vs Shroud)
  * Kuei-jin (Yin -> Ghostsight)
      - Should first roll (Perception + Occult vs Shroud + 2)
  * Bygones with Spirit Vision
  * For unusual cases, staff can add 'Wraith Sight' via +effect

[argcol(Can be entered by:)]
  * Wraiths
  * Nuwisha with Shadow Walk (level 3)
      - Should first roll (Gnosis vs 7)
  * Demons with Lore of Realms 2 (Step Beyond the Veil) or 3 (Ghostwalk)
      - Should first roll 2: (Dexterity + Awareness vs Shroud)
                          3: (Stamina + Awareness vs Shroud)
  * Silent Striders with Rite of Descent into the Underworld (level 3)
      - Should first roll (Intelligence + Rituals vs 7) and to enter Umbra
  * Mages with Spirit or Dimensional Science 3 (Stepping Sideways)
      - Should first roll (Arete vs Shroud)
  * Giovanni/Samedi with Ash Path 4 (Ex Nihilo)
      - Should first spend 2 WP and 2 BP and roll (Stamina + Occult vs 8)
  * Kuei-jin with Yin Prana 5 (Semblance of the Ebon Dragon)
      - Should first spend 3 Yin and roll (Yang + Rituals vs Shroud)
  * Kuei-jin with Rite of Imbuing the Jade (level 3)
      - Should first spend 2 Chi
  * Kuei-jin with Rite of Supplication (level 4)
      - Only at a Dragon Nest (or caern, node, balefire)
      - Should first roll (Yin vs Gauntlet + 4, minimum 6)
  * For unusual cases, staff can add 'Enter Wraith' via +effect
      - Includes bygones with Spirit Travel targeting the Shadowlands

See Also: Reality   +rsee   +rpeek   +enchant   shroud
[footer()]

& shroud
[header(Shroud)]
Reference: WtO 2nd page 240

10  A shopping mall on a sunny spring day
 9  A clean subway station in the afternoon
 8  A well-cared for home with no violent history
 7  A crowded, dim club playing Top 40
 6  A country crossroads on a moonless night
 5  Old mansion where brutal murders were committed
 4  Deserted cemetery at midnight on a full moon
[footer()]

& +invoke
[header(+invoke)]
  [pcol(+invoke)] [argcol(<name>)]=[argcol(<text>)]

This command is similar to [pcol(+phone)], but represents invoking a demon by mentioning their Celestial Name.

Only demons and thralls can use this command. [argcol(<name>)] should be the demon's OOC name or alias.
[footer()]

& +equipreq
[header(Equipment Request)]
  [pcol(+equipreq)] [argcol(<item>)]=[argcol(<explanation>)]

The [pcol(+equipreq)] command submits a request for equipment. Equip requests are processed most quickly when they refer to an item in [pcol(+equip/types)], at least as a basis.

[pcol(NOTE:)] There is no need to submit equipment requests for items that can be bought retail with no ID check. This includes hatchets, clubs (bats), phones and excludes firearms and body armor.

See Also: +equip   +note   +xpreq    +buildreq   +renownreq    +request
[footer()]

& +reality
[header(+reality)]
  [pcol(+reality)]

The [pcol(+reality)] command shows you information about your current reality levels. This command is very helpful for diagnosis reality level weirdness.

See Also: Reality
[footer()]

& +rexist
[header(+rexist)]
  [pcol(+rexist/on)] [argcol(<reality>)]
  [pcol(+rexist/off)] [argcol(<reality>)]

The [pcol(+rexist)] command allows you to control which realities you appear in. Appearing in a given reality has two important implications:
  * You must exist in a given reality for players to see that reality's desc. For example, you must [pcol(+rexist/on)] [argcol(fae)] before anyone can see your [argcol(FAEDESC)].
  * If you exist in a given reality, players that can see that reality can see you and your poses and emits, [pcol(even if you can't see them)]. For example, if you exist in [argcol(FAE)] reality, players in the same room in the Dreaming can see your poses. This means you could potentially be spied on, without your knowledge.

Until otherwise stated, it is acceptable to turn off existing in all special realities during intimate scenes for the sake of privacy. If you normally would exist in those realities, they should be turned on when not in intimate scenes.

See Also: reality   +reality    +rsee   FAE   UMBRA   WRAITH
[footer()]

& +equip
[header(+equip)]
  [pcol(+equip/types)]                - View all item types
  [pcol(+equip/types)] [argcol(<category>)]     - View all item types in category [argcol(<category>)]
  [pcol(+equip/types)] [argcol(<type number>)]  - View item type with number [argcol(<type number>)]

  [pcol(+equip)]                       - View items you have
  [pcol(+equip)] [argcol(<item>)]                - View a specific item by ID or name.
  [pcol(+equip/name)] [argcol(<item>)]=[argcol(<name>)]    - Rename an item.
  [pcol(+equip/show)] [argcol(<item>)]=[argcol(<player>)]  - Show an item to a player.

The equipment system organizes and standardizes in-game items.

Each item types belongs to one or more categories; a [pcol(Light Pistol)] belongs to categories [argcol(FIREARM)] and [argcol(WEAPON)]. Every item type also has a distinct ID number.

  To view all item types in the system, use [pcol(+equip/types)] with no arguments.
  To view only item types within a specific category, use [pcol(+equip/types)] [argcol(<category>)].
  To view the stats for a specific item type, use [pcol(+equip/types)] [argcol(<item number>)].

Each player has their own item inventory. Every item in the system has a six-digit ID number ([argcol(123456)]).

  To see a list of your equipment: [pcol(+equip)]
  To view a specific item: [pcol(+equip)] [argcol(<item>)]
    All items can be specified by their ID number or the name if they've been given a name.
  To set a name for your item: [pcol(+equip/name)] [argcol(<item>)]=[argcol(<new name>)]
  To show an item to another player: [pcol(+equip/show)] [argcol(<item>)]=[argcol(<player>)]

[pcol(NOTE:)]
  * Missing features: Transferring, Dropping, Stashing, and Wearing/Concealing items.

See Also: +notes   +equipreq
[footer()]

& +shelby
[header(+shelby)]
  [pcol(+shelby/on)]
  [pcol(+shelby/off)]

Shelbyville is a city adjacent to but separate and distinct from Prospect. It has many similar features and if you didn't know you were there, you might think you were in Prospect. Shelbyville provides a place for PRPs and scenes that would be undesirable to hold in Prospect.

See Also: +reality   +rreset
[footer()]

& +statsearch
[header(+statsearch)]
  [pcol(+statsearch)] [argcol(<search string>)]

The [pcol(+statsearch)] command will search through the stats database for a stat with a name containing the search string and tell you want type of stat it is. It's easier tried than explained. Do;
  
  [pcol(+statsearch)] [argcol(spir)]

See Also: +liststats   +stattypes
[footer()]

& +stattypes
& +liststats
[header(+liststats)]
  [pcol(+stattypes)]
  [pcol(+liststats)] [argcol(<category>)]

The first command lists the categories of stats available.

The second lists the stats within a given category.

See Also: +statsearch
[footer()]

& help on help
& helphelp
[header(Help On Help)]
MUSH commands are usually documented in a standard format that looks strange to newcomers.

Like:
  [pcol(+note/private)] [argcol(me|here|<object>)]/[argcol(<title>)]=[argcol(<text>)]

Or:
  [pcol(look)] [argcol(\[<object>\])]

What the crap does that mean?

Those special symbols are there to help you interpret how the command works. They seem confusing but they're pretty simple once you know what they mean:

  [argcol(<name>)] - Angle brackets indicate a prompt. You don't type "<name>" or "name". You provide a name: Dave, Red Door, Boulder. In the [pcol(+note)] example above, [argcol(<object>)] indicates you should provide an object name, [argcol(<title>)] indicates you should give a note title, and [argcol(<text>)] indicates you should give the note text.

  [argcol(Larry|Moe|Curly)] - The Pipe (|) separates a list of choices. Larry, Moe, and Curly are all valid choices. In the [pcol(+note)] command above, "me", "here", and an object name are all valid choices.

  [argcol(\[here\])] - This is optional. In this example, you can type "here" if you want but are not required to. Depending on the command, it may change what the command does.


These can get complicated when combined:

  [argcol(me|here|<object>)] - "me" is a valid choice, "here" is a valid choice, or an object name is a valid choice.

  [argcol(\[<object>\])] - You can provide the name of an object if you want. You can give the [pcol(look)] command the name of an object to look at, but it's optional. If you don't give an object name, you look at the room you're in.
  

The above is part of what is called Backus-Naur Form (BNF). Wikipedia has an article on it, but the article makes it sound more complicated than it really is.
[footer()]

& +rstep
[header(+rstep)]
  [pcol(+rstep/in)] [argcol(<reality>)]  - Enter [argcol(<reality>)]
  [pcol(+rstep)] [argcol(<reality>)]     - Alias for [pcol(/in)]
  [pcol(+rstep/out)]           - Return to the real world

The [pcol(+rstep)] commands allow you to enter and leave other realities, such as the Umbra or Shadowlands. [pcol(+rstep/in)] will leave the real world and enter the reality you specify. [pcol(+rstep/out)] will bring you back to the real world from another reality.

To see which realities you can enter, use [pcol(+reality)]. If you find yourself with broken reality settings, [pcol(+rreset)] will wipe your reality levels (not descs) and put you squarely back in the real world.

See Also: reality    +reality   +rreset
[footer()]

& +book
[header(+book)]
  [pcol(+books/genre)] [argcol(VtM|WtA|CtD|MtA|DtF|WtO)]
  [pcol(+book)] [argcol(<book ID>)]
  [pcol(+book/stat)] [argcol(<stat name>)]
  [pcol(+book/search)] [argcol(<title text>)]

  [pcol(+book/add)] [argcol(<genre>)]/[argcol(<book ID>)]=[argcol(<book title>)]
  [pcol(+book/addstat)] [argcol(<stat name>)]=[argcol(<book ID>)]/[argcol(<page number>)]

The [pcol(+book)] system is intended to ease looking stats and other book references. Players can add books to the system and add page numbers for stats. Once books and references are entered, they shouldn't need to be looked up again. All books are referred to by their White Wolf ID number (WW1234). All stats are referred to by the full stat name (Rite of the Winter Wolf).

The [pcol(+book/genre)] command will provide a (long) list of books in the database of that genre. Note that not everything in that list is approved for use on [mudname()].

The [pcol(+book/search)] command will show a list of books in the system that have [argcol(<title text>)] in the title. Try [pcol(+book/search)] [argcol(player)] and [pcol(+book/search)] [argcol(rat)] to see it in action.

The [pcol(+book)] [argcol(<book ID>)] command will provide more details about a book in the database.

The [pcol(+book/stat)] [argcol(<stat name>)] command will list all page references in the system for the stat. Note: It must be the full stat name. [pcol(+statsearch)] can help you find the stat name. Also note, the list of references might be incomplete.

The [pcol(+book/add)] [argcol(<genre>)]/[argcol(<book ID>)]=[argcol(<book title>)] command will add a new book into the system. Please take care to ensure that the title and IDs are correct. Also, before adding any books, take a look at some books already in the system to see how they look.

The [pcol(+book/addstat)] [argcol(<stat name>)]=[argcol(<book ID>)]/[argcol(<page number>)] command will add a new reference for a given stat. It must be the full stat name, just as with [pcol(+book/stat)]. Only the first page number is required.

[pcol(Examples:)]
  [pcol(+books/genre)] [argcol(WtA)]
  [pcol(+book)] [argcol(WW3104)]
  [pcol(+book/stat)] [argcol(intrigue)]

  [pcol(+book/add)] [argcol(vtm)]/[argcol(ww2302)]=[argcol(Guide to the Camarilla)]
  [pcol(+book/addstat)] [argcol(Intrigue)]=[argcol(ww2302)]/[argcol(68)]

See Also: +statsearch
[footer()]

& +note tutorial
& +notes tutorial
& note tutorial
& notes tutorial
[header(+note Tutorial)]
+notes are heavily used on [mudname()] and this quick tutorial should make you a +note pro in no time.

Notes can be public or private. Anyone can read public notes you set on yourself. Only you and staff can read private notes you set on yourself. Let's say I want everyone to know that I'm missing a finger. I can do that as a public note:
  [pcol(+note/public)] [argcol(me)]/[argcol(FINGER)]=[argcol(Sponge is missing the ring finger on his left hand. He was eating a sandwich too fast and too far.)]

I want staff to know about my Dark Secret in case it becomes in important, but I don't want everyone else to know:
  [pcol(+note/private)] [argcol(me)]/[argcol(DARK SECRET)]=[argcol(Sponge is anenomie.)]

I also have a talisman that protects me against fireflies. I keep it hidden but may need to show it to other players:
  [pcol(+note/private)] [argcol(me)]/[argcol(Firefly Talisman)]=[argcol(Sponge has a talisman that prevents fireflies from engaging him in combat.)]

I want to review the notes I've set on myself. I'll start by seeing a list of notes I've set on myself:
  [pcol(+notes)]

I can look at each not individually:
  [pcol(+note)] [argcol(finger)]
  [pcol(+note)] [argcol(dark)]
  [pcol(+note)] [argcol(talisman)]

I can look at them all at once:
  [pcol(+notes/all)]

I can see that all of them have the stats NOT REVIEWED. I can see that I set them and when.
I've decided to drop Dark Secret so I need to clear the note. I do this by setting it to nothing:
  [pcol(+note/private)] [argcol(me)]/[argcol(DARK SECRET)]=

I can now submit a +request to get my notes approved.

Continued in: +note tutorial 2
[footer()]

& +note tutorial 2
[header(+note Tutorial Continued)]
My request was completed and I can read my notes and see that they were approved by Coyote. Now that it's approved I shouldn't change it. Changing an approved note reverts it back to NOT REVIEWED.

I end up in a scene and Carl comes at me with a jar of Fireflies. He claims he wants to show me how pretty they are but I'm sure it's an attack. I need to show him they'll have no affect on me:
  [pcol(+note/prove)] [argcol(talisman)]=[argcol(Carl)]

Carl can see that it's approved by staff so his fireflies are useless. But then his horde shows up with jars of fireflies. Rather than prove the note to them individually, I can prove it to everyone present:
  [pcol(+note/provehere)] [argcol(talisman)]

Now I'm surrounded and I should check to see if there's anything here I need to worry about. I can everything in the room for notes:
  [pcol(+notes/sweep)]

I see Carl himself has a public note called BUG FOOD. I need to see what that's about, so I check:
  [pcol(+note/read)] [argcol(carl)]/[argcol(BUG)]

Oh no! He has special bug food that empowers bugs against magic!
[footer()]

& +xpspend
[header(+xpspend)]
  [pcol(+xpspend/list)]                 - See available self-service XP Spends
  [pcol(+xpspend/list)] [argcol(<partial stat>)]  - See available spends matching [argcol(<partial stat>)]
  [pcol(+xpspend/buy)] [argcol(<stat name>)]      - Increase a stat
  [pcol(+xpspend/explain)] [argcol(<stat name>)]  - Explain the coded rules for XP costs for a stat

The [pcol(+xpspend/list)] command will display what stats are available to raise with XP without staff intervention. You may specify part of a stat name to narrow down the list. For example, doing [pcol(+xpspend/list)] [argcol(str)] might show [argcol(Strength)], [argcol(Streetwise)], and [argcol(Chimerstry)]. The command automatically deducts the appropriate amount of XP, adds that same amount to your XP Spent total, increases the stat, and adds an entry in your [pcol(+xp/spent)] log.

If you're unsure why you're being shown a certain cost for a stat, or why a stat doesn't show as being available to you, try [pcol(+xpspend/explain)] [argcol(<stat name>)]. For example:
  [pcol(+xpspend/explain)] [argcol(chimerstry)]

Will show criteria to buy [argcol(Chimerstry)] at various costs. If no criteria are shown either the stat name was mistyped or there's nothing in the system to allow self-service XP spends for that stat. For common stats this is likely an oversight.

[pcol(NOTE:)] If a stat you should be able to buy/increase does not appear in [pcol(+xpspend/list)], use [pcol(+xpreq)] instead.

Stats can only be increased while out of character.

See Also: +xp   +xpreq
[footer()]

& +sendspongehome
[header(+sendspongehome)]
  [pcol(+sendspongehome)]

[moniker(#4)] has the attention span of a sponge sometimes. He leaves himself on the grid, not realizing where he is.

Help the poor guy out and send him home. This command only works when [moniker(#4)]:
  * At an IC location (on the grid)
  * In the same room as you
  * Idle at least 15 minutes
[footer()]

& +ambience
[header(+ambience)]
  [pcol(+ambience/on)]   - Enable the current room's ambience
  [pcol(+ambience/off)]  - Disable the current room's abmience

Ambience adds life to the grid but sometimes it gets in the way of RP. The above commands enable and disable ambience in the current room.

See Also: +bhelp ambience
[footer()]

& approved
[header(So You're Approved...)]
You've gotten the blessing to hit the grid. What do you do? How can you prepare? Will you get eaten by a grue? This guide can help you become a productive MU citizen, and not a drain on society like Ray.
  * We have a helpful map! [pcol(+help +map)]
  * You need a desc. Maybe lots of them! [pcol(help @desc)], [pcol(+help +desc)]
  * You want to hit the hot spots! [pcol(+help +hangouts)]
  * You need a place to live! [pcol(+help +rent)]
  * You need to know who your peeps are! [pcol(+help +roster)]
  * You want to chat with your peeps! [pcol(@clist)], [pcol(help addcom)]
  * You need to find a stat! [pcol(+help +statsearch)], [pcol(+help +book)]
  * You want to be in other realities (Dreaming, Umbra, etc)! [pcol(+help reality)]
  * You want custom +sheet: [pcol(+help +mysheet)]

When you're bored, just read random topics from [pcol(+help)]. You'll learn neat stuff!
[footer()]

& +remit
& Reality Posing
[header(Reality Posing)]
Problem: You're in the real world but you want to flap your chimerical arms like a chicken. You're running a shifter PRP and a bane is approaching in the Umbra but the kinfolk wouldn't know! Also, something about wraiths.

Normal posing is done using funky symbols: [pcol(" : ; \\\\ ')]. When you're in the real world you can make poses, emits, etc into the Dreaming, Penumbra, and Shadowland by prefixing the funky symbol with an [pcol(f)], [pcol(u)], or [pcol(w)] respectively. For example:

  [pcol(f\\\\A satyr approaches and more than his pride is swollen!)]
    Will emit to the Dreaming: [argcol(A satyr approaches and more than his pride is swollen!)]

  [pcol(u:steps carefully over the dripping husk of the slain bane.)]
    Will emit to the Penumbra: [moniker(#4)] [argcol(steps carefully over the dripping husk of the slain bane.)]

  [pcol(w"I hear you\, lost soul\, but I cannot see you!)]
    Will emit to the Shadowlands: [moniker(#4)] [argcol(says\, "I hear you\, lost soul\, but I cannot see you!")]

Note that the coded ability to use these commands does not imply the IC ability to do something in another reality that is not seen in the real world. For example, if your character can't make gestures in the Dreaming that wouldn't be seen in the real world, using these commands to do that is abuse of the commands.

See Also: reality
[footer()]

& +renown
[header(+renown)]
  [pcol(+renown)]      - Show current renown.
  [pcol(+renown/log)]  - Show a log of renown awards (default last 30 days).
  [pcol(+renown/log)] [argcol(<days>)]  - Show rewown going back some number of days.

The [pcol(+renown)] command shows current renown for shifters.

In the future this will have [pcol(/prove)], [pcol(/search)], and date-based listing.

See Also: +renownreq   +mysheet
[footer()]

& extra stats
[header(Extra Stats)]
The system has a number of 'extra stats' that are completely valid but don't show up in [pcol(+sheet)]. The list can be see with [pcol(+liststats extra)].

These stats work with [pcol(+gain)] and [pcol(+lose)] to help you keep track of things like damage types ([iter(Bashing Lethal Aggravated Chimerical,argcol(##),%b,/)]).

Another type of extra stat are [pcol(Counters)]. [pcol(Counter1)] through [pcol(Counter10)] are available to help you keep track of whatever you want. It could be NPC damage, it could be number of PRP talens you have left... anything you want. You raise and lower the number for a number with [pcol(+gain)] and [pcol(+lose)] like any other spendable stat.

The [argcol(Counters)] stat controls how many extra counters are displayed in [pcol(+gain/list)] and [pcol(+lose/list)]. If your value for [argcol(Counters)] is set to [argcol(1)], you will only see [argcol(Counter1)]. If it's set to [argcol(5)], you'll see [argcol(Counter1)] through [argcol(Counter5)].

By default, players should have a [argcol(Counters)] [pcol(+mysheet)].

See Also: +gain   +mysheet
[footer()]

& Vehicles
[header(Vehicles)]
Vehicle objects are available through [pcol(+vend)]. Once you have a vehicle you can use the following commands:
  [pcol(enter)] [argcol(<vehicle name>)]     - Get in the vehicle
  [pcol(leave)]                    - Get out of the vehicle
  [pcol(+vlock)] [argcol(<vehicle name>)]    - Prevent others from entering the vehicle
  [pcol(+vunlock)] [argcol(<vehicle name>)]  - Allow others to enter the vehicle
  [pcol(@desc)] [argcol(<vehicle name>)]=[argcol(<Exterior Description>)]   - Describe the vehicle's exterior
  [pcol(@idesc)] [argcol(<vehicle name>)]=[argcol(<Interior Description>)]  - Describe the vehicle's interior
  [pcol(vehicle)] [argcol(<command>)]        - Make the car do stuff
  [pcol(vehicle)] [argcol(+map)]             - Make the car show you [pcol(+map)]
  [pcol(ex/parent)] [argcol(<vehicle name>)] - Examine the properties of the vehicle, including the defaults.

Use [pcol(enter)] and [pcol(leave)] to get in and out of the vehicle.

The owner can always enter the vehicle. To allow others to enter, the owner must [pcol(+vunlock)] [argcol(vehicle)]. Players can always exit the vehicle.

The interior and exterior can have separate descriptions.

To make the vehicle do stuff, type [pcol(vehicle)] [argcol(<command>)]. [argcol(<command>)] can be anything you would do. To drive the car, use an exit name for [argcol(<command>)]. For example, to go North, type [pcol(vehicle)] [argcol(n)]. To rev the engine, type [pcol(vehicle)] [argcol(:revs its engine, ready to race!)]. [pcol(NOTE:)] Any vehicle occupant can command the vehicle.

See Also: +vend
[footer()]

& +vend
[header(+vend)]
Vending Machine Services Capitalist MU!!! by making coded objects like vehicles and... well, vehicles.
  [pcol(+vend/list)]                     - What crap can I get?
  [pcol(+vend/mine)]                     - What crap do I have?
  [pcol(+vend/who)] [argcol(<player>)]             - What crap does [argcol(<player>)] have? (Staff only)
  [pcol(+vend)] [argcol(<item type>)]=[argcol(<item name>)]  - Make crap!

[pcol(+vend)] dispenses coded objects. The objects dispensed to you are owned by you so you may modify them as you see fit.

When creating an item you should give it a descriptive name to distinguish your item from other people's item. If you're on the street and there are three objects there called [argcol(Car)], things will get confusing. For example:
  [pcol(+vend)] [argcol(vehicle)]=[argcol(Rusted Green AMC Pacer)]
[footer()]

& cgen
[header(Character Generation)]
Please read: [pcol(+rules cgen)]

While in [ansi(hg,MTPDATWCG)]:
  To get started, type: [pcol(+init)] to create your sheet, then [pcol(+qstart)] to learn about setting your race.
    Note: Using [pcol(+qstart/be)] will wipe your sheet. Make sure you're ready!
    Note: The most common mistake to make with [pcol(+qstart/be)] is to not include the [argcol(/)]

  [argcol(All stats)] are set with [pcol(+selfstat)] [argcol(<statname>)]=[argcol(<value>)]
    This includes Merits and Flaws. Gifts and Rites should be set to their level.
    Flaws should still set to a positive value:
      [pcol(+selfstat)] [argcol(addiction)]=[argcol(2)]
    To remove a stat from your sheet, set it equal to nothing.
      [pcol(+selfstat)] [argcol(addiction)]=
    To set a bunch of stats at once, use [pcol(+bulkstat)]:
      [pcol(+bulkstat)] [argcol(Strength:2|Dexterity:3|Firearms:2|Faction:Cool Dudes|Path Rating:2)]

To find stats:
  Use [pcol(+statsearch)] [argcol(<part of stat name>)]. For example: [pcol(+statsearch)] [argcol(str)]
  [pcol(+stattypes)] will list the types of stats in the system.
  [pcol(+liststats)] [argcol(<type>)] will list all stats of a type: [pcol(+liststats)] [argcol(langs)]
  You can find references for many stats with [pcol(+book)]. See [pcol(+help +book)]
  If a stat is missing, submit your approval request, then add a note to the job about the missing stats.

Your [pcol(+sheet)]:
  You view your character sheet with [pcol(+sheet)]
  If you're getting help, you can show someone else your sheet with [pcol(+sheet/show)] [argcol(<player>)]
  You can check for common sheet discrepancies with [pcol(+check)].
  To help track your dots, [pcol(+sheettally)] and [pcol(+abilitypoints)] will count stuff up.
    NOTE: These tools are pretty weak. :(
    NOTE: Secondary abilities are half cost.
    NOTE: Non-mortals get some free Lores. See [pcol(+rules lore)]
  To make things easier, the wiki has cheat sheets: [pcol(http://www.cityofhopemush.com/wiki/index.php/Character_Generation#Cheat_Sheets)]

Other stuff:
  We don't require backgrounds/backstories. If you want to set one: [pcol(+help +bg)]
  We rely heavily on notes for things. See [pcol(+help +notes)] and [pcol(+help +note tutorial)]
  Please provide notes for Backgrounds, Merits, and Flaws that warrant justification.
  Can't get everything you want? Ask on [pcol(helpme)] if a stat can be bought with XP. We're pretty flexible.
[footer()]

& +info
[header(+info)]
  [pcol(+info/list)]           - List INFO items you can set on yourself
  [pcol(+info/list)] [argcol(<player>)]  - List INFO items a player can set on themselves (Staff)
  [pcol(+info)]                - Display your current INFO
  [pcol(+info)] [argcol(<player>)]       - View INFO items on another player.
  [pcol(+info/set)] [argcol(<item>)]=[argcol(<info>)]   - Set a specific info item

The [pcol(+info)] system provides a simple way to provide information that would be common knowledge about your character within a certain community.

Currently available info items:
[columns(get(#2542/LIST_INFO_ATTRIBUTES),24,|,2)]
To set an info item on yourself, such as [argcol(Faction)]:
  [pcol(+info/set FACTION=)][argcol(He's widely known amongst the Camarilla as a snivveling sycophant.)]

[pcol(Who can see your info?)]
For Tick to see an info item of yours:
  * You must have that info item set ([pcol(&INFO-FACTION me=)][argcol(something)])
  * The stat for the item must be the same on your [pcol(+sheet)]s.
    * For [argcol(Faction)], your Faction must be the same as their Faction.
  * Only the stat in question is checked. If you set INFO-CLAN, Cam, Indy, Anarch, and Sabbat members of the same clan can all see that info. Be careful!

See Also: +notes   +view    +glance
[footer()]

& +pack
[header(Chat for Packs)]
[pcol(+pack)] is a quick and dirty chat system for packs with the appropriate setup (Totem, etc).
  * It must be setup by staff via [pcol(+request)].
  * Once set up, it is available to all members of the pack (Based on [argcol(Pack)] on [pcol(+sheet)]).
  * Having pack chat requires some explanation. Usually this is an allocation of points in [argcol(Totem)].

[pcol(Commands)]
  [pcol(+pack/chat)] [argcol(<stuff>)] - Say stuff
  [pcol(+pack)] [argcol(<stuff>)]      - Same as [pcol(+pack/chat)]
  [pcol(+pack/off)]          - Turn off pack chat
  [pcol(+pack/on)]           - Turn on pack chat

[pcol(Features)]
  * You can say stuff
  * You can turn it on and off
  * Being on pack chat is automatic

[pcol(Missing Features)]
  * Posing with :, etc
  * Automatic on/off with [pcol(+spam)]
  * Titles
  * A handy [pcol(+pack/who)]

See Also: +request   +spam
[footer()]

& +vacation
[header(+vacation)]
  [pcol(+vacation)]                    - Check your currently set vacation
  [pcol(+vacation)] [argcol(<number of days>)]   - Set a vacation that expires in some number of days
  [pcol(+vacation/clear)]              - Clear currently set vacation

The [pcol(+vacation)] command allows you to declare that you'll be on vacation for a certain number of days (limited to 90). When a vacation is set it will show up in your [pcol(+finger)] information. You may set vacation as many times as you desire.

See Also: +policy inactive pcs
[footer()]

& +pageblock
[header(+pageblock)]
  [pcol(+pageblock)]             - See the list of players you're blocking pages from
  [pcol(+pageblock)] [argcol(<player>)]    - Block pages from a player
  [pcol(+pageunblock)] [argcol(<player>)]  - Unblock pages from a player
  [pcol(+pageblock/cleanup)]     - Remove non-player objects from your block list

Sometimes it is necessary to block a player from paging you. The direct commands to do this are not obvious. These commands simplify the process.

[argcol(NOTE:)] Before blocking pages from someone, please see [pcol(+policy harassment)]. Players are expected to treat each other with civility and respect the boundaries of other players. If player A is unable or unwilling to be civil and respectful to player B, chances they will just as easily mistreat others. Staff does not want to support a hostile environment but cannot act if the issue is unknown to us. Please bring such issues to our attention.
[footer()]

& +alts
[header(+alts)]
  [pcol(+alts)]                   - See your alts and alt settings
  [pcol(+alts)] [argcol(<player>)]          - See a player's alts (if set public)

  [pcol(+alts/enroll)]            - Enroll yourself in [pcol(+alts)]
  [pcol(+alts/claim)] [argcol(<player>)]    - Claim an alt
  [pcol(+alts/confirm)] [argcol(<player>)]  - Confirm an alt
  [pcol(+alts/pending)]           - Show pending alt claims
  [pcol(+alts/cancel)] [argcol(<player>)]   - Cancel outstanding claims with a player.

  [pcol(+alts/ping)] [argcol(<player>)]     - Send a ping to a player's alts
  [pcol(+alts/pingon)]            - Set yourself to receive alt pings (default)
  [pcol(+alts/pingoff)]           - Disable receiving alt pings

  [pcol(+alts/pubon)]             - Make your list of alts public
  [pcol(+alts/puboff)]            - Make your list of alts private (default)

The [pcol(+alts)] system allows players to register their alts in the system. By default, the list of alts is only visible to staff but players can choose to make their alts public.

To register alts you must first [pcol(+alts/enroll)]. To claim another character as your alt, both must be enrolled and logged in from the same IP. [pcol(+alts/claim)] will send a request to the other character. That character can confirm the request with [pcol(+alts/confirm)]. To view pending alt requests, use [pcol(+alts/pending)].

The [pcol(+alts/ping)] command sends a message to each of a player's alts, letting them know you're trying to get their attention. This is useful when the character you know is not online, but other characters of the same player might be. To maintain privacy, [pcol(+alts/ping)] will always tell you it is sending pings, even if the recipient has no characters online or is blocking pings. Receiving pings can be disabled and enabled with [pcol(+alts/pingoff)] and [pcol(+alts/pingon)] respectively.

If you want to advertise your alts, you can make the list of alts public with [pcol(+alts/pubon)]. The default is that they are not public. At any time they can be made private again with [pcol(+alts/puboff)]. However, once other players have seen the list it's wise to assume they still have it in a log.

The list of alts is color-coded. Green indicates that the character is approved, blue indicates that the character is not. Bright color indicates recently logged in (30 days), dark color indicates not recently logged in. A + indicates that the character is online.
[footer()]

& +events
& events
& +event
& event
[header()]
[pcol(+events)]                                 List events, sorted by number.
[pcol(+events/date)]                            List events, sorted by date.

[pcol(+event)] [argcol(<#>)]                              View an event.
[pcol(+event/signup)] [argcol(<#>)]                       Sign up for an event.
[pcol(+event/unsignup)] [argcol(<#>)]                     Remove yourself from an event.

[pcol(+event/create)] [argcol(<name>)]=[argcol(<date and time>)]/[argcol(<genre>)]/[argcol(<summary>)]

        Example format for [argcol(<date and time>)]: 2013-07-19 7:00 pm
        Time zone defaults to [pcol(+time)] (PST/PDT)
        For 2:00 pm EST, [pcol(/create)] with '2:00 pm' then [pcol(/timezone)] with 'EST'

[pcol(+event/changedate)] [argcol(<#>)]=[argcol(<date and time>)]   Change date/time of an event.
[pcol(+event/timezone)] [argcol(<#>)]=[argcol(<zone>)]              Change time zone of an event.
[pcol(+event/addsum)] [argcol(<#>)]=[argcol(<?>)]                   ?
[pcol(+event/changesum)] [argcol(<#>)]=[argcol(<summary>)]          Change description of an event.
[pcol(+event/remove)] [argcol(<#>)]=[argcol(<player>)]              Remove participant from an event.
[pcol(+event/cancel)] [argcol(<#>)]                       Cancel an event.
[pcol(+event/mail)] [argcol(<#>)]=[argcol(<text>)]                  Mail all participants.
[footer()]

& +chantry
& chantry
[header()]
[pcol(+chantry)]                 View information about your chantry.
[pcol(+chantry)] [argcol(<note name>)]     View note <note name> about your chantry.

[pcol(+chantry/chat)] [argcol(<text>)]     (OOC) Send <text> to other chantry members.
[pcol(+cchat)] [argcol(<text>)]            Same as +chantry/chat.
[pcol(+chantry/off)]             Turn chat off.
[pcol(+chantry/on)]              Turn chat on.
[footer()]

& +xp/nom
& +xpnom
& +xp/nominate
& +xpnominate
& xp/nom
& xpnom
& xp/nominate
& xpnominate
[header()]
[pcol(+xp/nom)] [argcol(<recipient>)]/[argcol(<type>)]=[argcol(<explanation>)]

Nominate another player for bonus XP!

[argcol(<type>)] must be one or more of:

  LEARNING ACTING CONCEPT HEROISM     (short term)
  SUCCESS DANGER WISDOM               (long term)
  
These are White Wolf's canonical 'things that are worth XP awards'
(minus 'Automatic', which is covered by +vote).

For explanations of these types, see:

* VtM pages 142-143
* WtA pages 180-181
* MtA page 131
* CtD pages 275-276
* WtO pages 227-228
* DtF page 165

[argcol(<explanation>)] can include one or a few sample poses (preferably from
mid-scene), or just a summary of why the player deserves the bonus.

An anonymous copy is @mailed to the recipient. To add comments for staff
eyes only, use [pcol(+myjob/add)] [argcol(<#>)]=[argcol(<comments>)]. If you want the whole thing to
remain secret, use [pcol(+request)].

Players portraying NPCs (see '+policy PRPs' and '+policy NPC play') [pcol(are)]
eligible to be nominated for whatever types seem relevant.

See also: +xp/nom example   +vote
[footer()]

& +xp/nom example
[header()]

(Your nominations don't have to be /this/ thorough. But they could be!)

XP Nomination:

[pcol(Player:)]         [argcol(DropBear)]
[pcol(Nominated by:)]   [argcol(HoneyBadger)]
[pcol(Type:)]           [argcol(ACTING)]

DropBear and HoneyBadger have a long, twisted relationship, dating back
to the 1980s when they used to hide out behind the school and smoke
cigarettes and listen to New Kids on the Block. After highschool, they
fell out of touch. DropBear went the way of Marilyn Manson, HoneyBadger
stuck with Christina Aguilera.  Recently, they ran into each other at
Prospect Roasters.

DropBear sashays in, her hair punked up with half a ton of hair goop and
enough makeup to put Lady Gaga to shame.  She strolls up to the counter,
her spiked heels clicking on the tile floor, her mini-skirt covered butt
swaying with each step. She pauses there in line, waiting for the girl
ahead of her to get her hipster-preppy drink.  She steps forward,
cocking her hip out to the side and leaning against the counter, her
pillowy mountains of cleavage bursting forth from her skimpy little
shirt. "Espresso. Black. Make it a double."

<To which, I reply>

HoneyBadger sits, quiet and mousy at her table, her earbuds tucked in
her ears, bopping along quietly to 'Call Me Maybe' on her little iPod.
She glances up as the door dings and looks at the woman.  Those heels!
Them BOOBS! Holy crap! Is that.....? COULD it be....?  Her old friend!
Clicking off her iPod and dropping the earbuds around her shoulders,
she finishes off her soy latte and heads back toward the counter.
"DropBear?" she asks quietly.

DropBear looks over as the mousy girl approaches and she does a little
double take. "HoneyB? Oh, my gawd! GURRRL!  Where have you BEEN?"  She
drops her credit card on the counter and turns to wrap her arms around
HoneyBadger, squeezing her against those pillows in a loving, crushing
embrace. "HOW have you been?"

<The scene continues.  Apparently, DropBear had some booze in her purse
and they've been sneaking it into their coffee>

DropBear sobs, waving her coffee about, sloshing it over her fingers.
It's more booze than caffeine at this point. "And then... MILEY CYRUS
had to come out with that STOOOPID twerking thing and now I can't even
dance to my favorite song!"  She sighs dramatically. She must be wasted
to admit such a thing. Miley Cyrus, indeed. "I ... I MISSED you, my
friend. So much. You have no idea the musical influence you had on my
life.  She flings her arms around HB's shoulders, sloshing alcohol and
coffee down her back and hugging her violently to her chest.  "I love
you, man. SO much. SOO SOOO much."

The progression from hardcore punk to secret lover of Miley Cyrus was a
long and convoluted one, and her level of guilt was directly
proportional to how much alcohol she had in her coffee cup.  I always
love RPing with DropBear's player, but this was SO fun.

[footer()]

& +phone
& phone
[header()]
[pcol(+phone)] [argcol(<recipient>)]=[argcol(<text>)]
[pcol(+phone/speaker)] [argcol(<recipient>)]=[argcol(<text>)]
[pcol(+text)] [argcol(<recipient>)]=[argcol(<text>)]

Say [argcol(<text>)] to [argcol(<recipient>)] over the phone. People in the same room as you
will overhear it. If the recipient has put you on speakerphone, then use
[pcol(/speaker)] and people in the same room as them will also overhear it.

[pcol(+text)] only goes to you and the recipient. (Similar to 'page', but
easier to identify as IC.)

You can also pose, e.g.

  [pcol(+phone)] [argcol(<recipient>)]=:is interrupted by the noise of a passing car.
  [pcol(+phone)] [argcol(<recipient>)]=;'s phone abruptly falls silent.

There is no special code for dialing, hanging up, busy signal, no
answer, etc. - you can pose these things, or just assume they happen at
the appropriate times. For voicemail, use @mail.

[footer()]

&
