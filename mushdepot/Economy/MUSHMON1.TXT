
@@ Initial Setup
@@ ~~~~~~~~~~~~~

@@ Create the object. Why ATM? Automated Teller Machine :)
@@ You'll want to put this in your Master Room.

@create ATM
@set ATM=INHERIT
@lock ATM=#0

@@ We need to define an attribute, and then make it Wizard-only.

@@ NOTE: This may need to be run by your God(#1) character, depending on
@@ local permissions. The "hidden" parameter is up to you - it is polite
@@ to let people use their own cash in programs - money(me) becomes
@@ v(MONEY), for example.

@@ NOTE: If in the configuration section you change the attribute name,
@@ from MONEY to something else, you will have to manually edit these
@@ next three commands.

&MONEY ATM=0
@attribute/access MONEY=wizard
@@ @attribute/access MONEY=hidden

@@ Initialize semaphore protection on each startup, and immediately.

@Startup ATM=@drain me;@notify me
@drain ATM
@notify ATM



@@ Configuration Section
@@ ~~~~~~~~~~~~~~~~~~~~~

@@ Name of the money system. Might be "US Treasury", or something
@@ equally meaningless.

&SYSTEM_NAME ATM=Royal Narnian

@@ Name of the attribute to hold the money value. If you change this,
@@ look in the Initial Setup section, and change some of the commands
@@ listed there.

@VM ATM=MONEY

@@ Name of the attributes to hold the Cost, Pay, Opay and Apay messages:

@VC ATM=MCost
@VP ATM=MPay
@VO ATM=MOPay
@VA ATM=MAPay

@@ For the record, @VS is used to store the amount stolen, and @VL is
@@ used to store the result of a locate(), so they shouldn't be reused.
@@ The free register list is: 
@@ VB VD VE VF VG VH VI VJ VK VN VQ VR VT VU VV VW VX VY VZ


@@ Define the commands. These are the defaults. DO NOT CHANGE!

&LIST_DEFCMDS ATM=$HELP $COINAGE $CASH $DEPOSIT $STEAL $COLLECT $GIVE $BUY

@@ Change *these* next ones if you want. Keep the order the same.
@@ Even if you don't want $STEAL used, leave it in the list. Keeping
@@ them upper case isn't vital (it doesn't matter to the users) but
@@ it shows up more clearly in the help. 

&LIST_CMDS ATM=$HELP $COINAGE $CASH $DEPOSIT $STEAL $COLLECT $GIVE $BUY


@@ Define the coinage. The default is Narnian currency. The attributes 
@@ are values, singular names, plural names, and abbreviations.

&COIN_VLIST ATM=1 0.1
&SCOIN_NAME ATM=Lion Tree
&PCOIN_NAME ATM=Lions Trees
&ACOIN_NAME ATM=L t

@@  Here's an example of how you'd define North American money, 
@@ albeit taken to an extreme:

@@ &COIN_VLIST ATM=50 20 10 5 2 1 0.25 0.10 0.05 0.01
@@ &SCOIN_NAME ATM=Fifty Twenty Ten Five Two Dollar Quarter Dime Nickel Penny
@@ &PCOIN_NAME ATM=Fifties Twenties Tens Fives Twos Dollars Quarters Dimes
@@  Nickels Pennies
@@ &ACOIN_NAME ATM=. . . . . $ . . . c
@@  (The abbreviations don't work too well in this example.)

@@ Any comments about what the money is worth should go here.

&CONF_COMMENT ATM=A full meal, with drinks and dessert, costs about 5 Trees at the%r MouseTrap Tavern. Please set your costs appropriately.


@@ Do we want stealing? 1=Yes, 0=No

&CONF_STEALING ATM=0


@@ Do a little bit of automatic configuration.

&CMD_AUTO_CONF ATM=$auto_conf:&LIST_TOPICS me=AMOUNTS GIVE BUY [switch(1,v(CONF_STEALING),STEAL%b)]COLLECT DEPOSIT CASH COINAGE COST PAY OPAY APAY;&CMD_AUTO_CONF me
auto_conf


@@ Command Stubs
@@ ~~~~~~~~~~~~~
@@ These act as relays for some commands, and do such things as 
@@ determine which variant to use (depending on the arguments
@@ provided), convert coinage expressions into decimals, etc.
@@ It also cuts down on the amount of code needed with multiple
@@ money systems.

&CMD_HELP    ATM=$$HELP:        @pemit %#=u(HELP_MONEY)
&CMD_HELP2   ATM=$$HELP *:      @switch match(v(LIST_TOPICS),%0*)=0,{@pemit %#=u(HELP_MONEY)},{@pemit %#=u(HELP_[extract(v(LIST_TOPICS),match(v(LIST_TOPICS),%0*),1)])}
&CMD_COINAGE ATM=$$COINAGE:@pemit %#=[MUDname()] - [v(SYSTEM_NAME)] Coinage:%r[space(5)][ljust(Coin:,12)][ljust(Plural:,12)][ljust(Abbrev:,12)][ljust(Value:,12)][iter(iter(lnum(words(v(COIN_VLIST))),add(##,1)),%r[space(7)][ljust(extract(v(SCOIN_NAME),##,1),12)][ljust(extract(v(PCOIN_NAME),##,1),12)][ljust(extract(v(ACOIN_NAME),##,1),12)][ljust(u(FN_FRACT,extract(v(COIN_VLIST),##,1)),12)])]%r%r[u(CONF_COMMENT)]
&CMD_CASH    ATM=$$CASH:        @trigger me/CODE_CASH=%#
&CMD_CASH2   ATM=$$CASH *:      @trigger me/CODE_CASH2=%#,%0
&CMD_DEPOSIT ATM=$$DEPOSIT *=*: @trigger me/CODE_DEPOSIT=%#,%0,u(FN_VALUE,%1)
&CMD_STEAL   ATM=$$STEAL *:     @trigger me/CODE_STEAL=%#,%0
&CMD_COLLECT ATM=$$COLLECT *:   @switch/first strmatch(%0,*=*)=0,{@trigger me/CODE_COLLECT=%#,%0},{@trigger me/CODE_COLLECT2=%#,before(%0,=),u(FN_VALUE,after(%0,=))}
&CMD_GIVE    ATM=$$GIVE *:      @switch/first 1=not(strmatch(%0,*=*)),{@trigger me/CODE_GIVE=%#,%0},strmatch(type(locate(%#,before(%0,=),*)),PLAYER),{@trigger me/CODE_GIVE3=%#,before(%0,=),u(FN_VALUE,after(%0,=))},{@trigger me/CODE_GIVE2=%#,before(%0,=),u(FN_VALUE,after(%0,=))}
&CMD_BUY     ATM=$$BUY *=*:	@switch/first strmatch(%1,*\,*)=0,{@trigger me/CODE_BUY=%#,%0,%1},{@trigger me/CODE_BUY2=%#,%0,before(%1,\,),u(FN_VALUE,after(%1,\,))}



@@ Help Entries
@@ ~~~~~~~~~~~~
@@ Its best to leave these on the same object - they refer in places to 
@@ configuration settings, and you'd have to copy those over as well.


&HELP_MONEY ATM=%b %t%t[v(SYSTEM_NAME)] Money Commands:%r%r%b [ljust($GIVE <thing>\[=<amount>\],38)][ljust($BUY <vendor>=<product>\[,<amount>\],38)]%r%b [ljust($DEPOSIT <object>=<amount>,38)][ljust($COLLECT <thing>\[=<amount>\],38)]%r%b [ljust($CASH \[<thing>\],38)][ljust($COINAGE,38)]%r%b [switch(v(CONF_STEALING),1,$STEAL <person>%r)]%r%b <amount> can be specified as a decimal number or as a coinage%r%b expression. See $HELP AMOUNTS for details.%r%r%b [ljust(&%VC\[-<product>\] <object>=<value>,38)][ljust(&%VP\[-<product>\] <object>=<message>,38)]%r%b [ljust(&%VO\[-<product>\] <object>=<message>,38)][ljust(&%VA\[-<product>\] <object>=<commands>,38)]%r%r%b <value> must be a decimal amount.%r%r%b Use $HELP <topic> for more help on one of: [v(LIST_TOPICS)]%r%b Note: No command prefixes are used in the <topic> field for $HELP.%r


&HELP_AMOUNTS ATM=%b Money Amounts:%r%r%b The <amount> field of commands can be specified one of two%r%b ways.%r%r%b The first is to use a decimal number, in terms of the primary%r%b coin of the monetary system, eg. 1.5 meaning [u(FN_MONEYNAME,1.5)].%r%r%b The second way is to use the coin names or abbreviations, which%r%b are listed in $COINAGE. For example, [u(FN_MONEYNAME,1)], or [u(FN_MONEYNAME,0.5)], or%r%b [u(FN_MONEYNAME,1.5)], or any combination. You can use the singular,%r%b plural, or abbreviation names listed in $COINAGE. If you type%r%b something which cannot be resolved, it will be treated as 0.%r%r%b NOTE: The &%VC\[-<product>\] attribute must be set with a%r%b decimal value. Complex expressions will not work with it.%r


&HELP_GIVE ATM=%b Command: GIVE%r%b Usage: $GIVE <thing>\[=<amount>\]%r%r%b This command is used to give players and objects some of your coins.%r%b For players, <amount> must be specified.%r%r%b For objects, the <thing> must have an &%VC set, and you must pass %r%b <thing>'s UseLock. If <thing>'s &%VC is less than zero, it accepts%r%b donations of any size, so you must specify an <amount>. If the &%VC%r%b is greater than zero, only the proper <amount> is accepted - any less%r%b is not enough, and any extra will be returned as change.%r%r%b Example:%r%b > $GIVE Bartender=[u(FN_MONEYNAME,2)]%r%b You pay the Bartender.%r%b You get [u(FN_MONEYNAME,1.5)] in change.%r


&HELP_BUY ATM=%b Command: BUY%r%b Usage: $BUY <thing>=<product>\[,<amount>\]%r%r%b This command is used to purchase a specific item from a vendor,%r%b and allow you to specify the price paid. The &%VC-<product>%r%b of the vendor must be set, and you must pass the machine's %r%b UseLock. The <amount> argument is optional - you don't have to%r%b supply it, and it is just a safety check to make sure you don't%r%b spend more than you are anticipating. If supplied, the same%r%b rules as for $GIVE to a machine apply.%r%r%b Example:%r%b > $BUY Bartender=Aspirin,[u(FN_MONEYNAME,5)]%r%b You buy some aspirin from the Bartender.%r%b You get [u(FN_MONEYNAME,0.5)] in change.%r


&HELP_DEPOSIT ATM=%b Command: DEPOSIT%r%b Usage: $DEPOSIT <thing>=<amount>%r%r%b This command is used to store money on an object, like a wallet, or%r%b other secure place (see $HELP STEAL). You must control <thing> %r%b (see Help Control). This is useful for avoiding theft, as well as%r%b keeping large amounts of money in a vault, etc.%r%r%b Example:%r%b > $DEPOSIT Wallet=2.5%r%b You deposit [u(FN_MONEYNAME,2.5)] in Wallet.%r


&HELP_STEAL ATM=%b Command: STEAL %r%b Usage: $STEAL <person>%r%r%b This command is used to attempt to steal money from another person.%r%b The amount is random - it will be some randomly chosen percentage%r%b of what the other is carrying, with a moderate probability of getting%r%b anything at all, and a slightly higher chance of getting caught in%r%b the attempt. You can only do this to connected players, and if they%r%b are set HAVEN (a typical convention for OOC) it will not work.%r%r%b NOTE: This command may be disabled on some MUSHes.%r%r%b Example:%r%b > $STEAL Reepicheep%r%b You steal [u(FN_MONEYNAME,0.5)] from [name(owner(me))]!%r


&HELP_COLLECT ATM=%b Command: COLLECT%r%b Usage: $COLLECT <thing>\[=<amount>\]%r%r%b This command is used to retrieve money stored on an object or player.%r%b You must control <thing> (see Help Control). This is useful for %r%b collecting the profits garnered by a vendor, or retrieving money%r%b deposited in a wallet or vault. If <amount> is not specified,%r%b all of the money <thing> has will be collected.%r%r%b Example:%r%b > $COLLECT Bartender%r%b You collect [u(FN_MONEYNAME,7.5)] from Bartender.%r


&HELP_CASH ATM=%b Command: CASH%r%b Usage: $CASH \[<thing>\]%r%r%b If <thing> is not specified, the command reports how much money%r%b you have with you. If <thing> is specified, and you control it%r%b (see Help Control) then the amount of money <thing> has is%r%b reported.%r%r%b Example:%r%b > $CASH%r%b You have [u(FN_MONEYNAME,0.5)].%r%b > $CASH Wallet%r%b Wallet has [u(FN_MONEYNAME,5.0)].%r


&HELP_COINAGE ATM=%b Command: COINAGE%r%b Usage: $COINAGE%r%r%b This command will display a table of the MUSH's coins, and their %r%b different values, as well as a short description of what that %r%b translates into in buying power.%r


&HELP_COST ATM=%b Command: %VC%r%b Usage: &%VC\[-<product>\] <thing>=<value>%r%r%b Without the <product> specification, this is like the standard MUSH %r%b command @cost, but the Money System allows you to specify fractional%r%b amounts for the cost of operating a machine. You should also set an %r%b &%VP, &%VO and &%VA on an object, to respond when the object is %r%b given money, like the @Pay, @Opay, and @Apay equivalents.%r%r%b If <value> is negative, <thing> will accept donations of any amount.%r%r%b With a <product> named, the object, the $BUY command may be used.%r%b This makes it much easier for a vendor to sell a number of different%r%b items.%r%r%b NOTE: <value> must be a decimal number. Coin expressions will not work.%r%r%b Example:%r%b > &%VC Bartender=1.5%r%b Set.%r%b > &%VC-Aspirin Bartender=4.5%r%b Set.%r


&HELP_PAY ATM=%b Command: %VP%r%b Usage: &%VP\[-<product>\] <thing>=<message>%r%r%b This is like the standard MUSH command @Pay, but is used when the %r%b object is paid using the Money System. The person giving <thing>%r%b money sees <message>. If <product> is specified, then <message>%r%b is seen when someone uses $BUY and specifies that product.%r%r%b Example:%r%b > &%VP Bartender=You pay the bartender, who quickly mixes you a drink.%r%b Set.%r%b > &%VP-Aspirin Bartender=You buy some aspirin from the Bartender.%r%b Set.%r

&HELP_OPAY ATM=%b Command: %VO%r%b Usage: &%VO\[-<product>\] <thing>=<message>%r%r%b This is like the standard MUSH command @OPay, but is used when the %r%b object is paid using the Money System. The everyone in the room%r%b except the person paying <thing> sees <message>, prepended with%r%b the payers name and a space.%b If <product> is specified, then %r%b <message>%b  is seen when someone uses $BUY and specifies that %r%b product.%r%r%b Example:%r%b > &%VO Bartender=pays the bartender, who quickly mixes %%o a drink.%r%b Set.%r%b > &%VO-Aspirin Bartender=buys some aspirin from the Bartender.%r%b Set.%r

&HELP_APAY ATM=%b Command: %VA%r%b Usage: &%VA\[-<product>\] <thing>=<command list>%r%r%b This is like the standard MUSH command @APay, but is used when the %r%b object is paid using the Money System. When <thing> is paid,%r%b the command list is run.%b If <product> is specified, then the%r%b <command list> is run when someone uses $BUY and specifies that %r%b product.%r%r%b Example:%r%b > &%VA Bartender=@create Glass of Mead; give %%N=Glass of Mead%r%b Set.%r%b > &%VA-Aspirin Bartender=@create Two Aspirin; give %%N=Aspirin%r%b Set.%r


@@ Command Configuration
@@ ~~~~~~~~~~~~~~~~~~~~~
@@ If you changed any of the command names, this code will make
@@ the necessary edits to the command stubs and help entries.

&CMD_CMDCONF ATM=$auto_conf2:@switch v(LIST_DEFCMDS)=v(LIST_CMDS),,{@dolist iter(lnum(words(v(LIST_DEFCMDS))),add(##,1))={@edit me/HELP_*=[extract(v(LIST_DEFCMDS),##,1)];@edit me/CMD_*=[extract(v(LIST_DEFCMDS),##,1)];}};&CMD_CMDCONF me
auto_conf2

@@ NOTE: If this is going to be the second copy of this code on 
@@ a MUSH, you can chop everything below this line and just @parent
@@ the new one to the old one. If you do that, uncomment the next line
@@ (its present at the end of this script, but needs to be run last).

@@ @dolist setdiff(lattr(ATM),lattr(ATM/CMD_*))=@set ATM/##=NO_COMMAND

@@ ----- >8 ---------- >8 ---------- >8 ---------- >8 ---------- >8 -----

@@ Functions
@@ ~~~~~~~~~

@@ abs() is broken for decimal values in 2.0.9p1.
&FN_ABS ATM=mul(sign(%0),%0)

@@ Return a name given a decimal value.
&FN_MONEYNAME ATM=switch(1,eq(%0,0),nothing,mid(u(FN_RNAME,%0,iter(lnum(words(v(COIN_VLIST))),add(##,1))),1,999))

@@ Recurses through the coinage lists, and figure out how many of each.
&FN_RNAME ATM=[setq(0,extract(v(COIN_VLIST),first(%1),1))][switch(1,eq(%0,0),,words(%1),%b[u(FN_PSNAME,trunc(fdiv(%0,r(0))),%1)],gte(%0,r(0)),%b[u(FN_PSNAME,trunc(fdiv(%0,r(0))),first(%1))][u(FN_RNAME,u(FN_REMAINDER,%0,r(0)),rest(%1))],u(FN_RNAME,%0,rest(%1)))]

@@ Returns the plural or singular name, where appropriate.
&FN_PSNAME ATM=switch(1,eq(%0,1),1 [extract(v(SCOIN_NAME),%1,1)],[add(%0,0)] [extract(v(PCOIN_NAME),%1,1)])

@@ The eqivalent of mod() for decimal values.
&FN_REMAINDER ATM=sub(%0,mul(trunc(fdiv(%0,%1)),%1))

@@ This returns "1/X" for a decimal number.
&FN_FRACT ATM=switch(1,eq(%0,0),,gte(%0,1),[trunc(%0)] [u(FN_FRACT,sub(%0,trunc(%0)))],1/[fdiv(1,%0)])

@@ Convert things like "1 Lion 2 Trees" into a decimal. Deal with negatives.
&FN_VALUE ATM=switch(1,strmatch(%0,-*),mul(-1,u(FN_STARTREC,mid(%0,1,99))),u(FN_STARTREC,%0))

@@ Splice the string and then start the recursion.
&FN_STARTREC ATM=[setq(9,map(FN_SPLICE,%0))][u(FN_RUNTOT,first(r(9)),first(rest(r(9))),rest(rest(r(9))))]

@@ Break up strings like "123abc456def" into "123 abc 456 def".
&FN_SPLICE ATM=edit(edit(iter(lnum(strlen(%0)),switch(1,or(and(isnum(setr(0,mid(%0,##,1))),not(isnum(setr(1,mid(%0,add(##,1),1))))),and(isnum(r(1)),not(isnum(r(0))))),r(0)-,r(0))),%b,),-,%b)

@@ This recurses through the list and makes a running total.
&FN_RUNTOT ATM=switch(1,strmatch(%1,),%0,strmatch(%2,),u(FN_CALCVAL,%0,%1),add(u(FN_CALCVAL,%0,%1),u(fn_RUNTOT,first(%2),first(rest(%2)),rest(rest(%2)))))

@@ This figures out the value of a number/word pair.
&FN_CALCVAL ATM=fold(FN_ADD,iter(iter(lnum(words(v(COIN_VLIST))),add(##,1)),switch(1,strmatch(%1,extract(v(PCOIN_NAME),##,1)),mul(%0,extract(v(COIN_VLIST),##,1)),strmatch(%1,extract(v(SCOIN_NAME),##,1)),mul(%0,extract(v(COIN_VLIST),##,1)),strmatch(%1,extract(v(ACOIN_NAME),##,1)),mul(%0,extract(v(COIN_VLIST),##,1)),0)))

@@ For fold()ing through a list of numbers to sum.
&FN_ADD ATM=add(%0,%1)



@@ Command Code
@@ ~~~~~~~~~~~~


@@ Report the amount of money you have.
&CODE_CASH ATM=@switch/first 1=eq(get(%0/%VM),0),{@pemit %0=You have no [v(SYSTEM_NAME)] currency!},{@pemit %0=You have [u(FN_MONEYNAME,get(%0/%VM))].}

@@ Report the amount of money something else has.
&CODE_CASH2 ATM=@wait me={@VL me=locate(%0,%1,*);@switch/first 1=strmatch(%VL,#-1),{@pemit %0=I don't see that here.;@notify me},strmatch(%VL,#-2),{@pemit %0=Which "%1" do you mean?;@notify me},eq(controls(%0,%VL),0),{@pemit %0=You do not control that!;@notify me},eq(get(%VL/%VM),0),{@pemit %0=[name(%VL)] has no [v(SYSTEM_NAME)] currency.;@notify me},{@pemit %0=[name(%VL)] has [u(FN_MONEYNAME,get(%VL/%VM))].;@notify me}}


@@ Deposit money on an object you control.
&CODE_DEPOSIT ATM=@wait me={@VL me=locate(%0,%1,*);@switch/first 1=strmatch(%VL,#-1),{@pemit %0=I don't see that here.;@notify me},strmatch(%VL,#-2),{@pemit %0=Which "%1" do you mean?;@notify me},eq(controls(%0,%VL),0),{@pemit %0=You do not control that!;@notify me},lt(%2,0),{@pemit %0=You can't collect a negative amount of money.;@notify me},eq(%2,0),{@pemit %0=You must specify a positive amount.;@notify me},eq(get(%0/%VM),0),{@pemit %0=You have no [v(SYSTEM_NAME)] currency to deposit.;@notify me},gt(%2,get(%0/%VM)),{@pemit %0=Thats more money than you have.;@notify me},{@pemit %0=You deposit [u(FN_MONEYNAME,%2)] on [name(%VL)].;&%VM %0=sub(get(%0/%VM),%2);@set %0/%VM=NO_INHERIT;&%VM %VL=add(get(%VL/%VM),%2);@set %VL/%VM=NO_INHERIT;@pemit %0=You now have [u(FN_MONEYNAME,get(%0/%VM))].;@notify me}}


@@ Steal money from another player.
&CODE_STEAL ATM=@wait me={@VL me=locate(%0,%1,nP);@switch/first 1=not(v(CONF_STEALING)),{@pemit %0=Permission denied.;@notify me},strmatch(%VL,#-1),{@pemit %0=I don't see that here.;@notify me},strmatch(%VL,#-2),{@pemit %0=Which "%1" do you mean?;@notify me},not(strmatch(type(%VL),PLAYER)),{@pemit %0=Thats not a player!;@notify me},hasflag(%0,HAVEN),{@pemit %0=You are set HAVEN.;@notify me},hasflag(%VL,HAVEN),{@pemit %0=That player is set HAVEN.;@notify me},not(hasflag(%VL,CONNECTED)),{@pemit %0=That player is not connected.;@notify me},eq(get(%VL/%VM),0),{@pemit %0=You try and steal money from [name(%VL)], but can't find any to take!;@notify me},gt(rand(100),35),{@pemit %0=You try and steal money from [name(%VL)], but bungle the attempt.;@switch 1=gt(rand(100),40),{@pemit %VL=[name(%0)] tries to steal money from you, but bungles in the attempt!;@notify me};@notify me},{@VS me=mul(rand(trunc(fdiv(get(%VL/%VM),first(revwords(v(COIN_VLIST)))))),first(revwords(v(COIN_VLIST))));@pemit %0=You manage to steal [u(FN_MONEYNAME,%VS)] from [name(%VL)].;&%VM %0=add(get(%0/%VM),%VS);@set %0/%VM=NO_INHERIT;&%VM %VL=sub(get(%VL/%VM),%VS);@set %VL/%VM=NO_INHERIT;@pemit %0=You now have [u(FN_MONEYNAME,get(%0/%VM))].;@notify me}}


@@ Collect all of the money from an object you control.
&CODE_COLLECT ATM=@wait me={@VL me=locate(%0,%1,*);@switch/first 1=strmatch(%VL,#-1),{@pemit %0=I don't see that here.;@notify me},strmatch(%VL,#-2),{@pemit %0=Which "%1" do you mean?;@notify me},eq(controls(%0,%VL),0),{@pemit %0=You do not control that!;@notify me},eq(get(%VL/%VM),0),{@pemit %0=[name(%VL)] has no [v(SYSTEM_NAME)] currency to collect.;@notify me},{@pemit %0=[u(FN_MONEYNAME,get(%VL/%VM))] collected from [name(%VL)].;&%VM %0=add(get(%0/%VM),get(%VL/%VM));@set %0/%VM=NO_INHERIT;&%VM %VL=0;@set %VL/%VM=NO_INHERIT;@pemit %0=You now have [u(FN_MONEYNAME,get(%0/%VM))].;@notify me}}

@@ Collect some of the money from an object you control.
&CODE_COLLECT2 ATM=@wait me={@VL me=locate(%0,%1,*);@switch/first 1=strmatch(%VL,#-1),{@pemit %0=I don't see that here.;@notify me},strmatch(%VL,#-2),{@pemit %0=Which "%1" do you mean?;@notify me},eq(controls(%0,%VL),0),{@pemit %0=You do not control that!;@notify me},lt(%2,0),{@pemit %0=You can't collect a negative amount of money.;@notify me},eq(%2,0),{@pemit %0=You must specify a positive amount.;@notify me},eq(get(%VL/%VM),0),{@pemit %0=[name(%VL)] has no [v(SYSTEM_NAME)] currency to collect.;@notify me},gt(%2,get(%VL/%VM)),{@pemit %0=Thats more money than [name(%VL)] has.;@notify me},{@pemit %0=[u(FN_MONEYNAME,%2)] collected from [name(%VL)].;&%VM %0=add(get(%0/%VM),%2);@set %0/%VM=NO_INHERIT;&%VM %VL=sub(get(%VL/%VM),%2);@set %VL/%VM=NO_INHERIT;@pemit %0=You now have [u(FN_MONEYNAME,get(%0/%VM))].;@notify me}}


@@ Pay command - no amount given.
&CODE_GIVE ATM=@wait me={@VL me=locate(%0,%1,nT);@switch/first 1=strmatch(%VL,#-1),{@pemit %0=I don't see that here.;@notify me},strmatch(%VL,#-2),{@pemit %0=I don't know which one you mean!;@notify me},strmatch(type(%VL),PLAYER),{@pemit %0=For players, you must specify an amount.;@notify me},strmatch(type(%VL),ROOM),{@pemit %0=You cannot pay rooms.;@notify me},strmatch(type(%VL),EXIT),{@pemit %0=You cannot pay exits.;@notify me},not(elock(%VL/Use,%0)),{@pemit %0=You cannot pay that.;@notify me},strmatch(get(%VL/%VC),),{@pemit %0=[name(%VL)] will not take your money.;@notify me},lt(get(%VL/%VC),0),{@pemit %0=[name(%VL)] has a negative %VC set!;@notify me},eq(get(%VL/%VC),0),{@pemit %0=[name(%VL)] doesn't charge you.;@verb %VL=%0,%VP,You pay [name(%VL)].,%VO,,%VA;@notify me},gt(get(%VL/%VC),get(%0/%VM)),{@pemit %0=[name(%VL)] costs more than you have.;@notify me},{@pemit %0=You pay [u(FN_MONEYNAME,get(%VL/%VC))] to [name(%VL)];&%VM %0=sub(get(%0/%VM),get(%VL/%VC));@set %0/%VM=NO_INHERIT;&%VM %VL=add(get(%VL/%VM),get(%VL/%VC));@set %VL/%VM=NO_INHERIT;@verb %VL=%0,%VP,You pay [name(%VL)].,%VO,,%VA;@notify me}}

@@ Pay command - amount given.
&CODE_GIVE2 ATM=@wait me={@VL me=locate(%0,%1,nT);@switch/first 1=strmatch(%VL,#-1),{@pemit %0=I don't see that here.;@notify me},strmatch(%VL,#-2),{@pemit %0=I don't know which one you mean!;@notify me},not(strmatch(type(%VL),THING)),{@pemit %0=You cannot that.;@notify me},not(elock(%VL/Use,%0)),{@pemit %0=You cannot pay that.;@notify me},lt(%2,0),{@pemit %0=You can't pay a negative amount!;@notify me},gt(%2,get(%0/%VM)),{@pemit %0=Thats more money than you have.;@notify me},strmatch(get(%VL/%VC),),{@pemit %0=[name(%VL)] will not take your money.;@notify me},lt(get(%VL/%VC),0),{@pemit %0=You give [u(FN_MONEYNAME,%2)] to [name(%VL)];&%VM %0=sub(get(%0/%VM),%2);@set %0/%VM=NO_INHERIT;&%VM %VL=add(get(%VL/%VM),%2);@set %VL/%VM=NO_INHERIT;@verb %VL=%0,%VP,You donate to [name(%VL)].,%VO,,%VA;@notify me},lt(%2,get(%VL/%VC)),{@pemit %0=Feeling poor today?;@notify me},eq(get(%VL/%VC),0),{@pemit %0=[name(%VL)] is free.;@verb %VL=%0,%VP,You donate to [name(%VL)].,%VO,,%VA;@notify me},gt(%2,get(%VL/%VC)),{@pemit %0=You pay [u(FN_MONEYNAME,%2)] to [name(%VL)].;@pemit %0=You get [u(FN_MONEYNAME,sub(%2,get(%VL/%VC)))] back in change.;&%VM %0=sub(get(%0/%VM),get(%VL/%VC));@set %0/%VM=NO_INHERIT;&%VM %VL=add(get(%VL/%VM),get(%VL/%VC));@set %VL/%VM=NO_INHERIT;@verb %VL=%0,%VP,You pay [name(%VL)].,%VO,,%VA;@notify me},{@pemit %0=You pay [u(FN_MONEYNAME,get(%VL/%VC))] to [name(%VL)].;&%VM %0=sub(get(%0/%VM),get(%VL/%VC));@set %0/%VM=NO_INHERIT;&%VM %VL=add(get(%VL/%VM),get(%VL/%VC));@set %VL/%VM=NO_INHERIT;@verb %VL=%0,%VP,You pay [name(%VL)].,%VO,,%VA;@notify me}}

@@ Pay command - paying a person.
&CODE_GIVE3 ATM=@wait me={@VL me=locate(%0,%1,*);@switch/first 1=and(hasflag(owner(%0),WIZARD),gt(%2,0)),{@pemit %0=You give [u(FN_MONEYNAME,%2)] to [name(%VL)].;&%VM %VL=add(get(%VL/%VM),%2);@set %VL/%VM=NO_INHERIT;@pemit %VL=[name(%0)] gifts you with [u(FN_MONEYNAME,%2)].;@notify me},and(hasflag(owner(%0),WIZARD),eq(%2,0)),{@pemit %0=You must specify a non-zero amount.;@notify me},and(and(hasflag(owner(%0),WIZARD),lt(%2,0)),gt(u(FN_ABS,%2),get(%VL/%VM))),{@pemit %0=Thats more money than [name(%VL)] has.;@notify me},and(hasflag(owner(%0),WIZARD),lt(%2,0)),{@pemit %0=You take [u(FN_MONEYNAME,u(FN_ABS,%2))] from [name(%VL)].;&%VM %VL=add(get(%VL/%VM),%2);@set %VL/%VM=NO_INHERIT;@pemit %VL=[name(%0)] takes [u(FN_MONEYNAME,u(FN_ABS,%2))] from you.;@notify me},gt(%2,get(%0/%VM)),{@pemit %0=Thats more money than you have.;@notify me},lte(%2,0),{@pemit %0=You can't give [name(%VL)] that amount!;@notify me},{@pemit %0=You give [u(FN_MONEYNAME,%2)] to [name(%VL)].;&%VM %VL=add(get(%VL/%VM),%2);@set %VL/%VM=NO_INHERIT;&%VM %0=sub(get(%0/%VM),%2);@set %0/%VM=NO_INHERIT;@pemit %VL=[name(%0)] gives you [u(FN_MONEYNAME,%2)].;@notify me}}


@@ Buy something from a machine - no amount given.
&CODE_BUY ATM=@wait me={@VL me=locate(%0,%1,nT);@switch/first 1=strmatch(%VL,#-1),{@pemit %0=I don't see that here.;@notify me},strmatch(%VL,#-2),{@pemit %0=I don't know which one you mean!;@notify me},not(strmatch(type(%VL),THING)),{@pemit %0=You cannot buy from that!;@notify me},not(elock(%VL/Use,%0)),{@pemit %0=You are not allowed to buy from that.;@notify me},strmatch(get(%VL/%VC-%2),),{@pemit %0=[name(%VL)] has no such product for sale.;@notify me},lt(get(%VL/%VC-%2),0),{@pemit %0=[name(%VL)] has a negative cost set!},gt(get(%VL/%VC-%2),get(%0/%VM)),{@pemit %0=That costs more than you have.;@notify me},eq(get(%VL/%VC-%2),0),{@pemit %0=[name(%VL)] doesn't charge you for that.;@verb %VL=%0,%VP-%2,You pay [name(%VL)].,%VO-%2,,%VA-%2;@notify me},{@pemit %0=You pay [u(FN_MONEYNAME,get(%VL/%VC-%2))] to [name(%VL)];&%VM %0=sub(get(%0/%VM),get(%VL/%VC-%2));@set %0/%VM=NO_INHERIT;&%VM %VL=add(get(%VL/%VM),get(%VL/%VC-%2));@set %VL/%VM=NO_INHERIT;@verb %VL=%0,%VP-%2,You pay [name(%VL)].,%VO-%2,,%VA-%2;@notify me}}

@@ Buy something from a machine - amount given.
&CODE_BUY2 ATM=@wait me={@VL me=locate(%0,%1,nT);@switch/first 1=strmatch(%VL,#-1),{@pemit %0=I don't see that here.;@notify me},strmatch(%VL,#-2),{@pemit %0=I don't know which one you mean!;@notify me},not(strmatch(type(%VL),THING)),{@pemit %0=You cannot buy from that!;@notify me},not(elock(%VL/Use,%0)),{@pemit %0=You are not allowed to buy from that.;@notify me},strmatch(get(%VL/%VC-%2),),{@pemit %0=[name(%VL)] has no such product for sale.;@notify me},gt(%3,get(%0/%VM)),{@pemit %0=Thats more than you have.;@notify me},lt(%3,get(%VL/%VC-%2)),{@pemit %0=Feeling poor today?;@notify me},gt(%3,get(%VL/%VC-%2)),{@pemit %0=You pay [u(FN_MONEYNAME,%3)] to [name(%VL)];@pemit %0=You get [u(FN_MONEYNAME,sub(%3,get(%VL/%VC-%2)))] back in change.;&%VM %0=sub(get(%0/%VM),get(%VL/%VC-%2));@set %0/%VM=NO_INHERIT;&%VM %VL=add(get(%VL/%VM),get(%VL/%VC-%2));@set %VL/%VM=NO_INHERIT;@verb %VL=%0,%VP-%2,You pay [name(%VL)].,%VO-%2,,%VA-%2;@notify me},{@pemit %0=You pay [u(FN_MONEYNAME,get(%VL/%VC-%2))] to [name(%VL)];&%VM %0=sub(get(%0/%VM),get(%VL/%VC-%2));@set %0/%VM=NO_INHERIT;&%VM %VL=add(get(%VL/%VM),get(%VL/%VC-%2));@set %VL/%VM=NO_INHERIT;@verb %VL=%0,%VP-%2,You pay [name(%VL)].,%VO-%2,,%VA-%2;@notify me}}



@@ Attribute Mods
@@ ~~~~~~~~~~~~~~
@@ Most of the attributes on the object can be set NO_COMMAND, and save
@@ the server some headaches.

@dolist setdiff(lattr(ATM),lattr(ATM/CMD_*))=@set ATM/##=NO_COMMAND