@create Market Parent
@link Market Parent = #455
@parent Market Parent=#1297
@lock/Basic Market Parent=#58
@lock/Use Market Parent=canuse/1
@set Market Parent = WIZARD
&FUN_SELL Market Parent=[switch([strmatch([loc(me)],[loc(%2)])],1,[switch([gt(%0,0)],1,[switch([lte([u(fun_calc_price,%0,%1)],[v(money)])],1,[set(me,money:[sub([v(money)],[u(fun_calc_price,%0,%1)])])][set(%#,money:[add([get(%#/money)],[u(fun_calc_price,%0,%1)])])][set(%2,storage_%1:[sub([get(%2/storage_%1)],%0)])][switch([get(%2/storage_%1)],0,[wipe(%2/storage_%1)])][switch([hasattr(me,storage_%1)],1,[set(me,storage_%1:[add([get(me/storage_%1)],%0)])],0,[set(me,storage_%1:%0)])][trigger(%2/fun_calc_capacity_used)][trigger(%2/fun_calc_capacity_remaining)][switch([get(%2/storage_%1)],0,[wipe(%2/storage_%1)])][pemit(%#,You sell %0 of [capstr([lcstr(%1)])] for [u(fun_calc_price,%0,%1)] credits.)],0,[pemit(%#,The [name(me)] doesn't have enough money to do that.)])],0,[pemit(%#,Error: Number must be created than 0.)])],0,[pemit(%#,Error: Must be in same location.)])]
&CMD_SELL Market Parent=$sell * of *=*:th [switch([cand([hasattr(%2,cargocan)],[hasflag(%2,wiz)])],1,[switch([hasattr(%2,storage_%1)],1,[switch([lte(%0,[get(%2/storage_%1)])],1,[u(fun_sell,%0,%1,%2)],0,[pemit(%#,The [name(%2)] does not have that much.)])],0,[pemit(%#,The [name(%2)] does not have [capstr([lcstr(%1)])].)])],0,[pemit(%#,Invalid source.)])]
&CMD_CHECK_MONEY Market Parent=$check money:th [pemit(%#,The [name(me)] currently has [ansi(h,[v(money)])] credits to spend.)]
&FUN_CALC_PRICE Market Parent=[mul([v(price_%1)],%0)]
&FUN_BUY Market Parent=[switch([strmatch([loc(me)],[loc(%2)])],1,[switch([gt(%0,0)],1,[switch([lte([u(fun_calc_price,%0,%1)],[get(%#/money)])],1,[set(me,money:[add([v(money)],[u(fun_calc_price,%0,%1)])])][set(%#,money:[sub([get(%#/money)],[u(fun_calc_price,%0,%1)])])][set(me,storage_%1:[sub([v(storage_%1)],%0)])][switch([v(storage_%1)],0,[wipe(me,storage_%1)])][switch([hasattr(%2,storage_%1)],1,[set(%2,storage_%1:[add([get(%2/storage_%1)],%0)])],0,[set(%2,storage_%1:%0)])][trigger(%2/fun_calc_capacity_used)][trigger(%2/fun_calc_capacity_remaining)][switch([v(storage_%1)],0,[wipe(me/storage_%1)])][pemit(%#,You buy %0 of [capstr([lcstr(%1)])] for [u(fun_calc_price,%0,%1)] credits.)],0,[pemit(%#,You don't have enough money to do that.)])],0,[pemit(%#,Error: Number must be created than 0.)])],0,[pemit(%#,Error: Must be in same location.)])]
&CMD_BUY Market Parent=$buy * of *=*:th [switch([cand([hasattr(%2,cargocan)],[hasflag(%2,wiz)])],1,[switch([lte(%0,[get(%2/capacity_remaining)])],1,[switch([hasattr(me,storage_%1)],1,[switch([lte(%0,[v(storage_%1)])],1,[u(fun_buy,%0,%1,%2)],0,[pemit(%#,The [name(me)] does not have that much.)])],0,[pemit(%#,The [name(me)] does not carry [capstr([lcstr(%1)])].)])],0,[pemit(%#,The [name(%2)] cannot hold that much.)])],0,[pemit(%#,Invalid destination.)])]
&CMD_CALC Market Parent=$calc * of *:th [switch([hasattrp(me,production_%1)],0,[pemit(%#,Invalid item.)],1,[switch([or([hasattr(me,price_%1)],[hasattrp(me,price_%1)])],1,[pemit(%#,%0 units of [capstr([lcstr(%1)])] will cost [u(fun_calc_price,%0,%1)] credits.)],0,[pemit(%#,That item is not for sale.)])]
&CMD_FOR_SALE Market Parent=$for sale:th [pemit(%#,[ansi(v(border_color),[repeat(=,76)])]%r[center([ansi(v(title_color),Items For Sale)],76)]%r[ansi(v(border_color),[repeat(=,76)])]%r%b[ansi(u(subtitle_color)u,Item[space(21)]Amount[space(4)]Price per Unit[space(26)])]%r[u(fun_find_contents)][ansi(v(border_color),[repeat(=,76)])]
&FUN_FIND_CONTENTS Market Parent=[if([lattr(me/STORAGE_*)],%b[iter([lattr(me/STORAGE_*)],[ansi([switch([strmatch([v(commodlist)],*|[edit(##,STORAGE_,)]|*)],1,ng,0,n)],[ljust([capstr([lcstr([edit(##,STORAGE_,)])])],25)])][ljust([ansi(nc,[v(##)])],10)][switch([or([hasattr(me,price_[edit(##,STORAGE_,)])],[hasattrp(me,price_[edit(##,STORAGE_,)])])],1,[v(price_[edit(##,STORAGE_,)])],0,Not for Sale)]%r)],None.%r)]
&CMD_REMOVE_COMMOD Market Parent=$remove * of * to *:th [switch([or([hasflag(%#,Wiz)],[strmatch([v(operator)],%#)])],1,[switch([hasattr(%2,cargocan)],0,[pemit(%#,Invalid source.)],1,[switch([hasattr(me,storage_%1)],1,[switch([lte(%0,[v(storage_%1)])],1,[u(fun_remove_commods,%0,%1,%2)],0,[pemit(%#,Error: [name(me)] does not contain that much material.)])],0,[pemit(%#,Error: [name(me)] does not contain that material.)])],0,[pemit(%#,Permission denied.)])]
&FUN_REMOVE_COMMODS Market Parent=[switch([gt(%0,0)],1,[switch([lte(%0,[get(%2/capacity_remaining)])],1,[switch([strmatch([loc(me)],[loc(%2)])],1,[switch([hasattr(%2,storage_%1)],1,[set(%2,storage_%1:[add([get(%2/storage_%1)],%0)])],0,[set(%2,storage_%1:%0)])][set(me,storage_%1:[sub([v(storage_%1)],%0)])][switch([v(storage_%1)],0,[wipe(me/storage_%1)])][pemit(%#,You remove %0 of %2 to [name(%2)].)][trigger(%2/fun_calc_capacity_used)][trigger(%2/fun_calc_capacity_remaining)],0,[pemit(%#,Error: Must be in same location.)])],0,[pemit(%#,The [name(%2)] cannot hold that much.)])],0,[pemit(%#,Error: Must be greater than 0.)]
&FUN_ADD_COMMODS Market Parent=[switch([gt(%0,0)],1,[switch([strmatch([loc(me)],[loc(%2)])],1,[switch([hasattr(me,storage_%1)],1,[set(me,storage_%1:[add([v(storage_%1)],%0)])],0,[set(me,storage_%1:%0)])][set(%2,storage_%1:[sub([get(%2/storage_%1)],%0)])][switch([get(%2/storage_%1)],0,[wipe(%2/storage_%1)])][trigger(%2/fun_calc_capacity_used)][trigger(%2/fun_calc_capacity_remaining)][pemit(%#,You add %0 of %2 from [name(%2)].)],0,[pemit(%#,Error: Must be in same location.)])],0,[pemit(%#,Error: Number must be greater than 0.)])]
&CMD_ADD_COMMOD Market Parent=$add * of * from *:th [switch([or([hasflag(%#,Wiz)],[strmatch([v(operator)],%#)])],1,[switch([hasattr(%2,cargocan)],0,[pemit(%#,Invalid source.)],1,[switch([hasattr(%2,storage_%1)],1,[switch([lte(%0,[get(%2/storage_%1)])],1,[u(fun_add_commods,%0,%1,%2)],0,[pemit(%#,Error: %2 does not contain that much material.)])],0,[pemit(%#,Error: %2 does not contain that material.)])],0,[pemit(%#,Permission denied.)])]
&CMD_SET_OPERATOR Market Parent=$set operator *:th [switch([or([hasflag(%#,Wiz)],[strmatch([v(operator)],%#)])],1,[set(me,operator:%0)][pemit(%#,[name(*%0)] %(%0%) is now the [name(me)] operator.)],0,[pemit(%#,Permission denied.)])]
&OPERATOR Market Parent=#58
@DESCRIBE Market Parent=The market is bustling.  There are seemingly endless rows of tables with vendors buying and selling various things.  You see a large console that directs the sales infront of you.
@set Market Parent/DESCRIBE=no_command visual
&VERSION Market Parent=2.1
@set Market Parent/VERSION=no_command
&CREDITS Market Parent=Dave@GalacticMUSH (davemilford@home.com)
@set Market Parent/CREDITS=no_command
&CMD_SET_PRICE Market Parent=$set price *=*:th [switch([gt(%1,0)],1,[switch([or([hasflag(%#,Wiz)],[strmatch([v(operator)],%#)])],1,[switch([hasattrp(me,production_%0)],1,[set(me,price_%0:%1)][pemit(%#,You set [capstr([lcstr(%0)])]'s price to %1 credits.)],0,[pemit(%#,No such material or commodity.)])],0,[pemit(%#,Permission denied.)])],0,[pemit(%#,Error: Number must be greater than 0.)])]
@MONEY Market Parent=150000
@set Market Parent/MONEY=wizard
&CMD_ADD_MONEY Market Parent=$add money *:th [switch([gt(%0,0)],1,[switch([or([hasflag(%#,Wiz)],[strmatch([v(operator)],%#)])],1,[switch([gt(%0,0)],1,[switch([lte(%0,[get(%#/money)])],1,[set(me,money:[add([v(money)],%0)])][pemit(%#,You add %0 money to the market system, leaving the total at [v(money)].)][set(%#,money:[sub([get(%#/money)],%0)])],0,[pemit(%#,You don't have enough money to do that.)])],0,[pemit(%#,Error: number must be greater than 0.)])],0,[pemit(%#,Permission denied.)])],0,[pemit(%#,Error: Number must be greater than 0.)])]
&CMD_DEL_MONEY Market Parent=$del money *:th [switch([gt(%0,0)],1,[switch([or([hasflag(%#,Wiz)],[strmatch([v(operator)],%#)])],1,[switch([gt(%0,0)],1,[switch([lte(%0,[v(money)])],1,[set(me,money:[sub([v(money)],%0)])][pemit(%#,You take %0 money to the market system, leaving the total at [v(money)].)][set(%#,money:[add([get(%#/money)],%0)])],0,[pemit(%#,The market doesn't have enough money to do that.)])],0,[pemit(%#,Error: number must be greater than 0.)])],0,[pemit(%#,Permission denied.)])],0,[pemit(%#,Error: Number must be greater than 0.)])]