@create Mining Console Parent
@link Mining Console Parent = #455
@parent Mining Console Parent=#1297
@lock/Basic Mining Console Parent=#58
@lock/Use Mining Console Parent=canuse/1
@set Mining Console Parent = WIZARD
&CMD_ADD_WORKERS Mining Console Parent=$add workers *:th [switch([gte(%0,1)],1,[switch([lte([mul(%0,1000)],[get(%#/money)])],1,[set(%#,money:[sub([get(%#/money)],[mul(%0,1000)])])][set(me,max_capacity:[add([v(max_capacity)],[round(%0,0)])])][pemit(%#,You hire [round(%0,0)] additional workers for the workforce.)],0,[pemit(%#,You don't have enough money to do that.)])],0,[pemit(%#,You have to hire a minimum of one worker.)])]
&BETWEEN Mining Console Parent=[and([gte(%0,%1)],[lte(%0,%2)])]
&CMD_MATERIAL_INFO Mining Console Parent=$material info *:th [switch([hasattr(me,material_%0)],1,[pemit(%#,[ljust([ansi(hr,Material:)],14)][ansi(h,[capstr([lcstr(%0)])])]%r[ljust([ansi(hr,Productivity:)],13)] [ansi(h,[v(production_%0)])]%r[ljust([ansi(hr,Energy Req.:)],13)] [ansi(h,[v(energy_%0)])]%r[ljust([ansi(hr,Description:)],13)] [ansi(h,[v(desc_%0)])])],0,[pemit(%#,No such material.)])]
&FUN_ALLOW Mining Console Parent=[switch([and([hasattrp(me,production_%0)],[hasattrp(me,energy_%0)])],1,[set(me,material_%0:yes)][pemit(%#,[name(me)] can now mine %0.)],0,[pemit(%#,Error: Either that material does not exist or has not been set up correctly.)])]
&CMD_ALLOW Mining Console Parent=$allow *:th [switch([hasflag(%#,Wiz)],1,[u(fun_allow,%0)],0,[pemit(%#,Permission denied.)])]
&FUN_SET_MAX_CAPACITY Mining Console Parent=[set(me,max_capacity:%0)][pemit(%#,[name(me)] now has %0 available workers.)]
&CMD_SET_MAX_CAPACITY Mining Console Parent=$set max capacity *:th [switch([hasflag(%#,Wiz)],1,[u(fun_set_max_capacity,%0)],0,[pemit(%#,Permission denied.)])]
&CMD_SET_FARM Mining Console Parent=$set farm *:th [switch([hasflag(%#,Wiz)],1,[switch([strmatch([zone([loc(me)])],[zone([loc(%0)])])],1,[u(fun_set_farm,%0)],0,[pemit(%#,Error: Zones do not match, cannot use that Farm.)])],0,[pemit(%#,Permission denied.)])]
&CMD_SET_PUMP Mining Console Parent=$set pump *:th [switch([hasflag(%#,Wiz)],1,[switch([strmatch([zone([loc(me)])],[zone([loc(%0)])])],1,[u(fun_set_pump,%0)],0,[pemit(%#,Error: Zones do not match, cannot use that Water Pump.)])],0,[pemit(%#,Permission denied.)])]
&FUN_SET_PUMP Mining Console Parent=[set(me,pump:%0)][pemit(%#,[name(me)] is now using [name(%0)] %(%0%) as a Water Pump.)]
&FUN_SET_FARM Mining Console Parent=[set(me,farm:%0)][pemit(%#,[name(me)] is now using [name(%0)] %(%0%) as a Farm.)]
&FUN_SET_POWER_PLANT Mining Console Parent=[set(me,power_plant:%0)][pemit(%#,[name(me)] is now using [name(%0)] %(%0%) as a Power Plant.)]
&CMD_SET_POWER_PLANT Mining Console Parent=$set power plant *:th [switch([hasflag(%#,Wiz)],1,[switch([strmatch([zone([loc(me)])],[zone([loc(%0)])])],1,[u(fun_set_power_plant,%0)],0,[pemit(%#,Error: Zones do not match, cannot use that Power Plant.)])],0,[pemit(%#,Permission denied.)])]
&CMD_ADD_DESTINATION Mining Console Parent=$add destination *:th [switch([hasflag(%#,Wiz)],1,[switch([strmatch([zone([loc(me)])],[zone([loc(%0)])])],1,[u(fun_add_destination,%0)],0,[pemit(%#,Error: Zones do not match.)])],0,[pemit(%#,Permission denied.)])]
&FUN_ADD_DESTINATION Mining Console Parent=[switch([strmatch([v(destination_list)],*|%0|*)],0,[switch([or([hasattr(%0,cargocan)],[strmatch([name(%0)],*Factory*)])],1,[set(me,destination_list:[v(destination_list)]%0|)][pemit(%#,Destination [name(%0)] %(%0%) is now available.)],0,[pemit(%#,That is an invalid destination.)])],1,[pemit(%#,That destination is already on the list.)])]
&CAPACITY_AVAILABLE Mining Console Parent=414
&VERSION Mining Console Parent=2.1
@set Mining Console Parent/VERSION=no_command
&FUN_MOVE_COMMODS Mining Console Parent=[iter([lattr(me/STORAGE_*)],[set([v(destination)],##:[switch([hasattr([v(destination)],##)],1,[add([get([v(destination)]/##)],[v(##)])],0,[v(##)])])][wipe(me/##)])][trigger([v(destination)]/fun_calc_capacity_used)][trigger([v(destination)]/fun_calc_capacity_remaining)]
&CMD_SET_WORK_FORCE2 Mining Console Parent=$employ *:th [switch([isnum(%0)][lte(%0,[v(max_capacity)])][gte(%0,0)],111,[u(fun_set_capacity,%0)][u(fun_calc_food_needed)][u(fun_calc_water_needed)],110,[pemit(%#,Number must be above 0.)],101,[pemit(%#,Number is too high.)],100,[pemit(%#,Number is too high.)],[pemit(%#,Argument must be a number.)])]
&CMD_SET_WORK_FORCE Mining Console Parent=$set work force *:th [switch([isnum(%0)][lte(%0,[v(max_capacity)])][gte(%0,0)],111,[u(fun_set_capacity,%0)][u(fun_calc_food_needed)][u(fun_calc_water_needed)],110,[pemit(%#,Number must be above 0.)],101,[pemit(%#,Number is too high.)],100,[pemit(%#,Number is too high.)],[pemit(%#,Argument must be a number.)])]
&CMD_ALLOCATE Mining Console Parent=$alloc *=*:th [switch({[u(ismaterial,%0)][cand([lte(%1,[add([v(free_power)],[v(%0_alloc)])])],[gte(%1,0)])]},11,[u(fun_alloc_power,%0,%1)],10,[pemit(%#,Not enough power to do that.)],01,[pemit(%#,That is not a valid material.)],00,[pemit(%#,That is not a valid material.)])]
&FUN_CALC_POWER_NEEDED_ Mining Console Parent=[iter([lattr(me/PRODUCING_*)],[add([v(power_needed)],[mul([v(##)],[v([edit(##,PRODUCING_,)]_energy)])]
&SWEEP Mining Console Parent=[trigger(me/power_sweep)][trigger(me/fun_prod_cycle)][trigger(me/fun_calc_worker_health)]
&FUN_SHOW_WORKER_HEALTH Mining Console Parent=[if([strmatch([v(worker_health)],0)],[ansi(hr,Dying)])][if([u(between,[v(worker_health)],0.1,4.9)],[ansi(hr,Bad)])][if([u(between,[v(worker_health)],5.0,7.5)],[ansi(hy,Fair)])][if([u(between,[v(worker_health)],7.6,8.9)],[ansi(hg,Good)])][if([u(between,[v(worker_health)],9.0,10.0)],[ansi(hg,Excellent)])]
&WORKER_HEALTH Mining Console Parent=10
&HEALTH_BUFFER2 Mining Console Parent=10
&HEALTH_BUFFER Mining Console Parent=10
&WORKER_HEATLH Mining Console Parent=10
&FUN_HURT_HEALTH Mining Console Parent=[switch([strmatch([v(worker_health)],0)],0,[set(me,worker_health:[sub([v(worker_health)],0.2)])][emit(The workers at [name(me)] demand food and water.)],1,[emit(The workers at [name(me)] demand food and water.%r1 worker has died.)][set(me,current_capacity:[sub([v(current_capacity)],1)])][set(me,max_capacity:[sub([v(max_capacity)],1)][iter([lattr(me/PRODUCING_*)],[switch([hasattr(me,remove_buffer)],0,[set(me,remove_buffer:1)][set(me,##:[sub([v(##)],1)])])])])][u(fun_calc_food_needed)][u(fun_calc_water_needed)]
&FUN_IMPROVE_HEALTH Mining Console Parent=[set(me,worker_health:[add([v(worker_health)],0.2)])][emit(The workers' health at [name(me)] improves.)][u(fun_calc_food_needed)][u(fun_calc_water_needed)]
&FUN_CALC_WORKER_HEALTH Mining Console Parent=[set(me,health_buffer:[v(worker_health)])][u(fun_calc_food_needed)][u(fun_calc_food_available)][switch([gte([u(fun_calc_water_available)],[v(water_needed)])][gte([u(fun_calc_food_available)],[v(food_needed)])],11,[set(me,health_buffer2:10)][switch([lt([v(health_buffer)],[v(health_buffer2)])],1,[u(fun_improve_health)],0,[set(me,worker_health:10)])],10,[u(fun_hurt_health)],01,[u(fun_hurt_health)],00,[u(fun_hurt_health)])]
&FUN_SHOW_WATER_NEEDED Mining Console Parent=[switch([gte([u(fun_calc_water_available)],[v(water_needed)])],1,[ansi(ng,[v(water_needed)])],0,[ansi(nr,[v(water_needed)])]
&FUN_SHOW_FOOD_NEEDED Mining Console Parent=[switch([gte([u(fun_calc_food_available)],[v(food_needed)])],1,[ansi(ng,[v(food_needed)])],0,[ansi(nr,[v(food_needed)])]
&WATER_NEEDED Mining Console Parent=0
&FUN_CALC_WATER_NEEDED Mining Console Parent=[set(me,water_needed:[v(current_capacity)])]
&FOOD_NEEDED Mining Console Parent=0
&FUN_CALC_FOOD_NEEDED Mining Console Parent=[set(me,food_needed:[v(current_capacity)])]
&FUN_CALC_WATER_AVAILABLE Mining Console Parent=[get([v(pump)]/water_[num(me)])]
&FUN_CALC_FOOD_AVAILABLE Mining Console Parent=[get([v(farm)]/food_[num(me)])]
&POWER_SWEEP Mining Console Parent=[u(fun_calc_power_needed)][switch([gt([v(power_needed)],[u(fun_power_supplied)])],1,[emit(Global power shortage.  Resetting allocations.)][iter([lattr(me/PRODUCING_*)],[set(me,##:0)][set(me,[edit(##,PRODUCING_,)]_alloc:0)])][u(fun_calc_power_used)][u(fun_calc_power_needed)][u(fun_calc_power_available)][u(fun_calc_capacity_remaining)])]
&FUN_WAREHOUSE Mining Console Parent=[if([lattr(me/STORAGE_*)],%b[iter([lattr(me/STORAGE_*)],[ljust([capstr([lcstr([edit(##,STORAGE_,)])])],30)][u(##)]%r)],None%r)]
&LASTPROD Mining Console Parent=933292791
&FUN_PROD_CYCLE Mining Console Parent=[iter([lattr(me/PRODUCING_*)],[switch([hasattr(me,STORAGE_[edit(##,PRODUCING_,)])],1,[set(me,STORAGE_[edit(##,PRODUCING_,)]:[add([v(storage_[edit(##,PRODUCING_,)])],[u(fun_calc_prod,[edit(##,PRODUCING_,)])])])],0,[set(me,STORAGE_[edit(##,PRODUCING_,)]:[u(fun_calc_prod,[edit(##,PRODUCING_,)])])])][set(me,lastprod:[secs()])][trigger(me/fun_move_commods)]
&USED_POWER Mining Console Parent=0
&POWER_USED Mining Console Parent=300
&FUN_CALC_POWER_USED Mining Console Parent=[set(me,used_power:0)][iter([lattr(me/*_ALLOC)],[set(me,used_power:[add([v(used_power)],[v(##)])])]
&FUN_ALLOC_POWER Mining Console Parent=[set(me,%0_alloc:%1)][pemit(%#,[capstr([lcstr(%0)])] now has %1 power.)][u(fun_calc_power_used)][u(fun_calc_power_available)]
&FUN_CALC_POWER_STATUS Mining Console Parent=[switch([hasattr(me,power_plant)],1,[set(me,powered:yes)],0,[set(me,powered:no)])]
&CMD_STOP_MINING Mining Console Parent=$stop mining *:th [switch({[u(ismaterial,%0)][hasattr(me,PRODUCING_%0)]},01,{[pemit(%#,That is not a valid material.)]},10,{[pemit(%#,We are not mining that at this time.)]},00,{[pemit(%#,That is not a valid material.)]},11,{[wipe(me/producing_%0)][pemit(%#,No longer mining [capstr([lcstr(%0)])].)][wipe(me/%0_alloc)][u(fun_calc_power_used)][u(fun_calc_power_needed)][u(fun_calc_power_available)][[u(fun_calc_capacity_remaining)]})]
&FUN_POWER_COLOR Mining Console Parent=[switch([lt([v([edit(%0,PRODUCING_,)]_alloc)],[u(fun_calc_energy,[edit(%0,PRODUCING_,)])])],1,nr,0,[switch([gt([v([edit(%0,PRODUCING_,)]_alloc)],[u(fun_calc_energy,[edit(%0,PRODUCING_,)])])],1,nm,0,ng)])]
&CREDITS Mining Console Parent=Dave@GalacticMUSH (davemilford@home.com)
@set Mining Console Parent/CREDITS=no_command
&FUN_SET_MINING Mining Console Parent=[set(me,PRODUCING_%0:%1)][switch([hasattr(me,%0_alloc)],0,[set(me,%0_alloc:0)])][pemit(%#,%1 workers have been assigned to mine [capstr([lcstr(%0)])].)][u(fun_calc_power_used)][u(fun_calc_power_needed)][u(fun_calc_power_available)]
&CAPACITY_NEEDED Mining Console Parent=0
&FUN_CALC_CAPACITY_NEEDED Mining Console Parent=[set(me,capacity_needed:0)][iter([lattr(me/PRODUCING_*)],[set(me,capacity_needed:[add([v(capacity_needed)],[v(##)])])]
&FUN_CALC_POWER_AVAILABLE Mining Console Parent=[set(me,FREE_POWER:[sub([switch([hasattr(me,power_plant)],1,[u(fun_power_supplied)],0,0)],[v(used_power)])])]
&ISMATERIAL Mining Console Parent=[hasattr(me,material_%0)]
&CMD_MINE Mining Console Parent=$mine *=*:th [switch([u(ismaterial,%0)][lte(%1,[add([v(capacity_remaining)],[switch([hasattr(me,producing_%0)],1,[v(producing_%0)],0,1)])])][gte(%1,0)],111,[u(fun_set_mining,%0,%1)],110,[pemit(%#,Number must be greater than 0.)],101,[pemit(%#,Not enough workers to do that.)],100,[pemit(%#,Not enough workers to do that.)],011,[pemit(%#,That is not a valid material.)],001,[pemit(%#,That is not a valid material.)],000,[pemit(%#,That is not a valid material.)],010,[pemit(%#,That is not a valid material.)])][u(fun_calc_capacity_remaining)]
&FUN_CALC_ENERGY Mining Console Parent=[mul([v(energy_%0)],[v(producing_%0)])]
&FUN_CALC_CAPACITY_REMAINING Mining Console Parent=[set(me,capacity_remaining:[v(current_capacity)])][iter([lattr(me/PRODUCING_*)],[set(me,capacity_remaining:[sub([v(capacity_remaining)],[v(##)])])]
&FUN_SET_CAPACITY Mining Console Parent=[set(me,current_capacity:%0)][u(fun_calc_capacity_needed)][pemit(%#,%0 workers are now available.)][switch([lt(%0,[v(capacity_needed)])],1,{[pemit(%#,Not enough workers, resetting allocations.)][iter([lattr(me/PRODUCING_*)],[set(me,##:0)])]})][u(fun_calc_capacity_remaining)][u(fun_calc_power_used)][u(fun_calc_power_needed)][u(fun_calc_power_available)][u(fun_calc_food_needed)][u(fun_calc_water_needed)]
&FUN_CALC_PROD Mining Console Parent=[switch([gte([v(%0_alloc)],[mul([v(energy_%0)],[v(producing_%0)])])],1,[mul([mul([v(production_%0)],[v(producing_%0)])],[fdiv([v(worker_health)],10)])],0,0)]
&CAPACITY_REMAINING Mining Console Parent=0
&FUN_FIND_MINING Mining Console Parent=[if([lattr(me/PRODUCING_*)],{[iter([lattr(me/PRODUCING_*)],[ljust([capstr([lcstr([edit(##,PRODUCING_,)])])],20)][ljust([v(##)],9)][ljust([ansi([u(fun_power_color,##)],[v([edit(##,PRODUCING_,)]_alloc)])],8)][ljust([u(fun_calc_energy,[edit(##,PRODUCING_,)])],15)][ljust([ansi(nc,[u(fun_calc_prod,[edit(##,PRODUCING_,)])])],21)][ansi(v(border_color),|%r|)])][ansi(v(border_color),[repeat(-,74)]|%r|%b)]},{[ljust([ansi(hr,None)],73)][ansi(v(border_color),|%r|)][ansi(v(border_color),[repeat(-,74)]|%r|%b)]})]
&POWER_NEEDED Mining Console Parent=0
&FUN_CALC_POWER_NEEDED Mining Console Parent=[set(me,power_needed:0)][iter([lattr(me/PRODUCING_*)],[set(me,power_needed:[add([v(power_needed)],[mul([v(##)],[v(energy_[edit(##,PRODUCING_,)])])])]
&FUN_MINING_PROSPECTS Mining Console Parent=%b[iter([lattr(me/MATERIAL_*)],[ljust([capstr([lcstr([edit(##,MATERIAL_,)])])],15)][ljust([v(production_[edit(##,MATERIAL_,)])],15)][ljust([v(energy_[edit(##,MATERIAL_,)])],15)]%r)]
&CMD_PROSPECTS Mining Console Parent=$prospects:th [pemit(%#,[ansi(v(border_color),[repeat(=,76)])]%r[center([ansi(v(title_color),Mining Prospects)],76)]%r[ansi(v(border_color),[repeat(=,76)])]%r%b[ansi(v(title_color),[ljust(Material,15)][ljust(Productivity,15)][ljust(Energy/Unit,15)])]%r[if([lattr(me/MATERIAL_*)],[u(fun_mining_prospects)],%bNone%r)][ansi(v(border_color),[repeat(=,76)])]
&FUN_POWER_SUPPLIED Mining Console Parent=[get([v(power_plant)]/POWER_[num(me)])]
&FREE_POWER Mining Console Parent=0
&POWERED Mining Console Parent=no
&FUN_POWER_STATUS Mining Console Parent=[switch([v(powered)],yes,[switch([gt([v(power_needed)],[v(used_power)])],1,[ansi(hr,Insufficient Power)],0,[ansi(hg,Powered)])],no,[ansi(hr,No Power)],insufficient,[ansi(hy,Insufficient Power)],None)]
&CURRENT_CAPACITY Mining Console Parent=0
&MAX_CAPACITY Mining Console Parent=10
&OWNER Mining Console Parent=Administration Mining Corp.
&PLANET Mining Console Parent=Glonkus Prime
@DESCRIBE Mining Console Parent=[squish([u(fun_calc_power_status)][u(fun_calc_power_available)][edit([set(me,power_needed:0)],%b,)][u(fun_calc_power_needed)])]%b[ansi(v(border_color),[repeat(_,74)]%r/)]%b[ljust([ansi(v(name_color),[v(planet)] Mining Console)],73)][ansi([v(border_color)],\\%r|[repeat(-,74)]|%r|)]%b[ljust([ansi(v(title_color),Owner:)] [v(owner)],73)][ansi([v(border_color)],|%r|)]%b[ljust([ansi(v(title_color),Destination:)] [switch([hasattr(me,destination)],1,[name([v(destination)])],0,None)],73)][ansi(v(border_color),|%r|%b)][ljust([ansi(v(title_color),Work Force:)] [v(max_capacity)],36)][ljust([ansi(v(title_color),Employed Workers:)] [v(current_capacity)] %([mul([fdiv([v(current_capacity)],[v(max_capacity)])],100)]%%%),37)][ansi(v(border_color),|%r|[repeat(-,74)]|%r|)]%b[ljust([ansi(v(title_color),Food Available:)] [switch([hasattr(me,farm)],1,[switch([hasattr([v(farm)],food_[num(me)])],1,[u(fun_calc_food_available)],0,0)],0,None)],36)][ljust([ansi(v(title_color),Water Available:)] [switch([hasattr(me,pump)],1,[switch([hasattr([v(pump)],water_[num(me)])],1,[u(fun_calc_water_available)],0,0)],0,None)],37)][ansi(v(border_color),|%r|%b)][ljust([ansi(v(title_color),Food Needed%b%b%b:)] [switch([hasattr(me,farm)],1,[u(fun_show_food_needed)],0,N/A)],36)][ljust([ansi(v(title_color),Water Needed%b%b%b:)] [switch([hasattr(me,pump)],1,[u(fun_show_water_needed)],0,N/A)],37)][ansi(v(border_color),|%r|)]%b[ljust([ansi(v(title_color),Worker Health%b:)] [u(fun_show_worker_health)] %([mul([fdiv([v(worker_health)],10)],100)]%%%),73)][ansi(v(border_color),|%r|[repeat(-,74)]|%r|)]%b[ljust([ansi(v(title_color),Power Plant:)]%b[switch([hasattr(me,power_plant)],1,[mid([name([v(power_plant)])],0,23)],0,None)],36)][ljust([ansi(v(title_color),Status[space(6)]:)]%b[u(fun_power_status)],37)][ansi(v(border_color),|%r|)]%b[ljust([ansi(v(title_color),Power Supplied%b:)]%b[switch([hasattr(me,power_plant)],1,[u(fun_power_supplied)],0,None)],36)][ljust([ansi(v(title_color),Power Used%b%b:)]%b[v(used_power)],37)][ansi(v(border_color),|%r|)]%b[ljust([ansi(v(title_color),Power Available:)]%b[v(free_power)],36)][ljust([ansi(v(title_color),Power Needed:)]%b[v(power_needed)],37)][ansi(v(border_color),|%r|[repeat(-,74)]|%r|)]%b[ljust([ansi(v(title_color),Currently Mining:)],73)][ansi(v(border_color),|%r|)]%b[ljust([ansi(v(subtitle_color),Material)],20)][ljust([ansi(v(subtitle_color),Workers)],9)][ljust([ansi(v(subtitle_color),Power)],8)][ljust([ansi(v(subtitle_color),Power Req.)],15)][ljust([ansi(v(subtitle_color),Hourly Production)],21)][ansi(v(border_color),|%r|)]%b[u(fun_find_mining)][ljust([ansi(v(title_color),Idle Workers:)] [v(capacity_remaining)],73)][ansi(v(border_color),|)]%r[ansi(v(border_color),\\[repeat(_,74)]/)]
@set Mining Console Parent/DESCRIBE=no_command visual
&CMD_SET_DESTINATION Mining Console Parent=$set destination *:th [switch([strmatch([v(destination_list)],*|%0|*)],1,[set(me,destination:%0)][pemit(%#,The raw materials are now transferred to [name(%0)] hourly.)],0,[pemit(%#,Invalid destination.)])]
&DESTINATION_LIST Mining Console Parent=|
&CMD_DESTINATION_LIST Mining Console Parent=$destination list:th [pemit(%#,[ansi(v(border_color),[repeat(=,76)])]%r[center([ansi(v(title_color),[name(me)] Destination List)],76)]%r[ansi(v(border_color),[repeat(=,76)])]%r [iter([edit([v(destination_list)],|,%b)],[ljust(##,8)][name(##)]%r)][ansi(v(border_color),[repeat(=,76)])])]
&CMD_DISALLOW Mining Console Parent=$disallow *:th [switch([hasflag(%#,Wiz)],1,[switch([hasattr(me,material_%0)],1,[wipe(me/material_%0)][pemit(%#,[name(me)] can no longer mine %0)][wipe(me/producing_%0)][wipe(me/alloc_%0)][u(fun_calc_power_needed)][u(fun_calc_power_used)][u(fun_calc_capacity_remaining)],0,[pemit(%#,Invalid material.)])],0,[pemit(%#,Permission denied.)])]