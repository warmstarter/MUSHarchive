@create Cargo Transport Parent
@lock/Basic Cargo Transport Parent==me
@lock/Use Cargo Transport Parent=canuse/1
@set Cargo Transport Parent = WIZARD
@set Cargo Transport Parent = NO_COMMAND
@AHEAR Cargo Transport Parent=th [switch([strmatch([num(*%0)],[v(driver)])],1,[switch([strmatch([zone(here)],[zone([loc([v(driver)])])])],1,[tel(me,[loc([v(driver)])])],0,[pemit([v(driver)],[name(me)] can't go there.%rYou stop driving the [name(me)].)][wipe(me/driver)])])]
&CAPACITY_REMAINING Cargo Transport Parent=200
&CAPACITY_USED Cargo Transport Parent=0
&CMD_CHANGEPASSWORD Cargo Transport Parent=$change password *=*:th [if(strmatch(%0,v(passwd)),[set(me,passwd:[secure(%1)])][pemit(%#,New password set to [secure(%1)].)],[pemit(%#,Incorrect password.)])]
&CMD_CHANGE_PASSWORD Cargo Transport Parent=$change password *=*/*:th [if(strmatch(name(me),*%0*),[if(strmatch(%1,v(passwd)),[set(me,passwd:[secure(%2)])][pemit(%#,New password set to [secure(%2)].)],[pemit(%#,Incorrect password.)])],[u(fun_fail_morethanone)])]
&CMD_DRIVE Cargo Transport Parent=$drive *:th [if(hasattr(me,locked),[pemit(%#,The [name(me)] is locked!)],[if(strmatch(name(me),*%0*),[emit(%n climbs into the [name(me)] and turns it on.)][set(me,driver:%#)],[u(fun_fail_morethanone)])])]
&CMD_DRIVE_INTO_SHIP Cargo Transport Parent=$drive * into *=*:th [if(strmatch(name(me),*%0*),[switch([and([hasattr(%1,nav_console)],[hasflag(%1,shipobj)])],1,[switch([strmatch(%2,[get([get(%1/nav_console)]/board_code)])],1,[if([lattr(me/STORAGE_*)],[pemit(%#,The [name(me)] is too heavy, it must be empty to drive on a ship.)],[emit(The [name(me)] drives into [name(%1)].)][tel(me,%1)])],0,[pemit(%#,Incorrect boarding code.)])],0,[pemit(%#,That is not a vessel.)])],[u(fun_fail_morethanone)])]
&CMD_LOAD Cargo Transport Parent=$load * of * from * to *=*:th [switch([hasattr(me,transfer)],0,[switch([u(fun_iscommod,[secure(%1)],[secure(%2)])][u(fun_gotenough,%0,%1,%2)][u(fun_isship,[secure(%3)])],111,[switch([gte([hs_get_attr([get(%3/nav_console)],cargoleft)],[mul(%0,[v(%1.weight)])])],1,[switch([u(fun_validorigin,[secure(%2)])],1,[switch([and([strmatch([loc(me)],[loc(%2)])],[strmatch([loc(me)],[loc(%3)])])],1,[switch([strmatch([get([get(%3/nav_console)]/board_code)],%4)],1,[u(fun_load_ship,[secure(%0)],[secure(%1)],[secure(%2)],[secure(%3)])],0,[pemit(%#,Error: Incorrect boarding code.)])],0,[pemit(%#,Error: Must be in same location.)])],0,[pemit(%#,Invalid origin.)])],0,[pemit(%#,The [name(%3)] cannot hold that much.)])],011,[pemit(%#,That is not a valid commodity.)],101,[pemit(%#,You do not have that much of that commodity.)],110,[pemit(%#,Invalid destination.)],[pemit(%#,Error in operation.)])][wait(1,[lit([wipe(me/transfer)])])],0,[pemit(%#,Cargo transfer already innitiated.)])]
&CMD_LOCK Cargo Transport Parent=$lock *=*:th [if(strmatch(name(me),*%0*),[if(strmatch(%1,v(passwd)),[if(hasattr(me,locked),[pemit(%#,The [name(me)] is already locked.)],[set(me,LOCKED:yes)][pemit(%#,The [name(me)] is now locked from all cargo transfers.)])],[pemit(%#,Incorrect password.)])],[u(fun_fail_morethanone)])]
&CMD_RELOAD Cargo Transport Parent=$reload * of * to * from *:th [if(strmatch(name(me),*%3*),[switch([hasattr(me,storage_%1)],1,[switch([lte(%0,[v(storage_%1)])],1,[switch([u(fun_isship,%2)],1,[switch([strmatch([loc(me)],[loc(%2)])],1,[u(fun_reload,[secure(%0)],[secure(%1)],[secure(%2)])],0,[pemit(%#,Error: Must be in same location.)])],0,[pemit(%#,That is not a vessel.)])],0,[pemit(%#,The [name(me)] does not carry that much.)])],0,[pemit(%#,The [name(me)] does not carry that.)])],[u(fun_fail_morethanone)])]
&CMD_TRANSFER Cargo Transport Parent=$transfer * of * from * to *:th [switch(%0,all,,[if(hasattr(me,locked),[pemit(%#,The [name(me)] is locked.)],[if(hasattr(%2,locked),[pemit(%#,The [name(%2)] is locked.)],[switch([u(fun_iscommod,[secure(%1)],[secure(%2)])][u(fun_gotenough,[secure(%0)],[secure(%1)],[secure(%2)])][u(fun_validdest,[secure(%3)])],111,[switch([gte([get(%3/capacity_remaining)],[mul(%0,[v(%1.weight)])])],1,[switch([u(fun_validorigin,[secure(%2)])],1,[switch([and([strmatch([loc(me)],[loc(%2)])],[strmatch([loc(me)],[loc(%3)])])],1,[u(fun_transfer_commod,[secure(%0)],[secure(%1)],[secure(%2)],[secure(%3)])][trigger(me/fun_calc_capacity_remaining)],0,[pemit(%#,Error: Must be in same location.)])],0,[pemit(%#,Invalid origin.)])],0,[pemit(%#,The [name(%3)] cannot hold that much.)])],011,[pemit(%#,That is not a valid commodity.)],101,[pemit(%#,You do not have that much of that commodity.)],110,[pemit(%#,Invalid destination.)],[pemit(%#,Error in operation.)])])])])]
&CMD_TRANSFERALL Cargo Transport Parent=$transfer all from * to *:th [if(hasattr(%0,locked),[pemit(%#,The [name(%0)] is locked.)],[if(hasattr(%1,locked),[pemit(%#,The [name(%1)] is locked.)],[if(u(fun_validorigin,%0),[if(u(fun_validdest,%1),[if(lte(get(%0/capacity_used),[get(%1/capacity_remaining)]),[if(strmatch(loc(%0),loc(%1)),[u(fun_transferall,%0,%1)],[pemit(%#,Those are not in the same location.)])],[pemit(%#,[name(%1)] does not have enough space.)])],[pemit(%#,Invalid destination.)])],[pemit(%#,Invalid origin.)])])])]
&CMD_TRANSFERALL2 Cargo Transport Parent=$transfer all of * from * to *:th [if(u(fun_iscommod,%0,%1),[if(hasattr(%1,locked),[pemit(%#,The [name(%1)] is locked.)],[if(hasattr(%2,locked),[pemit(%#,The [name(%2)] is locked.)],[if(u(fun_validorigin,%1),[if(u(fun_validdest,%2),[if(lte(mul(get(%1/storage_%0),v(%0.weight)),[get(%2/capacity_remaining)]),[if(strmatch(loc(%1),loc(%2)),[u(fun_transferall2,%0,%1,%2)],[pemit(%#,Those are not in the same location.)])],[pemit(%#,[name(%2)] does not have enough space.)])],[pemit(%#,Invalid destination.)])],[pemit(%#,Invalid origin.)])])])],[pemit(%#,That is not a valid commodity.)])]
&CMD_UNLOAD Cargo Transport Parent=$unload * of * from * to *=*:th [switch([hasattr(me,transfer)],0,[switch([u(fun_iscommod,[secure(%1)],[secure(%2)])][u(fun_gotenough,[secure(%0)],[secure(%1)],[secure(%2)])][u(fun_validdest,[secure(%3)])],111,[switch([gte([v(capacity_remaining)],%0)],1,[switch([u(fun_isship,%2)],1,[switch([and([strmatch([loc(me)],[loc(%2)])],[strmatch([loc(me)],[loc(%3)])])],1,[switch([strmatch([get([get(%2/nav_console)]/board_code)],[secure(%4)])],1,[u(fun_unload_ship,[secure(%0)],[secure(%1)],[secure(%2)],[secure(%3)])],0,[pemit(%#,Error: Incorrect boarding code.)])],0,[pemit(%#,Error: Must be in same location.)])],0,[pemit(%#,Invalid origin.)])],0,[pemit(%#,The [name(%3)] cannot hold that much.)])],011,[pemit(%#,That is not a valid commodity.)],101,[pemit(%#,You do not have that much of that commodity.)],110,[pemit(%#,Invalid destination.)],[pemit(%#,Error in operation.)])][wait(1,[lit([wipe(me/transfer)])])],1,[pemit(%#,Cargo transfer already innitiated.)])]
&CMD_UNLOCK Cargo Transport Parent=$unlock *=*:th [if(strmatch(name(me),*%0*),[if(strmatch(%1,v(passwd)),[if(not(hasattr(me,locked)),[pemit(%#,The [name(me)] is not locked.)],[wipe(me/LOCKED)][pemit(%#,The [name(me)] is now unlocked.)])],[pemit(%#,Incorrect password.)])],[u(fun_fail_morethanone)])]
&CREDITS Cargo Transport Parent=Dave@GalacticMUSH [EMAIL: davemilford@home.com] [ICQ: 8516328]
@DESCRIBE Cargo Transport Parent=%b[ansi(v(border_color),[repeat(_,74)]%r/)]%b[ljust([ansi(v(name_color),[v(type)] Cargo Transport)],73)][ansi(v(border_color),\\%r|[repeat(-,74)]|%r|%b)][ljust([ansi(v(title_color),Owner:)] [v(owner)],73)][ansi(v(border_color),|%r|%b)][ljust([ansi(v(title_color),Storage Capacity:)] [v(max_capacity)],36)][ljust([ansi(v(title_color),Capacity Used:)] [v(capacity_used)],37)][ansi(v(border_color),|%r|[repeat(-,74)]|%r|%b)][ljust([ansi(v(title_color),Contents:)],73)][ansi(v(border_color),|%r|)][if([lattr(me/STORAGE_*)],[u(fun_find_contents)],[ljust(%bNone,74)][ansi(v(border_color),|%r|)])][ansi(v(border_color),[repeat(-,74)]|%r|%b)][ljust([ansi(v(title_color),Capacity Remaining:)] [v(capacity_remaining)],73)][ansi(v(border_color),|%r\\[repeat(_,74)]/)][if(hasattr(me,locked),%r[center(ansi(hr,== LOCKED ==),76)])]
&FUN_CALC_CAPACITY_REMAINING Cargo Transport Parent=[set(me,capacity_remaining:[v(max_capacity)])][iter([lattr(me/STORAGE_*)],[set(me,capacity_remaining:[sub([v(capacity_remaining)],[mul([v(##)],[v([edit(##,STORAGE_,)].weight)])])])]
&FUN_CALC_CAPACITY_USED Cargo Transport Parent=[set(me,capacity_used:0)][iter([lattr(me/STORAGE_*)],[set(me,capacity_used:[add([v(capacity_used)],[mul([v(##)],[v([edit(##,STORAGE_,)].weight)])])])]
&FUN_CHECK_CAN_HOLD Cargo Transport Parent=[switch([hasattr([get(%2/nav_console)],torps_%q0)],0,[lte(%0,[extract([hs_get_attr([get(%2/nav_console)],maxtorps)],[inc(%q0)],1)])],1,[lte(%0,[sub([extract([hs_get_attr([get(%2/nav_console)],maxtorps)],[inc(%q0)],1)],[get([get(%2/nav_console)]/torps_%q0)])])])]
&FUN_FAIL_MORETHANONE Cargo Transport Parent=[iter(lcon(loc(me)),[if(and(hasattr(##,cargocan),hasflag(##,wiz)),[if(not(hasattr(here,MSG_DONE)),[pemit(%#,I don't know what you want to do that to!)][set(here,MSG_DONE:yes)])])])][wipe(here/msg_done)]
&FUN_FIND_CONTENTS Cargo Transport Parent=%b[iter([lattr(me/STORAGE_*)],[ljust([ansi([switch([strmatch([v(commodlist)],*|[edit(##,STORAGE_,)]|*)],1,ng,0,[if(strmatch(v(hspacecommods),*|[edit(##,STORAGE_,)]|*),ny,n)])],[capstr([lcstr([edit(##,STORAGE_,)])])])],35)][ljust([ansi(nc,[v(##)])],10)][ljust([ansi(nb,%[)][ansi(ny,[mul(v(##),v([edit(##,STORAGE_,)].weight))])][ansi(nb,%])],28)][ansi(v(border_color),|%r|)])]
&FUN_FIND_CONTENTS2 Cargo Transport Parent=[if([lattr(me/STORAGE_*)],%b[iter([lattr(me/STORAGE_*)],[ansi([switch([strmatch([v(commodlist)],*|[edit(##,STORAGE_,)]|*)],1,ng,0,n)],[ljust([capstr([lcstr([edit(##,STORAGE_,)])])],25)])][ljust([ansi(nc,[v(##)])],48)]%r)],None.%r)]
&FUN_GOTENOUGH Cargo Transport Parent=[cand([lte(%0,[get(%2/STORAGE_%1)])],[gt(%0,0)])]
&FUN_ISCOMMOD Cargo Transport Parent=[hasattr(%1,storage_%0)]
&FUN_ISSHIP Cargo Transport Parent=[and([hasattr(%0,nav_console)],[hasflag(%0,shipobj)])]
&FUN_LOAD_SHIP Cargo Transport Parent=[set(%2,storage_%1:[sub([get(%2/storage_%1)],%0)])][set(%3,storage_%1:[switch([hasattr(%3,storage_%1)],1,[add([get(%3/storage_%1)],%0)],0,%0)])][pemit(%#,The [name(me)] hums as %0 [capstr([lcstr(%1)])] are moved to [name(%2)].)][switch([strmatch([v(storage_%1)],0)],1,[wipe(%2/storage_%1)])][hs_set_attr([get(%3/nav_console)]/cargoleft,[sub([hs_get_attr([get(%3/nav_console)],cargoleft)],%0)])][u(%2/fun_calc_capacity_used)][u(%2/fun_calc_capacity_remaining)]
&FUN_RELOAD Cargo Transport Parent=[setq(0,[switch([lcstr(%1)],plasma_torpedo,5,photon_torpedo,6,cutter_torpedo,7,implosion_torpedo,8,reaper_missile,9)])][switch([gte(%0,1)],1,[switch([strmatch(|plasma_torpedo|cutter_torpedo|reaper_missile|implosion_torpedo|photon_torpedo|,*|[lcstr(%1)]|*)],1,[u(fun_reload2,%0,%1,%2)],0,[pemit(%#,That is not a valid torpedo.)])],0,[pemit(%#,Must be greater than 1.)])][switch([v(storage_%1)],0,[wipe(me/storage_%1)])][trigger(me/fun_calc_capacity_used)][trigger(me/fun_calc_capacity_remaining)]
&FUN_RELOAD2 Cargo Transport Parent=[switch([squish([u(fun_check_can_hold,%0,%1,%2)])],1,[u(fun_reload3,%0,%1,%2)],0,[pemit(%#,The [name(%2)] can't hold that much.)])]
&FUN_RELOAD3 Cargo Transport Parent=[switch([hasattr([get(%2/nav_console)],torps_%q0)],1,[set([get(%2/nav_console)],torps_%q0:[add([get([get(%2/nav_console)]/torps_%q0)],[floor(%0)])])],0,[set([get(%2/nav_console)],torps_%q0:[floor(%0)])])][set(me,storage_%1:[sub([v(storage_%1)],[floor(%0)])])][pemit(%#,You load %0 of [capstr([lcstr(%1)])] into [name(%2)].)]
&FUN_TRANSFERALL Cargo Transport Parent=[iter(lattr(%0/STORAGE_*),[if(hasattr(%1,##),[set(%1,##:[add(get(%1/##),get(%0/##))])],[set(%1,##:[get(%0/##)])])][wipe(%0/##)])][u(%0/fun_calc_capacity_used)][u(%0/fun_calc_Capacity_remaining)][u(%1/fun_calc_capacity_used)][u(%1/fun_calc_Capacity_remaining)][pemit(%#,Contents transferred.)]
&FUN_TRANSFERALL2 Cargo Transport Parent=[if(hasattr(%2,storage_%0),[set(%2,storage_%0:[add(get(%2/storage_%0),get(%1/storage_%0))])],[set(%2,storage_%0:[get(%1/storage_%0)])])][wipe(%1/storage_%0)][pemit(%#,Transfer of [capstr(%0)] complete.)])][u(%1/fun_calc_capacity_used)][u(%1/fun_calc_capacity_remaining)][u(%2/fun_calc_capacity_used)][u(%2/fun_calc_capacity_remaining)]
&FUN_TRANSFER_COMMOD Cargo Transport Parent=[switch([hasattr(me,transfer)],0,{[set(me,transfer:1)][set(%2,storage_%1:[sub([get(%2/storage_%1)],%0)])][set(%3,storage_%1:[switch([hasattr(%3,storage_%1)],1,[add([get(%3/storage_%1)],%0)],0,%0)])][u(%2/fun_calc_capacity_remaining)][pemit(%#,The [name(%2)] hums as %0 [capstr([lcstr(%1)])] are moved to [name(%3)].)][switch([strmatch([get(%2/storage_%1)],0)],1,[wipe(%2/storage_%1)])][trigger(%3/fun_calc_capacity_remaining)][trigger(%3/fun_calc_capacity_used)][u(%2/fun_calc_capacity_used)][u(%2/fun_calc_capacity_remaining)][wait(1,[lit([wipe(me/transfer)])])]},1,[pemit(%#,Cargo transfer already innitiated.)])]
&FUN_UNLOAD_SHIP Cargo Transport Parent=[set(%2,storage_%1:[sub([get(%2/storage_%1)],%0)])][set(%3,storage_%1:[switch([hasattr(%3,storage_%1)],1,[add([get(%3/storage_%1)],%0)],0,%0)])][pemit(%#,The [name(me)] hums as %0 [capstr([lcstr(%1)])] are moved from [name(%2)].)][switch([strmatch([get(%2/storage_%1)],0)],1,[wipe(%2/storage_%1)])][hs_set_attr([get(%2/nav_console)]/cargoleft,[add([hs_get_attr([get(%2/nav_console)],cargoleft)],[mul(%0,[v(%1.weight)])])])][u(%3/fun_calc_capacity_used)][u(%3/fun_calc_capacity_remaining)]
&FUN_VALIDDEST Cargo Transport Parent=[cand([hasflag(%0,Wiz)],[hasattr(%0,cargocan)])]
&FUN_VALIDORIGIN Cargo Transport Parent=[cand([hasflag(%0,Wiz)],[hasattr(%0,cargocan)])]
@LISTEN Cargo Transport Parent=* has left.
&MAX_CAPACITY Cargo Transport Parent=200
&OLDLOC Cargo Transport Parent=#-1
&OWNER Cargo Transport Parent=Administration Transportation Corp.
&PASSWD Cargo Transport Parent=changeme
&STOPDRIVING Cargo Transport Parent=$stop driving *:th [if(strmatch(name(me),*%0*),[switch([strmatch([v(driver)],*%#*)],1,[emit(%n steps out of the [name(me)].)][wipe(me/driver)],0,[pemit(%#,You are not driving.)])],[u(fun_fail_morethanone)])]
&TORP_LIST Cargo Transport Parent=|plasma_torpedo|cutter_torpedo|reaper_missile|implosion_torpedo|photon_torpedo|
&TYPE Cargo Transport Parent=Type II
&VERSION Cargo Transport Parent=3.0
&CARGOCAN Cargo Transport=YES
