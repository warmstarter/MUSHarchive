& help
-------------------------------[ +Help Files ]--------------------------------
-------------------------------- IC Commands ---------------------------------
  +view             locks            
-------------------------------- OOC Commands --------------------------------
  +3who             +beginner         +bg               +finger
  +hangouts         +info             +jnotes           +selfboot
  +staff            +uptime           +where            +who
  ooc              
---------------------------------- Systems -----------------------------------
  +help             bboard            building          credits
  jobs              metarooms         places           

To get help on a topic, type '+help <topic>'
------------------------------------------------------------------------------

& +view
------------------------------------------------------------------------------
  Syntax: +view
          +view <target>
          +view <target>/<name>

  Views are a way to expand the detail of a thing with data that might not
  necessarily fit well, or concisely, in its description. To see a list of all
  views in your current location, including players, objects, and exits, type
  +view. The second command shows only a list of those views on the target.
  The final command allows you to read those views. Note that you can use 'me'
  to refer to yourself and 'here' to refer to your location.

  To set a view, simply type &VIEW-<name> <target>=Stuff. The name should have
  spaces replaced with underscores (ie: &VIEW-EYE_COLOR me=Brown). You can only
  set views on things you control, such as yourself or objects you create.
-----------------------------------------------------------------------------

& locks
------------------------------------------------------------------------------
  Syntax: lock <exit>
          unlock <exit>

  The lock and unlock commands allow you to lock or unlock exits that you have
  keys to. All exits in building projects (areas of the game outside the main
  "street" areas) have lists that show who controls them. A lock can be set as
  'owners', 'tenants', 'keys', or 'none'. Each level can control locks set to
  the levels below it. For example, locks set 'none' cannot be locked or
  unlocked by anyone. Locks set to 'tenants' can only be unlocked by a tenant
  or an owner, and so forth.
------------------------------------------------------------------------------

& +3who
------------------------------------------------------------------------------
  Syntax: +3who

  This command is similar to +who, but shows the list sorted into three columns.
  This is useful for games with lots of players where the regular who or +who
  lists scroll off your screen.
------------------------------------------------------------------------------

& +beginner
------------------------------------------------------------------------------
  Syntax: +beginner

  This command will show you a list of useful game commands. This is a decent
  primer for people who are new to MU*ing to at least give them the basic
  commands they'll need to communicate with other players, who can better direct
  them to what they're looking for. If you have suggestions for commands that
  might go well on this list for your game, contact staff.
------------------------------------------------------------------------------

& +bg
------------------------------------------------------------------------------
  Syntax: +bgadd <number>=<text>
          +bgedit <number>=<old>/<new>
          +bgclear <number>
          +bglist
          +bg <number>
          +bgsubmit

  This set of commands allows you to manage your character's background story.
  The first command adds a new section. The second allows you to edit that
  section in the event of typos or changes. The third clears a section
  completely to allow you to retart it. The fourth gives a list of all your
  background sections, and the fifth allows you to read them.

  The final command submits your background for approval and sets your character
  as waiting for approval. A job is created regarding your background, which
  will allow staff to communicate with you more easily in the event that changes
  are necessary. If this job is approved, your background is approved as well.
  You may want to familiarize yourself with the +myjobs commands to stay up to
  date with the status of your approval.
------------------------------------------------------------------------------

& +finger
------------------------------------------------------------------------------
  Syntax: +finger <name>

  This command displays useful information about a player. You can also type
  '+finger me' to see your own finger information. There are a variety of
  built-in finger fields, but there are also additional fields that you can
  customize yourself. For more information on setting up your +finger, see
  '+help finger-setup'.

------------------------------------------------------------------------------

& finger-setup
------------------------------------------------------------------------------
  The following finger categories are built-in. To set them, use &<field> 
  me=<data>

  FULLNAME....... Your character's full name.
  AGE............ Your character's true age.
  APP-AGE........ Your character's apparent age.
  POSITION....... Your character's IC position.
  FAME........... What your character is famous for.
  RP-PREFS....... Your roleplay preferences.
  ALTS........... The names of your other characters.
  THEMESONG...... Your character's theme song.
  QUOTE.......... A quote from your character, or that describes them.
  HOURS.......... Your typical online hours.
  TEMPERAMENT.... A brief synopsis of your character's personality.
  VACATION....... Useful for letting others know if you'll be away.
  URL............ Your character website, if applicable.
  WIKI........... Your character wiki page, if applicable.

  You can also set up custom finger attributes. If you want to set an attribute
  called "More Detail" you could type &FINGER-MORE_DETAIL me=<data>, and it
  would show in your +finger. Note that field names longer than 11 characters
  are truncated.
------------------------------------------------------------------------------

& +hangouts
------------------------------------------------------------------------------
  Syntax: +hangouts

  Staff can tag certain rooms as being hangouts. By typing this command, you
  will see a list, along with the number of people currently in that hangout.
  This command will even show unfindable players in that location, but it will
  not show you their names.
------------------------------------------------------------------------------

& +info
------------------------------------------------------------------------------
  Syntax: +info
          +info <player>
          +info <player>/<section>

  The info system allows you to add visible sections of your character's
  backstory that other players might know. The first command shows you your
  general info, and will list other info sections if you have them set. The
  second form of the command allows you to see this information for another
  player (or for yourself if you use 'me'). The third command will view this
  info, on yourself or another.

  To set your general info, type &INFO-GENERAL me=<text>. You can set other info
  sections by typing &INFO-<name> me=<text>. Note that <name> should have spaces
  replaced with underscores.
------------------------------------------------------------------------------

& +jnotes
------------------------------------------------------------------------------
  Syntax: +jnotes me
          +jnotes me/<number or name>
          +jnote/pitch <title>=<data>
          +jnote/pitch <obj>/<title>=<data>
          +jnote/show <title> to <player>

  This set of commands allows you to manage judgenotes on your character-- that
  is, notes approved by staff that denote additional powers or other information
  about your character which you may want recorded. The first command lists your
  jnotes, and the second command will view them. You can view notes either by
  number or by their title.

  The third form of the command proposes a new jnote for your character. A job
  will be opened about the note, and if it is approved by staff, your note will
  be set. You may want to use the +myjobs command to stay apprised of the status
  of your request. The fourth form of the command functions similarly, but
  allows you to pitch notes for things that you control. The fifth form of the
  command shows your jnote to another player. They will see your note, and can
  verify its authenticity with the +verify command.
------------------------------------------------------------------------------

& +selfboot
------------------------------------------------------------------------------
  Syntax: +selfboot

  This command allows you to boot 'extra' connections that are sometimes left
  over as a result of losing your connection to the game.
------------------------------------------------------------------------------

& +staff
------------------------------------------------------------------------------
  Syntax: +staff
          +staff/all

  This command shows a list of all connected, visible staff along with their
  status and idle time. The second form of the command lists all staff,
  regardless of connection status, with online staffers shown first.
------------------------------------------------------------------------------

& +uptime
------------------------------------------------------------------------------
  Syntax: +uptime

  This command displays basic runtime statistics for the game, such as boot
  time, current server time, and the game server's uptime.
------------------------------------------------------------------------------

& +where
------------------------------------------------------------------------------
  Syntax: +where

  Similar to +who, this command shows a list of online players sorted by their
  location. If the location is JUMP_OK and you pass its tportlock, you will be
  shown its dbref. If a player or the room they are in is unfindable, you will
  not be able to see them, but they will be listed in the "Unfindable" section
  at the end of the list. Staff will see all players regardless, but unfindable
  players will have a * by their name.
------------------------------------------------------------------------------

& +who
------------------------------------------------------------------------------
  Syntax: +who

  This command displays an alternate WHO that lists player sex, alias, idle
  time, status, and location (if not unfindable). For similar commands, see:
  +3who, +where, and +hangouts.
------------------------------------------------------------------------------

& ooc
------------------------------------------------------------------------------
  Syntax: ooc <message>

  This command will show an OOC message to everyone in your current room. This
  is useful for communicating out of character when you are in an in-character
  area. Note that, just like a channel, you can use ":" or ";" to pose or
  pose/nospace to OOC.
------------------------------------------------------------------------------

& +help
------------------------------------------------------------------------------
  Syntax: +help
          +help <file>
          +help <file>/<subfile>

  This set of commands allows you access the global +help system. Many players
  sometimes get confused that +help and help are separate systems, and so it is
  worth noting that 'help' is traditionally for commands, functions, and
  features that are built in to the server code, while '+help' is for commands
  that have been added on to the server through softcode.

  The first command shows an index of all +help topics. The second command
  allows you to read a topic, and the third will allow you to read subtopics.
  Unlike the built-in help system-- and even some softcoded systems in use
  elsewhere-- +help files can have multiple keywords to make it easier to find
  the right file. For example, you can access any +help file whose name starts
  with a + without typing it. '+help hangouts' is identical to '+help
  +hangouts'.
------------------------------------------------------------------------------

& bboard
------------------------------------------------------------------------------
     Myrddin's BBS is a global, multi-threaded board with a rich set of
     features. To see help on a particular topic, type '+help <topic>'
     (Example: +help bbread).

     TOPIC                 DESCRIPTION
     ~~~~~                 ~~~~~~~~~~~
     bbread                Reading bulletin board messages.
     bbpost                Posting bulletin board messages.
     bbmisc                Other commands (removing messages, unsubscribing
                             groups, resubscribing to groups, etc)

     bbtimeout             Expanded help on the topic of message timeouts.
------------------------------------------------------------------------------

& bbread
------------------------------------------------------------------------------
     +bbread                         Scans joined bulletin board groups.
     +bbread <#>                     Scans messages in group <#>.
     +bbread <#>/<list>              Reads message(s). <list> can be a single
                                        number, multiple numbers, or a range
                                        of numbers (ie. 1-6), or any combo.
     +bbread <#>/u                   Reads all unread messages in group <#>.
     +bbnext                         Reads your next unread message.
     +bbcatchup <#>                  Marks all messages in group <#> as read.
                                        You can use multiple group #'s/names
                                        or may use the word 'all' to catchup
                                        on all messages on all boards.

     +bbscan        Totals unread postings (if any) in each joined group. You
                    can place this command in your @aconnect, and it's
                    recommended you do so.

Note: You can use the boards name (or abbreviation) in place of it's number.
------------------------------------------------------------------------------

& bbpost
------------------------------------------------------------------------------
     +bbpost <#>/<title>             This starts a post to group <#>.
     +bbwrite <text>                 This adds text to an already started post.
     +bb <text>                      Same as +bbwrite.
     +bbedit <area>=<old>/<new>      Edits your post in progress. Valid areas
                                       are: text, title
     +bbproof                        Displays your current post in progress.
     +bbtoss                         Discards your current post in progress.
     +bbpost                         This will post your current post in
                                       progress.

     +bbpost <#>/<subject>=<body>    Posts a message to group <#>. This is a
                                       quick way of posting a message with
                                       one command.
     +bbedit <#>/<#>=<old>/<new>     Edits one of your posted messages.

Note: You can use the boards name (or abbreviation) in place of it's number.
------------------------------------------------------------------------------

& bbmisc 
------------------------------------------------------------------------------
     +bbremove <#>/<list>            Removes a message by you. <list> can be a
                                       single number, a group of numbers, or a
                                       range (10-14).
     +bbmove <#>/<#> to <#>          Moves one of your messages to a new group.
     +bbleave <#>                    Unsubscribe from group <#>.
     +bbjoin <#>                     Joins a group you've previously 'left'.
     +bblist                         Listing of all groups available to you
                                       along with their timeout values.
     +bbsearch <#>/<name>            Shows you a list of <name>'s postings on
                                       group <#>.
     +bbtimeout <#>/<#>=<days>       Changes timeout for a message to <days>.
     +bbnotify <#>=<on|off>          Turn post notification for group <#> on
                                       or off.

  
For a '.sig', set an attribute on you called BB_SIG, and place your
signature in that.

Note: You can use the board's name (or abbreviation) in place of its number.
------------------------------------------------------------------------------

& bbtimeout
------------------------------------------------------------------------------
There's only a couple of things that need to be understood in order to take
full advantage of message timeouts.

1: Once a day, the TR_TIMEOUT attribute on the bbpocket should be triggered.
   Some games already have a way of accomplishing this. For games that do not,
   simply have a wizard execute set the 'autotimeout' global parameter:
      +bbconfig autotimeout=on
   Turning that parameter on sets up the board to take care of its own daily
   triggering.  Setting the paramenter to 'off' turns off the BBS's internal
   triggering.

2: There are 3 different timeout values:

   The global parameter 'timeout' (set via the '+bbconfig timeout=<days>'
   command) sets a default timeout that will be set on any new bb groups
   created after the execution of this command.

   The group parameter 'timeout' (set via the '+bbconfig <#>/timeout=<days>'
   command) sets a default timeout for the group <#>. Any new messages
   posted to this group will inherit that timeout.

   The user command '+bbtimeout <group>/<message list>=<days>' will set the
   specified timeout on individual messages. Players can only modify their
   own messages, wizards can modify any messages. Players can only set
   timeouts equal to or less than the default timeout for the board, wizards
   can set any timeout.

   In all cases, a timeout of '0' indicates no timeout.
------------------------------------------------------------------------------

& building
------------------------------------------------------------------------------
  Syntax: +brequest <name>=<description>
          +buildcheck
          +build/submit

  These commands assist players in building projects for the game. The first
  command allows you to request or pitch a project to staff. The name you use
  in your brequest will be the name of your project, and so you should use
  something specific like "Soylent's House", "715 East Central", or "Rhythm
  Nightclub". If your request is approved, login data for your builder character
  will be sent to you via @mail. You can use the 'myjobs' commands to stay up to
  date on the status of your request.

  The second command allows you to check your project. It will show you a list
  of required fields for each of your rooms, exits, and objects. Once you are
  confident that you are finished, use +build/submit to notify staff. This will
  create a new job, and you can use the 'myjobs' commands to access it. You
  should use this to let staff know where you'd like your project linked. If
  approved, your project will automatically be linked to the grid.
------------------------------------------------------------------------------

& credits
------------------------------------------------------------------------------
  This softcode system is principally the work of Soylent@BrazilMUX, however
  it builds on the work of several other people, and could not have happened
  without them:

  +uptime...... Written by Orion@Granite. It is included unmodified.          
  +3who........ Originally written by Ian@BrazilMUX. My modifications are     
                certainly less elegant than the original.                     
  Backgrounds.. The original system is by BEM@Granite. I have cleaned it up   
                and integrated it with Anomaly Jobs.                          
  SGP.......... This system began as a rewrite of SGP. Some commands are      
                retained from the original, with and without modification.    
                Including: +commands and +contents (added column view), +join 
                +return and +summon (rewritten), +selfboot (unchanged), +info 
                (rewritten), +finger (principally the same, but cleaned up),  
                +view (minor changes), and places (completely rewritten).     
                Thanks to Audumla, BEM@Granite, and all the other fine folks  
                who contributed.                                              
  Myrddin...... Myrddin's excellent bboard code is included with minor        
                modifications. I have changed the date code (original code    
                from 8BitMUSH) and included the +bbnext command               
                (Obsidian@DynamixMUSH). My +Cron code is a rewrite of his     
                original MUSHCron, but including several new features and     
                accounting for time drift due to server lag.                  
  Meta Rooms... Gwen Morse suggested I add Meta Rooms. The idea is from       
                MUDCore for TinyMUSH, and I basically read their help files   
                and wrote it the way I wanted it to work from there.          
  Anomaly Jobs. http://code.google.com/p/anomalyjobs/

  Everything else is mine. I'd like to thank Brazil, nails, and Ian for
  answering a ton of questions. If you have any questions, please feel free to
  contact me at BrazilMUX, or via the TinyMUX mailing list.
------------------------------------------------------------------------------

& jobs
------------------------------------------------------------------------------
  Syntax: +myjobs
          +myjob <#>
          +myjob/add <#>=<comment>

  These commands provide you with an interface to the Anomaly Jobs system, and
  allow you to see jobs that you created, or that are tagged for you. The
  +myjobs command shows a list of these jobs, along with various data about
  them. The second command allows you to read a job, and the third command will
  allow you to comment.

  For other help with topics relating to jobs, please see +jhelp, especially
  '+jhelp player'.
------------------------------------------------------------------------------

& places
------------------------------------------------------------------------------
  Syntax: places
          place <number>
          join <number, name, or player>
          depart
          mv from <number> to <number>
          tt <message>
          tt/ooc <message>

  Places are virtual locations in a room that are used to expand its sense of
space without creating more rooms. You remain in the same room, but join a
group of people (perhaps at a table, or in a secluded corner) and may have a
quiet conversation with only those in the same place.

  Respectively, the commands list all places, get information on a specific
place, leave your current place, move a vacancy from one place to another,
send a message (tabletalk) to those at your location, and send an ooc message
to those at your location. You may use :, ;, ", and | with the tt commands
to pose, pose/nospace, say, and emit. Some places can be overheard, and will
mutter conversations there to the room. The percentage chance of this
happening is up to the builder. Some people have the ability to spy on places
and will overhear conversations with perfect clarity. See 
'+help places-spying' for more information. OOC messages will not be muttered
or spied.

  For information on configuring places, see '+help places/places-config'. To
see just a list of options, see '+help places/places-options'.
-----------------------------------------------------------------------------

& places-config
------------------------------------------------------------------------------
  Syntax: +place/templates
          +place/template <name>
          +place/add <number>
          +place/add <number>=<template>
          +place/del <number>
          place <number>
          +place/set <number>/<option>=<value>

  Place creation is actually quite simple, and starts with a system of global
templates to cut down on configuration. Use +place/templates to see a list,
and +place/template <name> to see the info for a template. +place/add <number>
adds <number> places to your room using the default template, but you can also
specify a template using =<template>. Adding more places does not delete
places you have already made. You can also delete a place by number, and the
places above it will be renumbered down. (ie: You delete place 3 in a room of
5 places. Place 4 becomes Place 4, and Place 5 becomes Place 4. No data is
lost.) When you control a room, the 'place' command will also show you
configuration data for the place in question, and you can set each option
with the +place/set command.

  Note that using "clear" as the value for an option will clear out that
option. This is useful for removing "Fixed" from a place, for example. For
more information on the different configuration options, please see
'+help places-options'.
-----------------------------------------------------------------------------

& places-options
------------------------------------------------------------------------------
  For the most part the configuration options are pretty self-explanatory,
but here is a key:

Name:      The name of the place. (ie: a side bedroom)
Desc:      A description of the place.
Curplaces: The number of spots at a place.
Maxplaces: The maximum number of spots at the place.
Fixed:     A failure message that blocks the 'mv' command.
Full:      Shown when trying to move a vacancy to a full place.
Join:      Displayed to a player joining a place.
OJoin:     Displayed to others at a place when someone joins.
Depart:    Displayed to a player leaving a place.
ODepart:   Displayed to others at a place when someone leaves.
Prefix:    Prepended to tt and spy output.
Mutter:    The chance from 0-100 of a place being overheard.
Spying:    0 means it can't be spied on, 1 means it can.
-----------------------------------------------------------------------------

& places-spying
------------------------------------------------------------------------------
  Syntax: +spy <number>

  You must be tagged by staff as being able to spy in order to use this
command. Once you've been set up, you can type "+spy <number>" to choose a
place in your current room to spy. To remove a place from the list, be in the
room the place is in and use the command again (ie: '+spy 3' to remove
place 3). To remove all places in a room from your list, type '+spy 0' in the
relevant room.

  Not all places are able to be spied upon, and that setting is configured by
the builder of the places. Note that if a conversation at a table mutters,
you will not receive the output twice. OOC conversation at tables cannot be
spied.
-----------------------------------------------------------------------------

& metarooms
-----------------------------------------------------------------------------
  Syntax: +rooms
          +room <name>
          +makeroom/test [<template>][=<name>]
          +makeroom [<template>][=<name>]

  For an explanation of Meta Rooms, see '+help MetaRooms-Explained'.

  For a list of the templates linked in your current room, and to see the
configuration data for those templates, use the "+rooms" and "+room
<template>" commands. There are a few ways to make a room, and in all cases
you can use "+makeroom/test" to see an example of what you would create.

  The first way is to simply type "+makeroom". This picks a template at
random and generates a room from it. This is good for when you just want a
random place to play in and don't really care what it is. The second is to
use "+makeroom <template>" for when you'd like a room of a specific type,
but don't care about the details beyond that. The final option is
"+makeroom <template>=<name>" which allows you to choose which property
values you'd like used to make your room. Note that this only works for
templates whose room names are made of one word properties. If the name
contains "$color" and you would like to use "Light Pink," that can't
currently be specified. This will be addressed in a later version.

  There is a limit of 5 Meta Rooms per room. If Meta Room creation encouters
a room name that already exists or an exit that conflicts with another exit
in your room it will fail and ask you to retry the command.
-----------------------------------------------------------------------------

& metarooms-explained
-----------------------------------------------------------------------------
  Meta Rooms are an additional way for builders to extend a sense of space.
It might be helpful to think of them like a big brother to Places. Instead of
being a subsection of an existing room, like a table or a small side room, a
Meta Room creates an actual new room in the database along with exits to and
from, off of the player's room based on a template defined by staff. A Meta
Room is inherently temporary. Once it's been used and all players have left
it or logged off, the room destroys itself, fading back into the background.
Objects dropped in the room are teleported to their owners, and logged off
players are pushed outside to the room the Meta Room is linked to.

  Say a city would have numerous nightclubs of various types. Staff could
create a 'nightclub' template and set the Name to: "$adjective $genre Club".
Then the $adjective property might be: New, Old, Run-down, Forgotten, and
Abandoned. The $genre property might be: Goth, Rock, Dance, and Biker. Staff
sets the article to 'a'. They link the template in any room where there
might be random nightclubs. When a player uses the +makeroom command, it
fills in those properties at random, and it might create Abandoned Biker
Club, or New Dance Club. That's an example of an independent property.
The value of $adjective has no affect on the value of $genre.

  Continued in '+help MetaRooms-Explained2'
-----------------------------------------------------------------------------

& metarooms-explained2
-----------------------------------------------------------------------------
  You could also create a template with the Name: "$type-1 Quarters" and the
Desc: "There is a $object-1" on the floor. Set the $type property to:
Servant's, and Guard. Set the $object property to: broom, and sword. Now when
you create a room you will either get a Servant's Quarters with a broom on
the floor, or a Guard Quarters with a sword on the floor. All properties that
end in the same number suffix will pull their item from the same position in
the property list, so it follows that any properties that are dependent need
the same number of items in their lists. If you have 10 different $types,
you need 10 $objects to go with them. The value of one property is dependent
on the value of another.

  This also works when a player choose the name for a room using the
+makeroom <template>=<name> command. If a property in the Name is dependent,
the code looks up the list position of the word the player gives and uses
that same position for dependent variables when it makes the desc. This way
players don't have to specify the entire desc of the room.

  Meta Rooms may initially seem a bit complex, but really it's just because
they're so customizable. With a bit of experimentation and judicious use of
the "+makeroom/test" command you'll quickly get a feel for how the system
works!
-----------------------------------------------------------------------------